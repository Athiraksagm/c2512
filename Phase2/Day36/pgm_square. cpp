#include <iostream>
#include <unistd.h>
#include <cstring>
#include <string>
#include <sstream>
#include <cstdlib>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define BUFFER_SIZE 1024
#define MAX_CONNS 5

void server(int port);
void serveClient(int&);
void client(std::string server_ip, int port);
void requestServer(int&);

void server(int port) {
    int server_socket_fd;
    // Create socket
    if ((server_socket_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    sockaddr_in address; //struct sockaddr_in

    // Bind socket to port
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(port);

    if (bind(server_socket_fd, (sockaddr*)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        close(server_socket_fd);
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_socket_fd, MAX_CONNS) < 0) {
        perror("Listen failed");
        close(server_socket_fd);
        exit(EXIT_FAILURE);
    }

    // Accept a connection
    int client_socket_fd;
    int addrlen = sizeof(address);
    if ((client_socket_fd = accept(server_socket_fd, (sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {
        perror("Accept failed");
        close(server_socket_fd);
        exit(EXIT_FAILURE);
    }

    // Serve the client
    serveClient(client_socket_fd);

    // Close server socket
    close(server_socket_fd);
}

void serveClient(int& client_socket_fd) {
    char buffer[BUFFER_SIZE];
    int numCount;

    // Receive the number of elements (N)
    read(client_socket_fd, buffer, BUFFER_SIZE);
    numCount = atoi(buffer);

    std::cout << "Processing squares for " << numCount << " numbers." << std::endl;

    // Process numbers one by one
    for (int i = 0; i < numCount; i++) {
        short number;
        read(client_socket_fd, buffer, BUFFER_SIZE);
        number = static_cast<short>(atoi(buffer));
        short square = number * number;

        std::cout << "process: " << number << "^2 = " << square << std::endl;

        // Send response (square)
        std::string squareStr = std::to_string(square);
        send(client_socket_fd, squareStr.c_str(), squareStr.size() + 1, 0);
    }

    std::cout << "\tAll responses sent to client." << std::endl;

    // Release client
    close(client_socket_fd);
}

void client(std::string server_ip, int port) {
    int client_socket_fd = 0;
    // Create socket
    if ((client_socket_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation error");
        exit(EXIT_FAILURE);
    }

    // Specify server address
    sockaddr_in server_address;
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(port);

    if (inet_pton(AF_INET, server_ip.c_str(), &server_address.sin_addr) <= 0) {
        perror("Invalid address or address not supported");
        exit(EXIT_FAILURE);
    }

    // Connect to server
    if (connect(client_socket_fd, (sockaddr*)&server_address, sizeof(server_address)) < 0) {
        perror("Connection failed");
        exit(EXIT_FAILURE);
    }

    // Request the server
    requestServer(client_socket_fd);

    // Close client socket
    close(client_socket_fd);
}

void requestServer(int& client_socket_fd) {
    int numCount;
    std::cout << "Enter the number of values (N): ";
    std::cin >> numCount;

    // Send the count of numbers
    std::string countStr = std::to_string(numCount);
    send(client_socket_fd, countStr.c_str(), countStr.size() + 1, 0);

    // Send numbers and receive squares
    for (int i = 0; i < numCount; i++) {
        short number;
        std::cout << "Enter number " << (i + 1) << ": ";
        std::cin >> number;

        // Send the number
        std::string numberStr = std::to_string(number);
        send(client_socket_fd, numberStr.c_str(), numberStr.size() + 1, 0);

        // Receive the square
        char buffer[BUFFER_SIZE];
        read(client_socket_fd, buffer, BUFFER_SIZE);

        short square = static_cast<short>(atoi(buffer));
        std::cout << "Server response: " << number << "^2 = " << square << std::endl;
    }

    std::cout << "Thank you to my square calculator server!" << std::endl;
}

int main(int argc, char* argv[]) {
    if (argc <= 1) {
        std::cout << "usage:\n\t./squareCalculatorApp.out server 8080" << std::endl;
        std::cout << "\t./squareCalculatorApp.out client 127.0.0.1 8080" << std::endl;
        return EXIT_FAILURE;
    }

    if (!((strcmp(argv[1], "client") == 0 && argc == 4) ||
          (strcmp(argv[1], "server") == 0 && argc == 3))) {
        std::cout << "usage:\n\t./squareCalculatorApp.out server 8080" << std::endl;
        std::cout << "\t./squareCalculatorApp.out client 127.0.0.1 8080" << std::endl;
        return EXIT_FAILURE;
    }

    if (strcmp(argv[1], "client") == 0) {
        std::cout << "Client [to server `" << argv[2] << ":" << argv[3] << "`]" << std::endl;
        client(argv[2], atoi(argv[3]));
    }
    if (strcmp(argv[1], "server") == 0) {
        std::cout << "Server [port:`" << argv[2] << "`]" << std::endl;
        server(atoi(argv[2]));
    }

    return EXIT_SUCCESS;
}