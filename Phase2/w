TEST(SystemStatsTest, HandleClientProcessesRequest) {
    io_context ioc;
    tcp::acceptor acceptor(ioc, tcp::endpoint(tcp::v4(), 0));  // Bind to an available port
    tcp::socket server_socket(ioc);
    tcp::socket client_socket(ioc);

    // Connect the client and server sockets
    std::thread server_thread([&]() {
        acceptor.accept(server_socket);
        handleClient(std::move(server_socket));
    });

    client_socket.connect(acceptor.local_endpoint());
    websocket::stream<tcp::socket> ws_client(std::move(client_socket));
    ws_client.handshake("localhost", "/");

    // Send REQUEST_STATS
    ws_client.write(net::buffer(std::string("REQUEST_STATS")));

    // Read response
    boost::beast::flat_buffer buffer;
    ws_client.read(buffer);

    // Convert buffer to string and parse JSON
    std::string response = boost::beast::buffers_to_string(buffer.data());
    json stats = json::parse(response);

    EXPECT_TRUE(stats.contains("boot_count"));
    EXPECT_TRUE(stats.contains("uptime"));

    ws_client.close(websocket::close_code::normal);
    server_thread.join();
}



void handleClient(ip::tcp::socket socket) 
{
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        // Read initial client request
        ws->read(buffer, ec);
        if (ec) {
            if (ec == boost::beast::websocket::error::closed) {
                std::cout << "Client disconnected: WebSocket closed\n";
            } 
            else if (ec == boost::asio::error::eof) {
                std::cout << "Client disconnected:\n";
            } 
            else {
                std::cerr << "Error reading from client: " << ec.message() << "\n";
            }
            return;
        }

        std::string clientMessage = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (clientMessage == "REQUEST_STATS") {
            std::cout << "Request received from client. Sending current stats...\n";
            json firstStat;
            firstStat["boot_count"] = boot_count.load();
            firstStat["uptime"] = getUptime();
            ws->write(net::buffer(firstStat.dump()), ec);
        }

        // Add client to active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        // Continuous reading (for periodic updates)
        while (true) {
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) {
                std::cout << "Client disconnected: WebSocket closed\n";
                break;
            }
            if (ec) {
                std::cerr << "Client disconnected!! " << "\n";
                break;
            }
        }

        // Remove client from active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }
    } catch (...) {
        std::cerr << "Client error.\n";
    }
}



















cmake_minimum_required(VERSION 3.10)
project(Server)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(server source/server.cpp ../common/source/tinyxml2.cpp)






cmake_minimum_required(VERSION 3.10)
project(Client)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(client source/client.cpp ../common/source/tinyxml2.cpp)




cmake_minimum_required(VERSION 3.10)
project(SystemStatLoggingMicroservice)

add_subdirectory(server)
add_subdirectory(client)
