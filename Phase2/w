DiskStatus FetchDiskStatus(){
    DiskStatus disk_status;
    struct statvfs stat;
    statvfs("./", &stat);
    disk_status.disk_space = ((stat.f_blocks * stat.f_bsize) / (1024 * 1024 * 1024)); 
    disk_status.free_space = ((stat.f_bfree * stat.f_bsize) / (1024 * 1024 * 1024)); 
    disk_status.utilized_capacity = (((disk_status.disk_space - disk_status.free_space) / disk_status.disk_space) * 100); 
    return disk_status;
}

// TEST FetchDiskStatus()
TEST(ServerTests, FetchDiskStatus) {
    DiskStatus disk_status = FetchDiskStatus();
    
    // Check that the values are reasonable
    EXPECT_GT(disk_status.disk_space, 0);          // Total disk space must be positive
    EXPECT_GE(disk_status.free_space, 0);          // Free space should not be negative
    EXPECT_GE(disk_status.utilized_capacity, 0);   // Utilization should be >= 0%
    EXPECT_LE(disk_status.utilized_capacity, 100); // Utilization should be <= 100%
}

float FetchThreshold(std::string filepath){
    tinyxml2::XMLDocument doc;
    if(doc.LoadFile(filepath.c_str()) != tinyxml2::XML_SUCCESS){
        std::cerr << "Error loading threshold from XML\n";
        return 80.0; // Default value if file read fails
    }

    const char* threshold = doc.FirstChildElement("config") ->FirstChildElement("threshold")->GetText();
    return threshold ? std::stof(threshold) : 80.0;
}

// TEST FetchThreshold()
TEST(ServerTests, FetchThreshold_Valid) {
    float threshold = FetchThreshold("../test_config.xml");
    EXPECT_FLOAT_EQ(threshold, 75.5);
}
TEST(ServerTests, FetchThreshold_MissingFile) {
    float threshold = FetchThreshold("no_file.xml");
    EXPECT_FLOAT_EQ(threshold, 80.0); // Default value
}
TEST(ServerTests, FetchThreshold_MalformedXML) {
    float threshold = FetchThreshold("test_malformed_config.xml");
    EXPECT_FLOAT_EQ(threshold, 80.0); // Default value
}


int FetchAlertInterval(std::string filepath){
    tinyxml2::XMLDocument doc;
    if(doc.LoadFile(filepath.c_str()) != tinyxml2::XML_SUCCESS){
        std::cerr << "Error loading alert interval from XML\n";
        return 30; // Default value if file read fails
    }

    const char* threshold = doc.FirstChildElement("config") ->FirstChildElement("alert_interval")->GetText();
    return threshold ? std::stof(threshold) : 30;
}

// TEST FetchAlertInterval()
TEST(ServerTests, FetchAlertInterval_Valid) {
    int alert_interval = FetchAlertInterval("../test_config.xml");
    EXPECT_EQ(alert_interval, 20);
}
TEST(ServerTests, FetchAlertInterval_MissingFile) {
    int alert_interval = FetchAlertInterval("no_file.xml");
    EXPECT_EQ(alert_interval, 30); // Default value
}
TEST(ServerTests, FetchAlertInterval_MalformedXML) {
    int alert_interval = FetchAlertInterval("test_malformed_config.xml");
    EXPECT_EQ(alert_interval, 30); // Default value
}

void DiskStatusRequestHandler(){
    std::thread([](){
        httplib::Server server;
        server.Get("/fetchDiskStatus", [](const httplib::Request &req, httplib::Response &res){
            nlohmann::json json_response;
            DiskStatus disk_status = FetchDiskStatus();
            json_response["disk_space"] = disk_status.disk_space;
            json_response["free_space"] = disk_status.free_space;
            json_response["utilized_capacity"] = disk_status.utilized_capacity;
            
            res.set_content(json_response.dump(), "application/json");
            
        });

        std::cout << "Server is running on http://localhost:8080\n";
        server.listen("localhost", 8080);
    }).detach();
}


// TEST DiskStatusRequestHandler()
TEST(ServerTests, DiskStatusRequestHandler) {
    std::thread server_thread([]() {
        EXPECT_NO_THROW(DiskStatusRequestHandler());
    });

    std::this_thread::sleep_for(std::chrono::seconds(1));

    // Send a GET request to the server
    httplib::Client cli("http://localhost:8080");
    auto res = cli.Get("/fetchDiskStatus");

    EXPECT_NE(res, nullptr);
    EXPECT_EQ(res->status, 200);

    running = false; // Stop the server
    server_thread.join();
}







#include "gtest/gtest.h"
#include "../include/server.h"
#include <fstream>

using json = nlohmann::json;
using namespace boost::asio;
using namespace boost::beast;
using namespace boost::asio::ip;
using namespace tinyxml2;

// Global variables from server.cpp
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = 10; 


// Function to get boot count (same as server.cpp)
int getBootCount() {
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute system command for boot count..\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        return std::stoi(buffer);
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

// Function to get system uptime (same as server.cpp)
long getUptime() {
    struct sysinfo info;
    if (sysinfo(&info) != 0) {
        std::cerr << "Error: Failed to get system uptime.\n";
        return -1;
    }
    return info.uptime;
}

// Load configuration from config.xml (same as server.cpp)
void loadConfig() {
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS) {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root) {
        std::cerr << "Error: <config> element missing in config.xml. Using default 10s.\n";
        return;
    }
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element) {
        std::cerr << "Error: <logging_interval> element missing in config.xml. Using default 10s.\n";
        return;
    }
    const char* interval_text = interval_element->GetText();
    if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit)) {
        try {
            logging_interval = std::stoi(interval_text);
            std::cerr << "Logging interval set to: " << logging_interval << "s\n" << std::flush;
        } catch (...) {
            std::cerr << "Error: Invalid logging interval in config.xml. Using default 10s.\n";
            logging_interval = 10;
        }
    } else {
        std::cerr << "Error: Invalid logging interval in config.xml (non-numeric value). Using default 10s.\n" << std::flush;
        logging_interval = 10;
    }
}

// Function to broadcast system statistics (same as server.cpp)
void broadcastStats() {
    json stats;
    stats["boot_count"] = boot_count.load();
    stats["uptime"] = getUptime();
    std::string message = stats.dump();

    std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto &client : clients) {
            boost::system::error_code ec;
            client->write(net::buffer(message), ec);
            if (ec) {
                std::cerr << "Client disconnected: " << ec.message() << "\n";
                disconnected_clients.push_back(client);
            }
        }

        for (const auto &client : disconnected_clients) {
            clients.erase(client);
        }
    }
}

//Test for getBootCount()
TEST(SystemStatsTest, BootCount) {
    int bootCount = getBootCount();
    
    // Boot count should be a non-negative integer
    EXPECT_GE(bootCount, 0);

    // Verify that a valid integer is returned
    if (bootCount > 0) {
        EXPECT_GT(bootCount, 0);
    }
}

// Test for getUptime()
TEST(SystemStatsTest, Uptime) {
    long uptime = getUptime();
    
    // Uptime should be a positive value
    EXPECT_GT(uptime, 0);
}
TEST(SystemStatsTest, LoadConfig) {
    // Ensure logging_interval is correctly set
    loadConfig();
    EXPECT_GT(logging_interval, 0);
}

TEST(SystemStatsTest, BroadcastStats) {
    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        clients.clear();
    }
    EXPECT_NO_FATAL_FAILURE(broadcastStats());
}

// **MAIN FUNCTION FOR TESTS**
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
