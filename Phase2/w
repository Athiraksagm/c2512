#include "gtest/gtest.h"
#include "../include/server.h"
#include <boost/beast/websocket.hpp>
#include <boost/asio.hpp>
#include <thread>

using namespace boost::asio;
using namespace boost::beast::websocket;
using namespace boost::beast;

// Global variable to store received message
std::string received_message;

// Mock WebSocket Client to Receive Data
void mockWebSocketClient(ip::tcp::endpoint server_endpoint) {
    try {
        io_context ioc;
        ip::tcp::socket socket(ioc);
        socket.connect(server_endpoint);

        websocket::stream<ip::tcp::socket> ws(std::move(socket));
        ws.handshake("localhost", "/");

        flat_buffer buffer;
        ws.read(buffer);
        received_message = buffers_to_string(buffer.data());
    } 
    catch (const std::exception &e) {
        std::cerr << "WebSocket Client Error: " << e.what() << std::endl;
    }
}

// **Test Case: Ensure BroadcastStats Sends Data**
TEST(SystemStatsTest, BroadcastStatsSendsData) {
    received_message.clear();  // Reset global variable

    // Start server WebSocket in a separate thread
    std::thread serverThread([]() {
        io_context ioc;
        ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 8080));
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);

        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        // Add client to the list (simulate real scenario)
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        // Call broadcast function (should send data)
        broadcastStats();
    });

    // Start mock WebSocket client
    std::thread clientThread(mockWebSocketClient, ip::tcp::endpoint(ip::tcp::v4(), 8080));

    serverThread.join();
    clientThread.join();

    EXPECT_FALSE(received_message.empty());  // Ensure data is actually sent

    // Validate JSON format
    json expected_json = json::parse(received_message);
    EXPECT_TRUE(expected_json.contains("boot_count"));
    EXPECT_TRUE(expected_json.contains("uptime"));
}