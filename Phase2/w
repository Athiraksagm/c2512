void handleClient(ip::tcp::socket socket) 
{
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        // Wait for a "REQUEST_STATS" message from the client
        ws->read(buffer, ec);
        if (ec) {
            std::cerr << "[Server] Error reading client request: " << ec.message() << "\n";
            return;
        }

        std::string clientMessage = boost::beast::buffers_to_string(buffer.data());
        std::cout << "[Server] Received message: " << clientMessage << "\n";  // Debug print
        buffer.consume(buffer.size());  // Clear buffer

        if (clientMessage == "REQUEST_STATS") {
            std::cout << "[Server] Request received from client. Sending current stats...\n";  // Debug print

            json firstStat;
            firstStat["boot_count"] = boot_count.load();
            firstStat["uptime"] = getUptime();
            ws->write(net::buffer(firstStat.dump()), ec);
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        while (true) {
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) {
                std::cout << "[Server] Client disconnected.\n";
                break;
            }

            if (ec) {
                std::cerr << "[Server] Error reading from client: " << ec.message() << "\n";
                break;
            }

            std::string receivedMsg = boost::beast::buffers_to_string(buffer.data());
            std::cout << "[Server] Received another message: " << receivedMsg << "\n";
            buffer.consume(buffer.size());
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }
    } catch (...) {
        std::cerr << "[Server] Client error.\n";
    }
}






















cmake_minimum_required(VERSION 3.10)
project(Server)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(server source/server.cpp ../common/source/tinyxml2.cpp)






cmake_minimum_required(VERSION 3.10)
project(Client)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(client source/client.cpp ../common/source/tinyxml2.cpp)




cmake_minimum_required(VERSION 3.10)
project(SystemStatLoggingMicroservice)

add_subdirectory(server)
add_subdirectory(client)
