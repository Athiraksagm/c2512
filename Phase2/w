#include "client.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

const std::string CSV_FILE_PATH = "../source/system_stats.csv";
namespace websocket = boost::beast::websocket;
std::atomic<bool> stopClient(false);

/**
 * @brief Saves system statistics (boot count and uptime) to a CSV file.
 */
void saveStatsToCSV(int boot_count, long uptime) 
{
    std::ifstream fileCheck(CSV_FILE_PATH);
    bool fileExists = fileCheck.good();
    bool isEmpty = fileCheck.peek() == std::ifstream::traits_type::eof();
    fileCheck.close();

    std::ofstream file(CSV_FILE_PATH, std::ios_base::app);
    if (!fileExists || isEmpty) {
        file << "Date(YYYY-MM-DD), Time(HH:MM:SS), Boot Count, Uptime (seconds)\n";
    }

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);
    file << std::put_time(local_time,"%Y-%m-%d, %H:%M:%S") << ", " << boot_count << ", " << uptime << "\n";
}

/**
 * @brief Connects to the server to request stats and receive periodic updates.
 */
void connectToServer(const std::string& host, int request_port, int periodic_port, bool logToFile) 
{
    boost::asio::io_context ioc;
    ip::tcp::resolver resolver(ioc);

    // Connect to request stats port (9000)
    auto endpoints_req = resolver.resolve(host, std::to_string(request_port));
    websocket::stream<ip::tcp::socket> ws_request(ioc);
    boost::asio::connect(ws_request.next_layer(), endpoints_req);
    ws_request.handshake(host, "/");

    std::cout << "Sending REQUEST_STATS to server...\n\n";
    ws_request.write(net::buffer(std::string("REQUEST_STATS")));

    boost::beast::flat_buffer buffer;
    boost::system::error_code ec;
    ws_request.read(buffer, ec);

    if (ec) {
        std::cerr << "Error receiving initial stats: " << ec.message() << "\n";
        return;
    }

    std::string data = boost::beast::buffers_to_string(buffer.data());
    json stats = json::parse(data);
    std::cout << "[Received Stats] Boot Count: " << stats["boot_count"]
              << ", Uptime: " << stats["uptime"] << " seconds\n";

    if (logToFile) {
        saveStatsToCSV(stats["boot_count"], stats["uptime"]);
    }

    buffer.consume(buffer.size());
    ws_request.close(websocket::close_code::normal);

    // Connect to periodic updates port (9001)
    auto endpoints_periodic = resolver.resolve(host, std::to_string(periodic_port));
    websocket::stream<ip::tcp::socket> ws_periodic(ioc);
    boost::asio::connect(ws_periodic.next_layer(), endpoints_periodic);
    ws_periodic.handshake(host, "/");

    std::cout << "Listening for periodic updates...\n\n";

    while (!stopClient) {
        ws_periodic.read(buffer, ec);
        if (ec) {
            if (ec == websocket::error::closed) {
                std::cout << "Server closed periodic updates connection.\n";
                break;
            } else {
                std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
                break;
            }
        }

        std::string periodicData = boost::beast::buffers_to_string(buffer.data());
        json periodicStats = json::parse(periodicData);

        std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
                  << ", Uptime: " << periodicStats["uptime"] << " seconds\n";

        if (logToFile) {
            saveStatsToCSV(periodicStats["boot_count"], periodicStats["uptime"]);
        }

        buffer.consume(buffer.size());
    }

    ws_periodic.close(websocket::close_code::normal);
}

/**
 * @brief Handles SIGINT (Ctrl+C) to safely exit.
 */
void signalHandler(int signum)
{
    std::cout << "\nClient received SIGINT, closing WebSocket...\n\n";
    stopClient = true; 
    exit(signum);
}

/**
 * @brief Main function to start the client.
 */
int main(int argc, char* argv[]) 
{
    signal(SIGINT, signalHandler);
    bool logToFile = false;
    std::string host = "localhost";
    int request_port = 9000;
    int periodic_port = 9001;

    if (argc > 1) host = argv[1]; 

    if (argc > 2) {
        try { request_port = std::stoi(argv[2]); }
        catch (...) { std::cerr << "Invalid request port. Using default 9000.\n"; }
    }

    if (argc > 3) {
        try { periodic_port = std::stoi(argv[3]); }
        catch (...) { std::cerr << "Invalid periodic port. Using default 9001.\n"; }
    }

    if (argc > 4 && std::string(argv[4]) == "--log") {
        logToFile = true;
    }

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING CLIENT\n"
              << "=============================\n\n";
    std::cout << "Connecting to server at " << host << " (Request Port: " << request_port
              << ", Periodic Port: " << periodic_port << ")\n\n";

    connectToServer(host, request_port, periodic_port, logToFile);
    return 0;
}