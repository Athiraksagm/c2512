// Establishes a WebSocket connection to the server and receives system stats
void connectToServer(const std::string& host, int port, bool logToFile) 
{
    io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve(host, std::to_string(port));

    websocket::stream<ip::tcp::socket> ws(ioc);
    boost::asio::connect(ws.next_layer(), endpoints);
    ws.handshake(host, "/");

    std::cout << "Connected to server on port " << port << "\n";
    std::cout << "Sending REQUEST_STATS to server...\n";
    ws.write(net::buffer(std::string("REQUEST_STATS")));

    boost::beast::flat_buffer buffer;
    boost::system::error_code ec;
    ws.read(buffer, ec);

    if (ec) {
        std::cerr << "Error receiving initial stats: " << ec.message() << "\n";
        return;
    }

    std::string data = boost::beast::buffers_to_string(buffer.data());
    json stats = json::parse(data);

    std::cout << "[Received Stats] Boot Count: " << stats["boot_count"]
              << ", Uptime: " << stats["uptime"] << " seconds\n";

    if (logToFile) {
        saveStatsToCSV(stats["boot_count"], stats["uptime"]);
    }

    buffer.consume(buffer.size());

    // Start a separate thread to listen for user input to close the client
    std::atomic<bool> running{true};
    std::thread userInputThread([&]() {
        std::cout << "Press 'q' then Enter to disconnect.\n";
        std::string input;
        while (std::getline(std::cin, input)) {
            if (input == "q") {
                running = false;
                break;
            }
        }
    });

    while (running) {
        ws.read(buffer, ec);
        if (ec) {
            std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
            break;
        }

        std::string periodicData = boost::beast::buffers_to_string(buffer.data());
        json periodicStats = json::parse(periodicData);

        std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
                  << ", Uptime: " << periodicStats["uptime"] << " seconds\n";

        buffer.consume(buffer.size());
    }

    // Send a proper WebSocket close frame before exiting
    ws.close(websocket::close_code::normal, ec);
    if (ec) {
        std::cerr << "[Client] Error closing WebSocket: " << ec.message() << "\n";
    } else {
        std::cout << "[Client] Connection closed properly.\n";
    }

    if (userInputThread.joinable()) {
        userInputThread.join();
    }
}




















cmake_minimum_required(VERSION 3.10)
project(Server)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(server source/server.cpp ../common/source/tinyxml2.cpp)






cmake_minimum_required(VERSION 3.10)
project(Client)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(client source/client.cpp ../common/source/tinyxml2.cpp)




cmake_minimum_required(VERSION 3.10)
project(SystemStatLoggingMicroservice)

add_subdirectory(server)
add_subdirectory(client)
