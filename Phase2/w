#include <iostream>
#include <thread>
#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include <nlohmann/json.hpp>
#include <httplib.h>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

std::shared_ptr<websocket::stream<ip::tcp::socket>> ws_client;
bool stopClient = false;

// Function to request initial stats via REST API
json requestInitialStats(const std::string& host, int restPort) {
    httplib::Client client(host, restPort);
    auto res = client.Get("/fetchSystemStats");

    if (res && res->status == 200) {
        return json::parse(res->body);
    } else {
        std::cerr << "Failed to fetch initial stats via REST API.\n";
        return json();
    }
}

// Function to receive periodic stats via WebSocket
void connectToWebSocket(const std::string& host, int wsPort) {
    boost::asio::io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve(host, std::to_string(wsPort));

    ws_client = std::make_shared<websocket::stream<ip::tcp::socket>>(ioc);
    boost::asio::connect(ws_client->next_layer(), endpoints);
    ws_client->handshake(host, "/");

    boost::beast::flat_buffer buffer;
    boost::system::error_code ec;

    while (!stopClient) {
        ws_client->read(buffer, ec);
        if (ec) {
            if (ec == websocket::error::closed) {
                std::cout << "WebSocket closed by server.\n";
                break;
            } else {
                std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
                break;
            }
        }

        std::string periodicData = boost::beast::buffers_to_string(buffer.data());
        json periodicStats = json::parse(periodicData);

        std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
                  << ", Uptime: " << periodicStats["uptime"] << " seconds\n";

        buffer.consume(buffer.size());
    }

    std::cout << "Client exiting WebSocket gracefully.\n";
    ws_client.reset();
}

int main(int argc, char* argv[]) {
    if (argc < 4) {
        std::cerr << "Usage: " << argv[0] << " <server_host> <REST_port> <WS_port>\n";
        return 1;
    }

    std::string serverHost = argv[1];
    int restPort = std::stoi(argv[2]);
    int wsPort = std::stoi(argv[3]);

    // Fetch initial stats using REST API
    json initialStats = requestInitialStats(serverHost, restPort);
    if (!initialStats.empty()) {
        std::cout << "[Initial Stats] Boot Count: " << initialStats["boot_count"]
                  << ", Uptime: " << initialStats["uptime"] << " seconds\n";
    }

    // Start receiving periodic stats via WebSocket
    connectToWebSocket(serverHost, wsPort);

    return 0;
}











#include <iostream>
#include <thread>
#include <unordered_set>
#include <mutex>
#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include <nlohmann/json.hpp>
#include <httplib.h>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

std::atomic<int> boot_count(10); // Example boot count
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;

int getUptime() {
    return 3600; // Dummy uptime value
}

// Function to handle REST API requests for initial stats
void startRESTServer(int restPort) {
    httplib::Server server;

    server.Get("/fetchSystemStats", [](const httplib::Request &, httplib::Response &res) {
        json response;
        response["boot_count"] = boot_count.load();
        response["uptime"] = getUptime();
        
        res.set_content(response.dump(), "application/json");
    });

    std::cout << "REST API Server running on port " << restPort << "\n";
    server.listen("0.0.0.0", restPort);
}

// Function to handle WebSocket clients for periodic stats
void handleWebSocketClient(ip::tcp::socket socket) {
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        while (ws->is_open()) {
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) break;
            if (ec) {
                std::cerr << "WebSocket read error: " << ec.message() << "\n";
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }

    } catch (const std::exception &e) {
        std::cerr << "WebSocket client error: " << e.what() << "\n";
    }
}

// Function to start the WebSocket server
void startWebSocketServer(int wsPort) {
    boost::asio::io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), wsPort));

    std::cout << "WebSocket Server running on port " << wsPort << "\n";

    while (true) {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        std::thread(handleWebSocketClient, std::move(socket)).detach();
    }
}

// Function to send periodic system stats via WebSocket
void sendPeriodicStats() {
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(10)); // Adjust interval as needed
        json periodicStats;
        periodicStats["boot_count"] = boot_count.load();
        periodicStats["uptime"] = getUptime();

        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto &client : clients) {
            boost::system::error_code ec;
            client->write(net::buffer(periodicStats.dump()), ec);
            if (ec) {
                std::cerr << "Error sending periodic stats: " << ec.message() << "\n";
            }
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc < 3) {
        std::cerr << "Usage: " << argv[0] << " <REST_port> <WS_port>\n";
        return 1;
    }

    int restPort = std::stoi(argv[1]);
    int wsPort = std::stoi(argv[2]);

    // Start REST API server in a separate thread
    std::thread(restServerThread, startRESTServer, restPort).detach();

    // Start WebSocket server in a separate thread
    std::thread(wsServerThread, startWebSocketServer, wsPort).detach();

    // Start periodic stat updates
    sendPeriodicStats();

    return 0;
}