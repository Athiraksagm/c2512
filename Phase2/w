#include "server.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = 10;

int getBootCount() 
{
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) return -1;
    char buffer[128];
    fgets(buffer, sizeof(buffer), pipe);
    pclose(pipe);
    return std::stoi(buffer);
}

long getUptime() 
{
    struct sysinfo info;
    sysinfo(&info);
    return info.uptime;
}

void loadConfig() 
{
    XMLDocument doc;
    if (doc.LoadFile("../config.xml") == XML_SUCCESS) 
    {
        XMLElement *root = doc.FirstChildElement("config");
        if (root) 
        {
            XMLElement *intervalElement = root->FirstChildElement("logging_interval");
            if (intervalElement) 
            {
                logging_interval = std::stoi(intervalElement->GetText());
            }
        }
    }
}

void broadcastStats() 
{
    while (true) {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnectedClients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients) {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnectedClients.push_back(client);
                }
            }

            for (const auto &client : disconnectedClients) 
            {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
    }
}

void handleClient(ip::tcp::socket socket) 
{
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        // Read initial client request
        ws->read(buffer, ec);
        if (ec) {
            if (ec == boost::beast::websocket::error::closed) {
                std::cout << "Client disconnected: WebSocket closed\n";
            } 
            else if (ec == boost::asio::error::eof) {
                std::cout << "Client disconnected:\n";
            } 
            else {
                std::cerr << "Error reading from client: " << ec.message() << "\n";
            }
            return;
        }

        std::string clientMessage = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (clientMessage == "REQUEST_STATS") {
            std::cout << "Request received from client. Sending current stats...\n";
            json firstStat;
            firstStat["boot_count"] = boot_count.load();
            firstStat["uptime"] = getUptime();
            ws->write(net::buffer(firstStat.dump()), ec);
        }

        // Add client to active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        // Continuous reading (for periodic updates)
        while (true) {
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) {
                std::cout << "Client disconnected: WebSocket closed\n";
                break;
            }
            if (ec) {
                std::cerr << "Client disconnected!! " << "\n";
                break;
            }
        }

        // Remove client from active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }
    } catch (...) {
        std::cerr << "Client error.\n";
    }
}


int main(int argc, char* argv[]) 
{
    loadConfig();
    boot_count.store(getBootCount());

    int port = 9000;  
    if (argc > 1) 
    {
        port = std::stoi(argv[1]);
    }

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n";
    std::cout << "\n";
    std::cout << "Server running at http://localhost:" << port << "...\n";
    std::cout << "\n";

    io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), port));

    std::thread logger(broadcastStats);
    logger.detach();

    while (true) {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        std::thread(handleClient, std::move(socket)).detach();
    }

    return 0;
}
