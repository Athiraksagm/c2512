#include "server.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

const int DEFAULT_LOGGING_INTERVAL = 10;
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> periodic_clients;
std::mutex clients_mutex;
int logging_interval = DEFAULT_LOGGING_INTERVAL;
io_context ioc;

/**
 * @brief Retrieves the system boot count.
 * @return The number of times the system has rebooted, or -1 on failure.
 */
int getBootCount()
{
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute system command for boot count.\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        int count = std::stoi(buffer);
        return (count > 0) ? count : -1;
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

/**
 * @brief Retrieves the system uptime in seconds.
 * @return The system uptime in seconds, or -1 on failure.
 */
long getUptime()
{
    struct sysinfo info;
    if (sysinfo(&info) != 0) {
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

/**
 * @brief Periodically broadcasts system statistics to all connected WebSocket clients.
 */
void broadcastStats()
{
    while (true)
    {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : periodic_clients)
            {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnected_clients.push_back(client);
                }
            }

            for (const auto &client : disconnected_clients)
            {
                periodic_clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(std::max(1, logging_interval)));
    }
}

/**
 * @brief Handles incoming WebSocket connections for requested stats.
 */
void handleClient(ip::tcp::socket socket)
{
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();
        if (!ws->is_open())
            return;

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;
        
        ws->read(buffer, ec);
        if (ec) {
            std::cerr << "Error reading from client: " << ec.message() << "\n";
            return;
        }

        std::string client_message = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (client_message == "REQUEST_STATS") {
            std::cout << "Request received from client. Sending current stats...\n";
            json first_stat;
            first_stat["boot_count"] = boot_count.load();
            first_stat["uptime"] = getUptime();
            ws->write(net::buffer(first_stat.dump()), ec);
        }
    } 
    catch (const std::exception &e) {
        std::cerr << "Client error: " << e.what() << "\n";
    }
}

/**
 * @brief Handles WebSocket connections for periodic updates.
 */
void handlePeriodicUpdates(ip::tcp::socket socket)
{
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();
        if (!ws->is_open())
            return;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            periodic_clients.insert(ws);
        }

        while (ws->is_open()) {
            boost::beast::flat_buffer buffer;
            boost::system::error_code ec;
            ws->read(buffer, ec);
            
            if (ec == websocket::error::closed) {
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            periodic_clients.erase(ws);
        }
    } 
    catch (const std::exception &e) {
        std::cerr << "WebSocket error: " << e.what() << "\n";
    }
}

int main(int argc, char *argv[])
{
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n\n";

    std::string ip_address = "0.0.0.0";
    int request_port = 9000;
    int periodic_port = 9001;

    if (argc > 1) {
        ip_address = argv[1];
    }

    if (argc > 2) {
        try {
            request_port = std::stoi(argv[2]);
        } catch (...) {
            std::cerr << "Error: Invalid request port. Using default 9000.\n";
            request_port = 9000;
        }
    }

    if (argc > 3) {
        try {
            periodic_port = std::stoi(argv[3]);
        } catch (...) {
            std::cerr << "Error: Invalid periodic port. Using default 9001.\n";
            periodic_port = 9001;
        }
    }

    std::cout << "Request server running at ws://" << ip_address << ":" << request_port << "\n";
    std::cout << "Periodic data server running at ws://" << ip_address << ":" << periodic_port << "\n\n";

    loadConfig();
    boot_count.store(getBootCount());

    boost::asio::ip::tcp::endpoint request_endpoint(boost::asio::ip::make_address(ip_address), request_port);
    boost::asio::ip::tcp::endpoint periodic_endpoint(boost::asio::ip::make_address(ip_address), periodic_port);

    ip::tcp::acceptor request_acceptor(ioc, request_endpoint);
    ip::tcp::acceptor periodic_acceptor(ioc, periodic_endpoint);

    std::thread logger(broadcastStats);
    logger.detach();

    std::thread request_server([&]() {
        while (true) {
            ip::tcp::socket socket(ioc);
            boost::system::error_code ec;
            request_acceptor.accept(socket, ec);
            if (!ec) {
                std::thread(handleClient, std::move(socket)).detach();
            }
        }
    });

    std::thread periodic_server([&]() {
        while (true) {
            ip::tcp::socket socket(ioc);
            boost::system::error_code ec;
            periodic_acceptor.accept(socket, ec);
            if (!ec) {
                std::thread(handlePeriodicUpdates, std::move(socket)).detach();
            }
        }
    });

    request_server.join();
    periodic_server.join();

    return 0;
}