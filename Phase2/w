void broadcastStats() 
{
    while (true) {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnectedClients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients) {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnectedClients.push_back(client);
                }
            }

            for (const auto &client : disconnectedClients) 
            {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
    }
}

void handleClient(ip::tcp::socket socket) 
{
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        json firstStat;
        firstStat["boot_count"] = boot_count.load();
        firstStat["uptime"] = getUptime();
        ws->write(net::buffer(firstStat.dump()));

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        boost::beast::flat_buffer buffer;
        while (true) {
            boost::system::error_code ec;
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) 
            {
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }
    } catch (...) {
        std::cerr << "Client error.\n";
    }
}






















cmake_minimum_required(VERSION 3.10)
project(Server)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(server source/server.cpp ../common/source/tinyxml2.cpp)






cmake_minimum_required(VERSION 3.10)
project(Client)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(client source/client.cpp ../common/source/tinyxml2.cpp)




cmake_minimum_required(VERSION 3.10)
project(SystemStatLoggingMicroservice)

add_subdirectory(server)
add_subdirectory(client)
