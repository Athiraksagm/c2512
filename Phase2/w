#include <gtest/gtest.h>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <sys/sysinfo.h>
#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <thread>
#include <mutex>
#include <unordered_set>
#include <memory>
#include <nlohmann/json.hpp>
#include <atomic>
#include <tinyxml2.h>

using json = nlohmann::json;
namespace net = boost::asio;
namespace websocket = boost::beast::websocket;
using ip = boost::asio::ip;
using namespace tinyxml2;

// Global variables from server.cpp
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = 5;
io_context ioc;

// Function prototypes
int getBootCount();
long getUptime();
void loadConfig();
void broadcastStats();

// Function to get boot count (same as server.cpp)
int getBootCount() {
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute system command for boot count..\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        return std::stoi(buffer);
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

// Function to get system uptime (same as server.cpp)
long getUptime() {
    struct sysinfo info;
    if (sysinfo(&info) != 0) {
        std::cerr << "Error: Failed to get system uptime.\n";
        return -1;
    }
    return info.uptime;
}

// Load configuration from config.xml (same as server.cpp)
void loadConfig() {
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS) {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root) {
        std::cerr << "Error: <config> element missing in config.xml. Using default 10s.\n";
        return;
    }
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element) {
        std::cerr << "Error: <logging_interval> element missing in config.xml. Using default 10s.\n";
        return;
    }
    const char* interval_text = interval_element->GetText();
    if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit)) {
        try {
            logging_interval = std::stoi(interval_text);
            std::cerr << "Logging interval set to: " << logging_interval << "s\n" << std::flush;
        } catch (...) {
            std::cerr << "Error: Invalid logging interval in config.xml. Using default 10s.\n";
            logging_interval = 10;
        }
    } else {
        std::cerr << "Error: Invalid logging interval in config.xml (non-numeric value). Using default 10s.\n" << std::flush;
        logging_interval = 10;
    }
}

// Function to broadcast system statistics (same as server.cpp)
void broadcastStats() {
    json stats;
    stats["boot_count"] = boot_count.load();
    stats["uptime"] = getUptime();
    std::string message = stats.dump();

    std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto &client : clients) {
            boost::system::error_code ec;
            client->write(net::buffer(message), ec);
            if (ec) {
                std::cerr << "Client disconnected: " << ec.message() << "\n";
                disconnected_clients.push_back(client);
            }
        }

        for (const auto &client : disconnected_clients) {
            clients.erase(client);
        }
    }
}

// **TEST CASES**
TEST(SystemStatsTest, BootCount) {
    int bootCount = getBootCount();
    EXPECT_GE(bootCount, 0);
}

TEST(SystemStatsTest, Uptime) {
    long uptime = getUptime();
    EXPECT_GT(uptime, 0);
}

TEST(SystemStatsTest, LoadConfig) {
    // Ensure logging_interval is correctly set
    loadConfig();
    EXPECT_GT(logging_interval, 0);
}

TEST(SystemStatsTest, BroadcastStats) {
    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        clients.clear();
    }
    EXPECT_NO_FATAL_FAILURE(broadcastStats());
}

// **MAIN FUNCTION FOR TESTS**
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}