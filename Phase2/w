#include "client.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

namespace websocket = boost::beast::websocket;
boost::asio::io_context ioc;
std::shared_ptr<websocket::stream<boost::asio::ip::tcp::socket>> ws_client;

// Save system stats to CSV
void saveStatsToCSV(int boot_count, long uptime) 
{
    std::string filename = "../system_stats.csv";

    std::ifstream fileCheck(filename);
    bool fileExists = fileCheck.good();
    bool isEmpty = fileCheck.peek() == std::ifstream::traits_type::eof();
    fileCheck.close();

    std::ofstream file(filename, std::ios_base::app);

    if (!fileExists || isEmpty) {
        file << "Date(YYYY-MM-DD), Time(HH:MM:SS), Boot Count, Uptime (seconds)\n";
    }

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);

    file << 1900 + local_time->tm_year << "-"  
         << 1 + local_time->tm_mon << "-"  
         << local_time->tm_mday << ", "  
         << local_time->tm_hour << ":"  
         << local_time->tm_min << ":"  
         << local_time->tm_sec << ", "  
         << boot_count << ", "  
         << uptime << "\n";
}

//Establishes a Websocket connection to the server and receives system stats
void connectToServer(const std::string& host, int port, bool logToFile) 
{
    io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve(host, std::to_string(port));

    websocket::stream<ip::tcp::socket> ws(ioc);
    boost::asio::connect(ws.next_layer(), endpoints);
    ws.handshake(host, "/");

    std::cout << "Connected to server on port " << port << "\n";
    std::cout << "\n";
    std::cout << "Sending REQUEST_STATS to server...\n";
    std::cout << "\n";
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
    ws.write(net::buffer(std::string("REQUEST_STATS")));

    boost::beast::flat_buffer buffer;
    boost::system::error_code ec;
    ws.read(buffer, ec);

    if (ec) {
        std::cerr << "Error receiving initial stats: " << ec.message() << "\n";
        return;
    }

    std::string data = boost::beast::buffers_to_string(buffer.data());
    json stats = json::parse(data);

    std::cout << "[Received Stats] Boot Count: " << stats["boot_count"]
              << ", Uptime: " << stats["uptime"] << " seconds\n";

    if (logToFile) {
        saveStatsToCSV(stats["boot_count"], stats["uptime"]);
    }

    buffer.consume(buffer.size());

    while (true) {
        ws.read(buffer, ec);
        if (ec) {
            std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
            break;
        }

        std::string periodicData = boost::beast::buffers_to_string(buffer.data());
        json periodicStats = json::parse(periodicData);

        std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
                  << ", Uptime: " << periodicStats["uptime"] << " seconds\n";

        buffer.consume(buffer.size());
    }
}

void signalHandler(int signum) {
    std::cout << "\nClient received SIGINT (Ctrl + C), closing WebSocket...\n";

    if (ws_client) {
        boost::system::error_code ec;
        ws_client->close(websocket::close_code::normal, ec);
        if (ec) {
            std::cerr << "Error closing WebSocket: " << ec.message() << "\n";
        } else {
            std::cout << "WebSocket closed successfully.\n";
        }
    }

    exit(signum);
}

int main(int argc, char* argv[]) 
{
    signal(SIGINT, signalHandler);
    bool logToFile = false;
    std::string host = "localhost";
    int port = 9000;

    if (argc > 1) {
        port = std::stoi(argv[1]);
    }

    if (argc > 2 && std::string(argv[2]) == "--log") {
        logToFile = true;
    }
    std::cout << "=============================\n" << " SYSTEM STAT LOGGING CLIENT\n" << "=============================\n";
    std::cout << "\n";
    connectToServer(host, port, logToFile);
    return 0;
}
