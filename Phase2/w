void Server::broadcastStats(bool test_mode) {
    json stats;
    stats["boot_count"] = boot_count.load();
    stats["uptime"] = getUptime();
    std::string message = stats.dump();

    std::lock_guard<std::mutex> lock(clients_mutex);
    for (auto &client : clients) {
        boost::system::error_code ec;
        client->write(net::buffer(message), ec);
    }

    if (!test_mode) {  // Run only once in test mode
        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
        broadcastStats(false);
    }
}






TEST(ServerTest, WebSocketClientHandling) {
    Server server;
    EXPECT_NO_THROW({
        // Simulate WebSocket server start
        std::thread ws_thread(&Server::startWebSocketServer, &server, 9000);
        std::this_thread::sleep_for(std::chrono::seconds(1));  // Allow time for setup
        ws_thread.detach();
    });
}



TEST(ServerTest, BroadcastStats) {
    Server server;
    EXPECT_NO_THROW(server.broadcastStats(true));  // Run once
}