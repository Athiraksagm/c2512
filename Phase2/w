#include "server.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

const int DEFAULT_LOGGING_INTERVAL = 10;
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> periodic_clients;
std::mutex clients_mutex;
int logging_interval = DEFAULT_LOGGING_INTERVAL;
io_context ioc;

/**
 * @brief Retrieves the system boot count.
 */
int getBootCount()
{
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe)
    {
        std::cerr << "Error: Failed to execute system command for boot count.\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe))
    {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try
    {
        return std::stoi(buffer);
    }
    catch (...)
    {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

/**
 * @brief Retrieves the system uptime in seconds.
 */
long getUptime()
{
    struct sysinfo info;
    if (sysinfo(&info) != 0)
    {
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

/**
 * @brief Loads logging interval from `config.xml`.
 */
void loadConfig()
{
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS)
    {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root)
        return;
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element)
        return;

    try
    {
        logging_interval = std::stoi(interval_element->GetText());
    }
    catch (...)
    {
        logging_interval = DEFAULT_LOGGING_INTERVAL;
    }
}

/**
 * @brief Periodically broadcasts system stats to all connected WebSocket clients.
 */
void broadcastStats()
{
    while (true)
    {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : periodic_clients)
            {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec)
                {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    periodic_clients.erase(client);
                }
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(std::max(1, logging_interval)));
    }
}

/**
 * @brief Handles WebSocket connections for periodic updates.
 */
void handlePeriodicUpdates(ip::tcp::socket socket)
{
    try
    {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            periodic_clients.insert(ws);
        }

        boost::beast::flat_buffer buffer;
        while (ws->is_open())
        {
            boost::system::error_code ec;
            ws->read(buffer, ec);
            if (ec == websocket::error::closed)
                break;
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            periodic_clients.erase(ws);
        }
    }
    catch (const std::exception &e)
    {
        std::cerr << "WebSocket error: " << e.what() << "\n";
    }
}

int main()
{
    loadConfig();
    boot_count.store(getBootCount());

    ip::tcp::acceptor periodic_acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 9001));

    std::thread logger(broadcastStats);
    logger.detach();

    while (true)
    {
        ip::tcp::socket socket(ioc);
        boost::system::error_code ec;
        periodic_acceptor.accept(socket, ec);
        if (!ec)
        {
            std::thread(handlePeriodicUpdates, std::move(socket)).detach();
        }
    }

    return 0;
}






#include "client.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

const std::string CSV_FILE_PATH = "../source/system_stats.csv";
std::atomic<bool> stopClient(false);

void saveStatsToCSV(int boot_count, long uptime)
{
    std::ofstream file(CSV_FILE_PATH, std::ios_base::app);
    if (!file)
    {
        std::cerr << "Error opening CSV file for writing.\n";
        return;
    }

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);
    file << std::put_time(local_time, "%Y-%m-%d, %H:%M:%S") << ", " << boot_count << ", " << uptime << "\n";
}

void listenForUpdates(const std::string &host, int periodic_port, bool logToFile)
{
    boost::asio::io_context ioc;
    ip::tcp::resolver resolver(ioc);

    auto endpoints_periodic = resolver.resolve(host, std::to_string(periodic_port));
    websocket::stream<ip::tcp::socket> ws(ioc);
    boost::asio::connect(ws.next_layer(), endpoints_periodic);
    ws.handshake(host, "/");

    boost::beast::flat_buffer buffer;
    boost::system::error_code ec;

    std::cout << "Listening for periodic updates...\n";

    while (!stopClient)
    {
        buffer.consume(buffer.size());
        ws.read(buffer, ec);

        if (ec)
        {
            if (ec == websocket::error::closed)
                break;
            std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
            break;
        }

        std::string data = boost::beast::buffers_to_string(buffer.data());
        json stats = json::parse(data);

        std::cout << "[Periodic Update] Boot Count: " << stats["boot_count"]
                  << ", Uptime: " << stats["uptime"] << " seconds\n";

        if (logToFile)
        {
            saveStatsToCSV(stats["boot_count"], stats["uptime"]);
        }
    }

    ws.close(websocket::close_code::normal);
}

int main()
{
    std::string host = "localhost";
    int periodic_port = 9001;
    bool logToFile = true;

    listenForUpdates(host, periodic_port, logToFile);
    return 0;
}