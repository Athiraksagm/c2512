/**
 * @brief Saves system statistics (boot count and uptime) to a CSV file.
 * 
 * @param boot_count The system's boot count.
 * @param uptime The system's uptime in seconds.
 */
void saveStatsToCSV(int boot_count, long uptime);

/**
 * @brief Requests the initial system statistics from the server using the REST API.
 * 
 * @param host The server IP address.
 * @param restPort The port number of the REST API server.
 * @param logToFile Flag indicating whether to log the stats to a CSV file.
 * @return A JSON object containing the boot count and uptime.
 */
json requestInitialStats(const std::string& host, int restPort, bool logToFile);

/**
 * @brief Establishes a WebSocket connection to receive periodic system statistics.
 * 
 * @param host The server IP address.
 * @param wsPort The port number of the WebSocket server.
 */
void connectToWebSocket(const std::string& host, int wsPort);

/**
 * @brief Handles the SIGINT (Ctrl+C) signal to safely close the WebSocket connection and exit.
 * 
 * @param signum The signal number received.
 */
void signalHandler(int signum);












/**
 * @brief Retrieves the system boot count.
 * 
 * @return The number of times the system has booted. Returns -1 on failure.
 */
int getBootCount();

/**
 * @brief Retrieves the system uptime.
 * 
 * @return The system uptime in seconds. Returns -1 on failure.
 */
long getUptime();

/**
 * @brief Loads configuration settings from `config.xml`.
 * 
 * This function reads the logging interval from the XML configuration file.
 * If the file is missing or contains invalid data, it falls back to the default interval.
 */
void loadConfig();

/**
 * @brief Broadcasts system statistics to all connected WebSocket clients periodically.
 * 
 * This function runs in a loop, sending boot count and uptime at the configured interval.
 */
void broadcastStats();

/**
 * @brief Starts the REST API server to provide system statistics on request.
 * 
 * @param restPort The port number on which the REST API server listens.
 */
void startRESTServer(int restPort);

/**
 * @brief Handles an incoming WebSocket client connection.
 * 
 * @param socket The connected socket for the WebSocket client.
 */
void handleWebSocketClient(boost::asio::ip::tcp::socket socket);

/**
 * @brief Starts the WebSocket server to handle client connections for periodic stats updates.
 * 
 * @param wsPort The port number on which the WebSocket server listens.
 */
void startWebSocketServer(int wsPort);

/**
 * @brief Sends periodic system statistics updates to all connected WebSocket clients.
 * 
 * This function runs continuously, sending system stats every few seconds.
 */
void sendPeriodicStats();