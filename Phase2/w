#include "gtest/gtest.h"
#include "server.h"
#include <fstream>
#include <boost/asio/ip/tcp.hpp>
#include <boost/asio/io_context.hpp>
#include <boost/asio/connect.hpp>
#include <thread>

using namespace boost::asio;
using namespace boost::beast;
using namespace boost::asio::ip;

// ===================== TEST CASES =====================

// Test getBootCount()
TEST(ServerTest, GetBootCount_Valid) {
    int boot_count = getBootCount();
    EXPECT_GE(boot_count, 0) << "Boot count should be non-negative.";
}

TEST(ServerTest, GetBootCount_Failure) {
    // Simulate a failure by running an invalid command
    FILE *pipe = popen("invalid_command", "r");
    if (!pipe) {
        int result = getBootCount();
        EXPECT_EQ(result, -1) << "Should return -1 on failure.";
    }
}

// Test getUptime()
TEST(ServerTest, GetUptime_Valid) {
    long uptime = getUptime();
    EXPECT_GT(uptime, 0) << "Uptime should be a positive number.";
}

TEST(ServerTest, GetUptime_Failure) {
    struct sysinfo info;
    memset(&info, 0, sizeof(info));  // Simulating failure

    long result = getUptime();
    EXPECT_NE(result, -1) << "Should return -1 if sysinfo() fails.";
}

// Test loadConfig()
TEST(ServerTest, LoadConfig_ValidXML) {
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <logging_interval>20</logging_interval>\n"
               << "</config>";
    configFile.close();

    loadConfig();
    EXPECT_EQ(logging_interval, 20) << "Should correctly set logging interval.";
}

TEST(ServerTest, LoadConfig_InvalidXML) {
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <logging_interval>invalid</logging_interval>\n"
               << "</config>";
    configFile.close();

    loadConfig();
    EXPECT_EQ(logging_interval, 10) << "Should fall back to default on invalid value.";
}

TEST(ServerTest, LoadConfig_MissingFile) {
    remove("../source/config.xml");
    loadConfig();
    EXPECT_EQ(logging_interval, 10) << "Should fall back to default if file is missing.";
}

TEST(ServerTest, LoadConfig_MissingLoggingInterval) {
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <!-- Missing logging_interval -->\n"
               << "</config>";
    configFile.close();

    loadConfig();
    EXPECT_EQ(logging_interval, 10) << "Should fall back to default if element is missing.";
}

// Test broadcastStats()
TEST(ServerTest, BroadcastStats_EmptyClients) {
    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        clients.clear();
    }
    EXPECT_NO_FATAL_FAILURE(broadcastStats()) << "Should not crash when no clients exist.";
}

// Test WebSocket Client Handling
TEST(ServerTest, HandleWebSocketClient) {
    io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 8081));

    std::thread server_thread([&]() {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        handleWebSocketClient(std::move(socket));
    });

    std::this_thread::sleep_for(std::chrono::milliseconds(500));

    websocket::stream<ip::tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto results = resolver.resolve("127.0.0.1", "8081");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    EXPECT_TRUE(ws.is_open());

    ws.close(websocket::close_code::normal);
    server_thread.join();
}

// Test REST API Server
TEST(ServerTest, RESTServerFetchStats) {
    std::thread rest_thread([]() { startRESTServer(8090); });
    std::this_thread::sleep_for(std::chrono::seconds(1));

    httplib::Client cli("http://127.0.0.1:8090");
    auto res = cli.Get("/fetchSystemStats");

    EXPECT_EQ(res->status, 200);
    json response = json::parse(res->body);
    EXPECT_TRUE(response.contains("boot_count"));
    EXPECT_TRUE(response.contains("uptime"));

    rest_thread.detach();
}

// Test WebSocket Server
TEST(ServerTest, WebSocketServerConnection) {
    std::thread ws_thread([]() { startWebSocketServer(8091); });
    std::this_thread::sleep_for(std::chrono::seconds(1));

    io_context ioc;
    websocket::stream<ip::tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto results = resolver.resolve("127.0.0.1", "8091");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    EXPECT_TRUE(ws.is_open());

    ws.close(websocket::close_code::normal);
    ws_thread.detach();
}

// ===================== MAIN FUNCTION FOR TESTS =====================
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}