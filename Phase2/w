#ifndef SERVER_H
#define SERVER_H

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <unordered_set>
#include <atomic>
#include <mutex>
#include <thread>
#include <chrono>
#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include <nlohmann/json.hpp>
#include <tinyxml2.h>
#include <sys/sysinfo.h>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

// Global Variables
extern std::atomic<int> boot_count;
extern std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
extern std::mutex clients_mutex;
extern int logging_interval;
extern io_context ioc;

/**
 * @brief Retrieves the system boot count.
 * @return The number of times the system has rebooted.
 */
int getBootCount();

/**
 * @brief Retrieves the system uptime.
 * @return The system uptime in seconds.
 */
long getUptime();

/**
 * @brief Loads the configuration from `config.xml`.
 *        If the file or logging interval is invalid, it falls back to a default value.
 */
void loadConfig();

/**
 * @brief Periodically broadcasts system statistics (boot count and uptime) to connected WebSocket clients.
 */
void broadcastStats();

/**
 * @brief Handles a client WebSocket connection.
 * @param socket The accepted TCP socket for communication.
 */
void handleClient(ip::tcp::socket socket);

#endif // SERVER_H