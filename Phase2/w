void broadcastStats()
{
    while (true)
    {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients) {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnected_clients.push_back(client);
                }
            }

            for (const auto &client : disconnected_clients) {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
    }
}
