TEST(ServerTest, HandleWebSocketClient) {
    Server server;
    boost::asio::io_context io_context;
    ip::tcp::socket dummy_socket(io_context);  // Create a dummy socket

    EXPECT_NO_THROW(server.handleWebSocketClient(std::move(dummy_socket)));
}



void Server::sendPeriodicStats(bool test_mode) {
    json periodicStats;
    periodicStats["boot_count"] = boot_count.load();
    periodicStats["uptime"] = getUptime();

    std::lock_guard<std::mutex> lock(clients_mutex);
    for (auto &client : clients) {
        boost::system::error_code ec;
        client->write(net::buffer(periodicStats.dump()), ec);
    }

    if (!test_mode) {  // Prevent infinite loop in tests
        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
        sendPeriodicStats(false);
    }
}



TEST(ServerTest, SendPeriodicStats) {
    Server server;
    EXPECT_NO_THROW(server.sendPeriodicStats(true));  // Run once
}
