athira@INTVMLT2342:/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicro/server/build$ make
Consolidate compiler generated dependencies of target server
[ 60%] Built target server
Consolidate compiler generated dependencies of target test_server
[ 80%] Building CXX object CMakeFiles/test_server.dir/test/test_server.cpp.o
[100%] Linking CXX executable test_server
/usr/bin/ld: CMakeFiles/test_server.dir/test/test_server.cpp.o: in function `SystemStatsTest_HandleClientProcessesRequest_Test::TestBody()::{lambda()#1}::operator()() const':
test_server.cpp:(.text+0x1088): undefined reference to `handleClient(boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::execution::any_executor<boost::asio::execution::context_as_t<boost::asio::execution_context&>, boost::asio::execution::detail::blocking::never_t<0>, boost::asio::execution::prefer_only<boost::asio::execution::detail::blocking::possibly_t<0> >, boost::asio::execution::prefer_only<boost::asio::execution::detail::outstanding_work::tracked_t<0> >, boost::asio::execution::prefer_only<boost::asio::execution::detail::outstanding_work::untracked_t<0> >, boost::asio::execution::prefer_only<boost::asio::execution::detail::relationship::fork_t<0> >, boost::asio::execution::prefer_only<boost::asio::execution::detail::relationship::continuation_t<0> > > >)'
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/test_server.dir/build.make:97: test_server] Error 1
make[1]: *** [CMakeFiles/Makefile2:111: CMakeFiles/test_server.dir/all] Error 2
make: *** [Makefile:101: all] Error 2




cmake_minimum_required(VERSION 3.10)
project(Server)

set(CMAKE_CXX_STANDARD 14)

include_directories(include include)
add_executable(server source/server.cpp source/tinyxml2.cpp)

# Google Test
enable_testing()
find_package(GTest REQUIRED)
include_directories(${GTEST_INCLUDE_DIRS})
add_executable(test_server test/test_server.cpp)
target_link_libraries(test_server PRIVATE tinyxml2 gtest gtest_main pthread)
#add_library(server_library source/server.cpp)
#target_link_libraries(server_library PRIVATE Boost::boost Boost::asio)
add_test(NAME ServerTest COMMAND test_server)




void handleClient(ip::tcp::socket socket) 
{
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        // Read initial client request
        ws->read(buffer, ec);
        if (ec) {
            if (ec == boost::beast::websocket::error::closed) {
                std::cout << "Client disconnected: WebSocket closed\n";
            } 
            else if (ec == boost::asio::error::eof) {
                std::cout << "Client disconnected:\n";
            } 
            else {
                std::cerr << "Error reading from client: " << ec.message() << "\n";
            }
            return;
        }

        std::string clientMessage = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (clientMessage == "REQUEST_STATS") {
            std::cout << "Request received from client. Sending current stats...\n";
            json firstStat;
            firstStat["boot_count"] = boot_count.load();
            firstStat["uptime"] = getUptime();
            ws->write(net::buffer(firstStat.dump()), ec);
        }

        // Add client to active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        // Continuous reading (for periodic updates)
        while (true) {
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) {
                std::cout << "Client disconnected: WebSocket closed\n";
                break;
            }
            if (ec) {
                std::cerr << "Client disconnected!! " << "\n";
                break;
            }
        }

        // Remove client from active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }
    } catch (...) {
        std::cerr << "Client error.\n";
    }
}



















cmake_minimum_required(VERSION 3.10)
project(Server)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(server source/server.cpp ../common/source/tinyxml2.cpp)






cmake_minimum_required(VERSION 3.10)
project(Client)

set(CMAKE_CXX_STANDARD 14)

include_directories(include ../common/include)
add_executable(client source/client.cpp ../common/source/tinyxml2.cpp)




cmake_minimum_required(VERSION 3.10)
project(SystemStatLoggingMicroservice)

add_subdirectory(server)
add_subdirectory(client)
