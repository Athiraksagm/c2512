athira@INTVMLT2342:/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/build$ ./test_server
[==========] Running 8 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 8 tests from ServerTest
[ RUN      ] ServerTest.LoadConfig
Logging interval set to: 10s
[       OK ] ServerTest.LoadConfig (15 ms)
[ RUN      ] ServerTest.GetBootCount
Logging interval set to: 10s
[       OK ] ServerTest.GetBootCount (5 ms)
[ RUN      ] ServerTest.GetUptime
Logging interval set to: 10s
[       OK ] ServerTest.GetUptime (3 ms)
[ RUN      ] ServerTest.RESTApiResponseFormat
Logging interval set to: 10s
[       OK ] ServerTest.RESTApiResponseFormat (5 ms)
[ RUN      ] ServerTest.WebSocketClientHandling
Logging interval set to: 10s
WebSocket Server running on port 9000
[       OK ] ServerTest.WebSocketClientHandling (1003 ms)
[ RUN      ] ServerTest.StartRESTServer
Logging interval set to: 10s
REST API Server running on port 8080
[       OK ] ServerTest.StartRESTServer (1012 ms)
[ RUN      ] ServerTest.StartWebSocketServer
Logging interval set to: 10s
WebSocket Server running on port 9001
[       OK ] ServerTest.StartWebSocketServer (1015 ms)
[ RUN      ] ServerTest.HandleWebSocketClient
Logging interval set to: 10s
WebSocket client error: Bad file descriptor
[       OK ] ServerTest.HandleWebSocketClient (47 ms)
[----------] 8 tests from ServerTest (3109 ms total)

[----------] Global test environment tear-down
[==========] 8 tests from 1 test suite ran. (3109 ms total)
[  PASSED  ] 8 tests.

void Server::sendPeriodicStats(bool test_mode) {
    json periodicStats;
    periodicStats["boot_count"] = boot_count.load();
    periodicStats["uptime"] = getUptime();

    std::lock_guard<std::mutex> lock(clients_mutex);
    for (auto &client : clients) {
        boost::system::error_code ec;
        client->write(net::buffer(periodicStats.dump()), ec);
    }

    if (!test_mode) {  // Prevent infinite loop in tests
        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
        sendPeriodicStats(false);
    }
}



TEST(ServerTest, SendPeriodicStats) {
    Server server;
    EXPECT_NO_THROW(server.sendPeriodicStats(true));  // Run once
}
