TEST(ServerTests, HandleClient) {
    io_context ioc;
    tcp::acceptor acceptor(ioc, tcp::endpoint(tcp::v4(), 8080));

    // Start a thread to accept a client connection and handle it
    std::thread server_thread([&]() {
        tcp::socket socket(ioc);
        acceptor.accept(socket);
        handleClient(std::move(socket));  // Testing the actual function
    });

    std::this_thread::sleep_for(std::chrono::seconds(1)); // Give the server time to start

    // Simulate a WebSocket client
    websocket::stream<tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto const results = resolver.resolve("127.0.0.1", "8080");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    // Send a request to the server and read the response
    ws.write(net::buffer(std::string("REQUEST_STATS")));
    flat_buffer buffer;
    ws.read(buffer);
    std::string received_message = buffers_to_string(buffer.data());

    // Verify the server response contains valid JSON with expected fields
    json response = json::parse(received_message);
    EXPECT_TRUE(response.contains("boot_count"));
    EXPECT_TRUE(response.contains("uptime"));
    EXPECT_GE(response["boot_count"].get<int>(), 0);
    EXPECT_GE(response["uptime"].get<long>(), 0);

    // Clean up
    ws.close(websocket::close_code::normal);
    server_thread.join();
}






void handleClient(ip::tcp::socket socket)
{
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        // Read initial client request
        ws->read(buffer, ec);
        if (ec) {
            if (ec == boost::beast::websocket::error::closed) {
                std::cout << "Client disconnected: WebSocket closed\n";
            } else if (ec == boost::asio::error::eof) {
                std::cout << "Client disconnected.\n";
            } else {
                std::cerr << "Error reading from client: " << ec.message() << "\n";
            }
            return;
        }

        std::string client_message = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (client_message == "REQUEST_STATS") {
            std::cout << "Request received from client. Sending current stats...\n";
            json first_stat;
            first_stat["boot_count"] = boot_count.load();
            first_stat["uptime"] = getUptime();
            ws->write(net::buffer(first_stat.dump()), ec);
        }

        // Add client to active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        // Continuous reading (for periodic updates)
        while (true) {
            buffer.consume(buffer.size());
            ws->read(buffer, ec);

            if (ec == websocket::error::closed) {
                std::cout << "Client disconnected: WebSocket closed\n";
                break;
            }

            if (ec) {
                std::cerr << "Error reading from WebSocket: " << ec.message() << "\n";
                break;
            }
        }

        // Remove client from active list safely
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }
    } catch (...) {
        std::cerr << "Client error.\n";
    }
}
