Dhaheen
STL(standard template library)

-it is collection of generic classes and functions in C++ that provides solutions to managing collections of objects, performing algorithms, and handling iterators.
-Classification:
1.Sequence containers:

-store elements in a linear order. They are optimized for sequential access.
-eg:
   I) Vector -Dynamic array that supports fast random access. 
   ii) Deque - Double-ended queue that supports fast insertion and deletion from both ends.
   iii) List - Doubly linked list that supports fast insertion and deletion at any position but slower random access.(using iterators)

2.Associative Containers:

- These maintain sorted order of elements and provide fast lookup based on keys using tree-based structures.
- eg:
    I)Set - Stores unique elements in sorted order.
    ii)Map- Stores key-value pairs with unique keys in sorted order.
    iii)Multiset - Allows duplicate elements.
    iv)Multimap - Allows duplicate keys in key-value pairs.

3. Unordered Containers:

These maintain elements in an unordered structure using hash tables.
-eg:
Unordered Set: Like a set but unsorted.
Unordered Map: Like a map but unsorted.
Unordered Multiset: Like a multiset but unsorted.
Unordered Multimap: Like a multimap but unsorted.

Interface

- Interface concept is implemented using abstract classes.
- An abstract class is a class that contains at least one pure virtual function (declared using = 0). 

#include <iostream>
using namespace std;

class Shape {
public:
    virtual void draw() = 0; // Pure virtual function
    virtual ~Shape() {}
};

class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing Circle" << endl;
    }
};

class Rectangle : public Shape {
public:
    void draw() override {
        cout << "Drawing Rectangle" << endl;
    }
};

int main() {
    Shape* shape1 = new Circle();
    Shape* shape2 = new Rectangle();

    shape1->draw();
    shape2->draw();

    delete shape1;
    delete shape2;
    return 0;
}
Points:
- Pure Virtual Function: Declared using = 0, it forces derived classes to provide - implementations, ensuring abstraction.
- Cannot Instantiate: Abstract classes cannot be instantiated directly.
- Polymorphism: Enables runtime binding via pointers or references to base classes.

