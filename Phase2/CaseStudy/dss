#include <iostream>
#include <vector>
#include <string>
#include "validation.h"

using namespace std;

struct Department {
    string department_name;
    string department_description;
    string department_head;
    string department_code;
    string doctor_code;
};

vector<Department> departments;

void createDepartment() {
    Department new_dept;
    new_dept.department_name = getValidatedString("Enter Department Name: ");
    new_dept.department_description = getValidatedString("Enter Department Description: ");
    new_dept.department_head = getValidatedString("Assign Head to Department: ");
    new_dept.department_code = "DPT" + to_string(departments.size() + 5001);
    new_dept.doctor_code = new_dept.department_head;

    departments.push_back(new_dept);
    cout << new_dept.department_name << " Department created successfully..\n";
    cout << "Head is " << new_dept.department_head << " and Department Number is " << new_dept.department_code << endl;
}

void editDepartment() {
    string dept_code = getValidatedString("Enter Department Code to Edit: ");
    bool found = false;
    for (auto& dept : departments) {
        if (dept.department_code == dept_code) {
            found = true;
            int edit_choice = getValidatedInteger("Enter Choice:\n[1] Edit Department Head\n[2] Edit Department Description\n[3] Edit Both\nChoice: ");
            if (edit_choice == 1) {
                dept.department_head = getValidatedString("Enter new Department Head: ");
                cout << "Department Head Updated successfully...\n";
            } else if (edit_choice == 2) {
                dept.department_description = getValidatedString("Enter new Department Description: ");
                cout << "Department Description updated successfully..\n";
            } else if (edit_choice == 3) {
                dept.department_head = getValidatedString("Enter new Department Head: ");
                dept.department_description = getValidatedString("Enter new Department Description: ");
                cout << "Department Head and Description Updated successfully...\n";
            } else {
                cout << "Invalid choice!\n";
            }
            break;
        }
    }

    if (!found) {
        cout << "Department Code not found.. Please verify the department number.. Thank You\n";
    }
}

void viewDepartment() {
    string dept_code = getValidatedString("Enter Department Code to View: ");
    bool found = false;
    for (const auto& dept : departments) {
        if (dept.department_code == dept_code) {
            found = true;
            cout << "\nDepartment Number: " << dept.department_code << "\n";
            cout << "Department Name: " << dept.department_name << "\n";
            cout << "Department Description: " << dept.department_description << "\n";
            cout << "Department Head: " << dept.department_head << "\n";
            cout << "Doctor Code: " << dept.doctor_code << "\n";
            break;
        }
    }
    if (!found) {
        cout << "Department Number not found. Please verify the Department Number.\n";
    }
}

void deleteDepartment() {
    string dept_code = getValidatedString("Enter Department Code to Delete: ");
    auto it = departments.begin();
    bool found = false;
    while (it != departments.end()) {
        if (it->department_code == dept_code) {
            found = true;
            cout << "Department " << it->department_name << " (" << it->department_code << ") Deleted successfully..\n";
            departments.erase(it);
            break;
        }
        ++it;
    }
    if (!found) {
        cout << "Department Number not found. Please verify the Department Number.\n";
    }
}

void adminApp() {
    while (true) {
        cout << "\nAdmin >> Department Management\n";
        cout << "[1] Create Department\n";
        cout << "[2] Edit Department\n";
        cout << "[4] View Department\n";
        cout << "[8] Delete Department\n";
        cout << "[99] Exit\n";
        int choice = getValidatedInteger("Choice: ");

        if (choice == 1) {
            createDepartment();
        } else if (choice == 2) {
            editDepartment();
        } else if (choice == 4) {
            viewDepartment();
        } else if (choice == 8) {
            deleteDepartment();
        } else if (choice == 99) {
            cout << "LogOut......\n";
            break;
        } else {
            cout << "Invalid choice!\n";
        }
    }
}

