#include <iostream>

// Abstract Product Interface
class Product {
public:
    virtual void display() const = 0; // Pure virtual function
    virtual ~Product() = default;    // Virtual destructor
};

// Concrete Product Implementation
class ConcreteProduct : public Product {
public:
    void display() const override {
        std::cout << "This is a ConcreteProduct." << std::endl;
    }
};

// Abstract Creator Interface
class InterfaceCreator {
public:
    virtual Product* createProduct() const = 0; // Pure virtual function
    virtual ~InterfaceCreator() = default;     // Virtual destructor
};

// Concrete Creator Implementation
class ConcreteCreator : public InterfaceCreator {
public:
    Product* createProduct() const override {
        // Create and return a new ConcreteProduct
        return new ConcreteProduct();
    }
};

// Main function to test the implementation
int main() {
    // Create an instance of the concrete creator
    InterfaceCreator* creator = new ConcreteCreator();

    // Use the creator to create a product
    Product* product = creator->createProduct();

    // Use the product
    product->display(); // Output: This is a ConcreteProduct.

    // Clean up memory
    delete product; // Delete the product object
    delete creator; // Delete the creator object

    return 0;
}
