#include <iostream>
#include <vector>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <cstring>
#include <cstdlib>
#include <string>

using namespace std;

// Define the message structure
struct Message {
    long messageType; // Message type (1 for data, 2 for response)
    double data[100]; // Array to hold double values
    int size;         // Size of the array
    double result;    // To send the sum back
};

class LabTest {
private:
    string TestId;
    double ResultValues;
public:
    LabTest(string id, double value) : TestId(id), ResultValues(value) {}
    double getResultValues() const { return ResultValues; }
};

// Client function
void client(int msgid) {
    vector<LabTest> tests;
    tests.emplace_back("T001", 10.15);
    tests.emplace_back("T002", 20.25);
    tests.emplace_back("T003", 30.35);
    tests.emplace_back("T004", 40.45);
    tests.emplace_back("T005", 50.55);

    Message message;
    message.messageType = 1; // Message type 1 for sending data
    message.size = tests.size();

    for (int i = 0; i < message.size; ++i) {
        message.data[i] = tests[i].getResultValues();
    }

    // Send the data to the server
    if (msgsnd(msgid, &message, sizeof(Message) - sizeof(long), 0) == -1) {
        perror("Client: msgsnd failed");
        exit(1);
    }

    cout << "Client sent Result Values: ";
    for (int i = 0; i < message.size; ++i) {
        cout << message.data[i] << " ";
    }
    cout << endl;

    // Receive the sum from the server
    if (msgrcv(msgid, &message, sizeof(Message) - sizeof(long), 2, 0) == -1) {
        perror("Client: msgrcv failed");
        exit(1);
    }

    cout << "Client received sum from server: " << message.result << endl;
}

// Server function
void server(int msgid) {
    Message message;
    if (msgrcv(msgid, &message, sizeof(Message) - sizeof(long), 1, 0) == -1) {
        perror("Server: msgrcv failed");
        exit(1);
    }

    cout << "Server received Result Values: ";
    double sum = 0;
    for (int i = 0; i < message.size; ++i) {
        cout << message.data[i] << " ";
        sum += message.data[i];
    }
    cout << endl;

    cout << "Server calculated sum: " << sum << endl;

    // Send the sum back to the client
    message.messageType = 2; // Message type 2 for sending response
    message.result = sum;
    if (msgsnd(msgid, &message, sizeof(Message) - sizeof(long), 0) == -1) {
        perror("Server: msgsnd failed");
        exit(1);
    }
}

int main() {
    key_t key = ftok("msgqueuefile", 65); // Generate a unique key
    if (key == -1) {
        perror("ftok failed");
        return 1;
    }

    int msgid = msgget(key, 0666 | IPC_CREAT); // Create a message queue
    if (msgid == -1) {
        perror("msgget failed");
        return 1;
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("Fork failed");
        return 1;
    }

    if (pid == 0) {
        // Child process: Client
        client(msgid);
        exit(0);
    } else {
        // Parent process: Server
        server(msgid);
        wait(nullptr); // Wait for the child process

        // Remove the message queue
        if (msgctl(msgid, IPC_RMID, nullptr) == -1) {
            perror("msgctl failed");
            return 1;
        }
    }

    return 0;
}

============================================



#include <iostream>
#include <vector>
#include <sys/msg.h>
#include <sys/wait.h>
#include <cstring>
#include <cstdlib>

#define MSG_KEY 1234

using namespace std;

// Define message structure
struct msgbuf_t {
    long mtype;             // Message type
    char mtext[1024];       // Message text
};

class LabTest {
private:
    string TestId;
    double ResultValues;

public:
    LabTest(string id, double value) : TestId(id), ResultValues(value) {}
    double getResultValues() const { return ResultValues; }
};

void client(int& msgid) {
    // Prepare test data
    vector<LabTest> tests = {
        LabTest("T001", 10.15),
        LabTest("T002", 20.25),
        LabTest("T003", 30.35),
        LabTest("T004", 40.45),
        LabTest("T005", 50.55)
    };

    int size = tests.size();
    double resultsArray[100];

    // Populate the results array
    for (int i = 0; i < size; ++i) {
        resultsArray[i] = tests[i].getResultValues();
    }

    // Send data to the server
    msgbuf_t message;
    message.mtype = 1;

    // Send size
    memcpy(message.mtext, &size, sizeof(size));
    if (msgsnd(msgid, &message, sizeof(size), 0) == -1) {
        perror("Client: Failed to send size");
        exit(1);
    }

    // Send data
    memcpy(message.mtext, resultsArray, sizeof(double) * size);
    if (msgsnd(msgid, &message, sizeof(double) * size, 0) == -1) {
        perror("Client: Failed to send data");
        exit(1);
    }

    // Wait for sum from server
    if (msgrcv(msgid, &message, sizeof(message.mtext), 2, 0) == -1) {
        perror("Client: Failed to receive sum");
        exit(1);
    }

    double sum;
    memcpy(&sum, message.mtext, sizeof(sum));
    cout << "Client received sum from server: " << sum << endl;
}

void server(int& msgid) {
    msgbuf_t message;

    // Receive size
    if (msgrcv(msgid, &message, sizeof(message.mtext), 1, 0) == -1) {
        perror("Server: Failed to receive size");
        exit(1);
    }

    int size;
    memcpy(&size, message.mtext, sizeof(size));

    // Receive data
    if (msgrcv(msgid, &message, sizeof(message.mtext), 1, 0) == -1) {
        perror("Server: Failed to receive data");
        exit(1);
    }

    double resultsArray[100];
    memcpy(resultsArray, message.mtext, sizeof(double) * size);

    cout << "Server received Result Values: ";
    double sum = 0;
    for (int i = 0; i < size; ++i) {
        cout << resultsArray[i] << " ";
        sum += resultsArray[i];
    }
    cout << endl;

    cout << "Server calculated sum: " << sum << endl;

    // Send sum back to the client
    message.mtype = 2;
    memcpy(message.mtext, &sum, sizeof(sum));
    if (msgsnd(msgid, &message, sizeof(sum), 0) == -1) {
        perror("Server: Failed to send sum");
        exit(1);
    }
}

int main() {
    int msgid = msgget(MSG_KEY, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("Failed to create message queue");
        return 1;
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("Fork failed");
        return 1;
    }

    if (pid == 0) {
        // Child process - Client
        client(msgid);
        exit(0);
    }

    // Parent process - Server
    server(msgid);
    wait(nullptr); // Wait for client process to finish

    // Cleanup message queue
    if (msgctl(msgid, IPC_RMID, nullptr) == -1) {
        perror("Failed to remove message queue");
    }

    return 0;
}
============

#include<iostream>
#include<vector>
#include<climits>
#include<string>
#include<thread>
#include<algorithm>
#include<unistd.h>
#include<cstring>
#include<sys/msg.h>
#include<sys/wait.h>
#define MSG_KEY 1234


using namespace std;

class Surgery {
private:
    string surgeryId;
    int Duration;

public:
    Surgery(string surgeryId, int Duration) : surgeryId(surgeryId), Duration(Duration) {}

    int getDuration() {
        return this->Duration;
    }
};

// Define the message buffer structure
struct msg_buffer {
    long msg_type;
    int size;
    int data[1000];
    int sum;
};

void findSum(int a[], int& sum, int& size ) {
    for (int i = 0; i < size; i++) {
        sum += a[i];
    }
}

void client(vector<Surgery>& vec, int msgid) {
    msg_buffer message;


    message.msg_type = 1;
    message.size = vec.size();
    msgsnd(msgid, &message, sizeof(message),0);
    cout << "client send size : "<< message.size <<endl;



    message.msg_type = 2;
    for (int i = 0; i < message.size; i++) {
        message.data[i] = vec[i].getDuration();
    }
    msgsnd(msgid, &message, sizeof(message.data), 0);
    cout << "Client Sent durations : ";
    for(int i = 0; i<message.size; i++){
                cout << " "<<message.data[i] << " ";
        }
        cout << endl;


    msgrcv(msgid, &message, sizeof(message), 3, 0);
     int sum = message.sum;

    cout << "Total sum in client side sent from server : " << sum << endl;
}

void server(int msgid) {

    msg_buffer message;

    msgrcv(msgid, &message,sizeof(message),1,0);
    cout << "server received size : "<< message.size <<endl;


    msgrcv(msgid, &message, sizeof(message.data), 2, 0);
        cout << "new array created in server : ";
    for(int i = 0; i<message.size; i++){
                cout << " "<<message.data[i] << " ";
        }
    cout <<endl;
    int sum = 0;
    findSum(message.data, sum, message.size);

    message.msg_type = 3;
    message.sum = sum;
    msgsnd(msgid, &message, sizeof(message), 0);
    cout << "Sum sent to client : " << message.sum << endl;
}

int main() {
    vector<Surgery> vec;
    vec.emplace_back("am1", 2);
    vec.emplace_back("am2", 5);
    vec.emplace_back("am3", 6);
    vec.emplace_back("am4", 3);
    vec.emplace_back("am5", 1);

    int msgid = msgget(MSG_KEY, 0666 | IPC_CREAT);

    pid_t pid = -1;
    {
        pid = fork();
        if (pid == 0) {
        client(vec, msgid);
        return 0;
        }
    }
    {
        pid = fork();
        if (pid == 0) {
        server(msgid);
        return 0;
        }
    }

    wait(nullptr);

    msgctl(msgid, IPC_RMID, nullptr);

    return 0;
}
