2. STRUCTURAL PATTERN


FACADE

- Provides a simplified interface to a library, a framework, or any other complex set of classes.
- A facade is a class that provides a simple interface to a complex subsystem which contains lots of moving parts. A facade might provide limited functionality in comparison to working with the subsystem directly. However, it includes only those features that clients really care about.

The Facade provides convenient access to a particular part of the subsystem’s functionality. It knows where to direct the client’s request and how to operate all the moving parts.

An Additional Facade class can be created to prevent polluting a single facade with unrelated features that might make it yet another complex structure. Additional facades can be used by both clients and other facades.

The Complex Subsystem consists of dozens of various objects. To make them all do something meaningful, you have to dive deep into the subsystem’s implementation details, such as initializing objects in the correct order and supplying them with data in the proper format.

Subsystem classes aren’t aware of the facade’s existence. They operate within the system and work with each other directly.

The Client uses the facade instead of calling the subsystem objects directly.

How to Implement
Check whether it’s possible to provide a simpler interface than what an existing subsystem already provides. You’re on the right track if this interface makes the client code independent from many of the subsystem’s classes.

Declare and implement this interface in a new facade class. The facade should redirect the calls from the client code to appropriate objects of the subsystem. The facade should be responsible for initializing the subsystem and managing its further life cycle unless the client code already does this.

To get the full benefit from the pattern, make all the client code communicate with the subsystem only via the facade. Now the client code is protected from any changes in the subsystem code. For example, when a subsystem gets upgraded to a new version, you will only need to modify the code in the facade.

If the facade becomes too big, consider extracting part of its behavior to a new, refined facade class.






Facade Pattern
Definition:
The Facade Pattern is a structural design pattern that provides a simplified interface to a complex subsystem. Instead of exposing all the classes, methods, or functionalities of the subsystem, the Facade Pattern defines a higher-level interface that makes the subsystem easier to use.

Key Features:
It hides the complexities of a subsystem and provides a unified interface to clients.
It does not add new functionality to the system; it simply organizes and simplifies access to existing functionality.
It promotes loose coupling between the client and the subsystem.
Components:
Facade: The simplified interface that interacts with the subsystem on behalf of the client.
Subsystems: The classes or modules that contain the actual business logic or functionality.
Client: The consumer of the simplified interface provided by the Facade.
Real-World Analogy:
Imagine using a universal remote control to operate a TV, DVD player, and sound system. Instead of controlling each device individually, the remote provides a single interface (e.g., "Watch Movie") that internally interacts with the TV, DVD player, and sound system.

Example: Home Theater System
In a home theater system, there are multiple components such as the DVD player, projector, amplifier, and lights. Instead of controlling each device individually, a Facade provides a single method like watchMovie().

java
Copy
Edit
// Subsystems
class DVDPlayer {
    public void on() {
        System.out.println("DVD Player is ON");
    }

    public void play(String movie) {
        System.out.println("Playing movie: " + movie);
    }

    public void off() {
        System.out.println("DVD Player is OFF");
    }
}

class Projector {
    public void on() {
        System.out.println("Projector is ON");
    }

    public void setInput(String input) {
        System.out.println("Projector input set to: " + input);
    }

    public void off() {
        System.out.println("Projector is OFF");
    }
}

class Amplifier {
    public void on() {
        System.out.println("Amplifier is ON");
    }

    public void setVolume(int level) {
        System.out.println("Amplifier volume set to: " + level);
    }

    public void off() {
        System.out.println("Amplifier is OFF");
    }
}

class Lights {
    public void dim() {
        System.out.println("Lights are dimmed");
    }

    public void brighten() {
        System.out.println("Lights are brightened");
    }
}

// Facade
class HomeTheaterFacade {
    private DVDPlayer dvdPlayer;
    private Projector projector;
    private Amplifier amplifier;
    private Lights lights;

    public HomeTheaterFacade(DVDPlayer dvdPlayer, Projector projector, Amplifier amplifier, Lights lights) {
        this.dvdPlayer = dvdPlayer;
        this.projector = projector;
        this.amplifier = amplifier;
        this.lights = lights;
    }

    public void watchMovie(String movie) {
        System.out.println("Setting up to watch a movie...");
        lights.dim();
        projector.on();
        projector.setInput("DVD");
        amplifier.on();
        amplifier.setVolume(10);
        dvdPlayer.on();
        dvdPlayer.play(movie);
    }

    public void endMovie() {
        System.out.println("Shutting down movie experience...");
        dvdPlayer.off();
        projector.off();
        amplifier.off();
        lights.brighten();
    }
}

// Client
public class FacadeExample {
    public static void main(String[] args) {
        DVDPlayer dvdPlayer = new DVDPlayer();
        Projector projector = new Projector();
        Amplifier amplifier = new Amplifier();
        Lights lights = new Lights();

        HomeTheaterFacade homeTheater = new HomeTheaterFacade(dvdPlayer, projector, amplifier, lights);

        homeTheater.watchMovie("Inception");
        homeTheater.endMovie();
    }
}
Output:
vbnet
Copy
Edit
Setting up to watch a movie...
Lights are dimmed
Projector is ON
Projector input set to: DVD
Amplifier is ON
Amplifier volume set to: 10
DVD Player is ON
Playing movie: Inception
Shutting down movie experience...
DVD Player is OFF
Projector is OFF
Amplifier is OFF
Lights are brightened
Advantages:
Simplifies the Interface:
Clients interact with a single simplified interface instead of dealing with the complexity of multiple subsystems.
Loose Coupling:
Clients are decoupled from subsystem implementations.
Improved Readability and Maintenance:
Simplifies code management by centralizing control in the Facade.
Disadvantages:
Reduced Flexibility:
The facade might not expose all functionalities of the subsystem, which can limit advanced usage.
Potential Overhead:
Adding a Facade can introduce an additional layer of abstraction, which may not always be necessary.
When to Use:
When working with a complex subsystem and you want to simplify its usage for clients.
When you want to reduce tight coupling between clients and subsystem classes.
When you want to provide a specific subset of subsystem functionality to clients.
Real-World Examples:
Spring Framework:
The JdbcTemplate class provides a simplified interface for interacting with databases, hiding the complexity of JDBC API.
Logging Frameworks:
Frameworks like SLF4J act as facades for various logging libraries, allowing developers to switch logging implementations without changing code.
