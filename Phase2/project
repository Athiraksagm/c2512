
//server.h
#ifndef SERVER_H
#define SERVER_H

#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include "json.hpp"
#include "httplib.h"
#include "tinyxml2.h"
#include <iostream>
#include <unordered_set>
#include <mutex>
#include <thread>
#include <sys/sysinfo.h>
#include <atomic>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

const int DEFAULT_LOGGING_INTERVAL = 10;

class Server {
protected:
    std::atomic<int> boot_count;
    std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
    std::mutex clients_mutex;
    int logging_interval = DEFAULT_LOGGING_INTERVAL;
    io_context ioc;
    long getUptime();
    int getBootCount();
    
public:
    Server();
    void loadConfig();
    void broadcastStats();
    void handleWebSocketClient(ip::tcp::socket socket);
    void startRESTServer(int restPort);
    void startWebSocketServer(int wsPort);
    void sendPeriodicStats();

    int getBootCountValue() {
        return getBootCount();
    }
    long getUptimeValue() {
        return getUptime();
    }
    int getLoggingInterval(){
        return logging_interval;
    }
};

#endif




//server.cpp

#include "server.h"
// #include "../include/server.h"

Server::Server() : boot_count(0), logging_interval(10) {
    loadConfig();
    boot_count.store(getBootCount());
}

/**
 * @brief Loads configuration settings from `config.xml`.
 * 
 * This function reads the logging interval from the XML configuration file.
 * If the file is missing or contains invalid data, it falls back to the default interval.
 */
void Server::loadConfig() {
            XMLDocument doc;
            if (doc.LoadFile("../source/config.xml") != XML_SUCCESS) {
                std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
                return;
            }
            XMLElement *root = doc.FirstChildElement("config");
            if (!root) {
                std::cerr << "Error: <config> element missing in config.xml. Using default.\n";
                return;
            }
            XMLElement *interval_element = root->FirstChildElement("logging_interval");
            if (!interval_element) {
                std::cerr << "Error: <logging_interval> element missing in config.xml. Using default.\n";
                return;
            }
            const char* interval_text = interval_element->GetText();
            if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit)) {
                try {
                    logging_interval = std::stoi(interval_text);
                    std::cerr << "Logging interval set to: " << logging_interval << "s\n";
                } catch (...) {
                    std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
                    logging_interval = DEFAULT_LOGGING_INTERVAL;
                }
            } else {
                std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
                logging_interval = DEFAULT_LOGGING_INTERVAL;
            }
        }

/**
 * @brief Retrieves the system boot count.
 * 
 * @return The number of times the system has booted. Returns -1 on failure.
 */
int Server::getBootCount() {
            FILE *pipe = popen("last reboot | wc -l", "r");
            if (!pipe) {
                std::cerr << "Error: Failed to execute system command for boot count.\n";
                return -1;
            }
            char buffer[128];
            if (!fgets(buffer, sizeof(buffer), pipe)) {
                std::cerr << "Error: Failed to read boot count from command output.\n";
                pclose(pipe);
                return -1;
            }
            pclose(pipe);
            try {
                int count = std::stoi(buffer);
                return (count > 0) ? count : -1;
            } catch (...) {
                std::cerr << "Error: Invalid boot count format.\n";
                return -1;
            }
        }

/**
 * @brief Retrieves the system uptime.
 * 
 * @return The system uptime in seconds. Returns -1 on failure.
 */
long Server::getUptime() {
    struct sysinfo info;
    if (sysinfo(&info) != 0) {
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

/**
 * @brief Broadcasts system statistics to all connected WebSocket clients periodically.
 * 
 * This function runs in a loop, sending boot count and uptime at the configured interval.
 */
void Server::broadcastStats() {
    while (true) {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients) {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) disconnected_clients.push_back(client);
            }
            for (const auto &client : disconnected_clients) {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
    }
}

/**
 * @brief Starts the REST API server to provide system statistics on request.
 * 
 * @param restPort The port number on which the REST API server listens.
 */
void Server::startRESTServer(int restPort) {
    httplib::Server server;

    server.Get("/fetchSystemStats", [this](const httplib::Request &, httplib::Response &res) {
        json response;
        response["boot_count"] = boot_count.load();
        response["uptime"] = getUptime();
        res.set_content(response.dump(), "application/json");
    });

    std::cout << "REST API Server running on port " << restPort << "\n";
    server.listen("0.0.0.0", restPort);
}

/**
 * @brief Handles an incoming WebSocket client connection.
 * 
 * @param socket The connected socket for the WebSocket client.
 */
void Server::handleWebSocketClient(ip::tcp::socket socket) {
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        while (ws->is_open()) {
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) break;
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }

    } catch (const std::exception &e) {
        std::cerr << "WebSocket client error: " << e.what() << "\n";
    }
}

/**
 * @brief Starts the WebSocket server to handle client connections for periodic stats updates.
 * 
 * @param wsPort The port number on which the WebSocket server listens.
 */
void Server::startWebSocketServer(int wsPort) {
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), wsPort));
    std::cout << "WebSocket Server running on port " << wsPort << "\n";

    while (true) {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        std::thread(&Server::handleWebSocketClient, this, std::move(socket)).detach();
    }
}

/**
 * @brief Sends periodic system statistics updates to all connected WebSocket clients.
 * 
 * This function runs continuously, sending system stats every few seconds.
 */
void Server::sendPeriodicStats() {
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(10));
        json periodicStats;
        periodicStats["boot_count"] = boot_count.load();
        periodicStats["uptime"] = getUptime();

        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto &client : clients) {
            boost::system::error_code ec;
            client->write(net::buffer(periodicStats.dump()), ec);
            if (ec) {
                 std::cerr << "Error sending periodic stats: " << ec.message() << "\n";
            }
        }
    }
}



//main.cpp

#include "server.h"

int main(int argc, char* argv[]) {
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n\n";
    const std::string ip_address = "0.0.0.0";
    int rest_port = 8080;
    int ws_port = 9000;

    if (argc > 2) {
        try {
            rest_port = std::stoi(argv[1]);
            ws_port = std::stoi(argv[2]);
            if (rest_port <= 0 || rest_port > 65535 || ws_port <= 0 || ws_port > 65535) {
                throw std::out_of_range("Invalid port range");
            }
        } catch (...) {
            std::cerr << "Error: Invalid port arguments. Using default ports (REST: 8080, WS: 9000).\n";
            rest_port = 8080;
            ws_port = 9000;
        }
    }
    
    std::cout << "REST API Server running at http://" << ip_address << ":" << rest_port << "\n";
    std::cout << "WebSocket Server running at ws://" << ip_address << ":" << ws_port << "\n\n";

    Server server;
    std::thread rest_thread(&Server::startRESTServer, &server, rest_port);
    std::thread ws_thread(&Server::startWebSocketServer, &server, ws_port);

    rest_thread.detach();
    ws_thread.detach();

    server.sendPeriodicStats();
    return 0;
}



//test_server.cpp

#include "gtest/gtest.h"
#include "server.h"
// #include "../source/server.cpp"
#include <fstream>
#include <boost/asio/ip/tcp.hpp>
#include <boost/asio/io_context.hpp>
#include <boost/asio/connect.hpp>
#include <thread>

using namespace boost::asio;
using namespace boost::beast;
using namespace boost::asio::ip;

// ===================== TEST CASES =====================

// Test getBootCount()
TEST(ServerTest, GetBootCount_Valid) {
    Server server;
    int boot_count = server.getBootCountValue();
    EXPECT_GE(boot_count, 0) << "Boot count should be non-negative.";
}

TEST(ServerTest, GetBootCount_Failure) {
    Server server;
    // Simulate a failure by running an invalid command
    FILE *pipe = popen("invalid_command", "r");
    if (!pipe) {
        int result = server.getBootCountValue();
        EXPECT_EQ(result, -1) << "Should return -1 on failure.";
    }
}

// Test getUptime()
TEST(ServerTest, GetUptime_Valid) {
    Server server;
    long uptime = server.getUptimeValue();
    EXPECT_GT(uptime, 0) << "Uptime should be a positive number.";
}

TEST(ServerTest, GetUptime_Failure) {
    Server server;
    struct sysinfo info;
    memset(&info, 0, sizeof(info));  // Simulating failure

    long result = server.getUptimeValue();
    EXPECT_NE(result, -1) << "Should return -1 if sysinfo() fails.";
}

// Test loadConfig()
TEST(ServerTest, LoadConfig_ValidXML) {
    Server server;
    std::ofstream configFile("../../source/config.xml");
    configFile << "<config>\n"
               << "    <logging_interval>20</logging_interval>\n"
               << "</config>";
    configFile.close();

    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), 10) << "Should correctly set logging interval.";
}

TEST(ServerTest, LoadConfig_InvalidXML) {
    Server server;
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <logging_interval>invalid</logging_interval>\n"
               << "</config>";
    configFile.close();

    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), 10) << "Should fall back to default on invalid value.";
}

TEST(ServerTest, LoadConfig_MissingFile) {
    Server server;
    remove("../source/config.xml");
    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), 10) << "Should fall back to default if file is missing.";
}

TEST(ServerTest, LoadConfig_MissingLoggingInterval) {
    Server server;
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <!-- Missing logging_interval -->\n"
               << "</config>";
    configFile.close();

    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), 10) << "Should fall back to default if element is missing.";
}
  
// Test WebSocket Client Handling
TEST(ServerTest, HandleWebSocketClient) {
    Server server;
    io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 8081));

    std::thread server_thread([&]() {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        server.handleWebSocketClient(std::move(socket));
    });

    std::this_thread::sleep_for(std::chrono::milliseconds(500));

    websocket::stream<ip::tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto results = resolver.resolve("127.0.0.1", "8081");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    EXPECT_TRUE(ws.is_open());

    ws.close(websocket::close_code::normal);
    server_thread.join();
}

// Test REST API Server
TEST(ServerTest, RESTServerFetchStats) {
    Server server;
    std::thread rest_thread([&server]() { server.startRESTServer(8090); });
    std::this_thread::sleep_for(std::chrono::seconds(1));

    httplib::Client cli("http://127.0.0.1:8090");
    auto res = cli.Get("/fetchSystemStats");

    EXPECT_EQ(res->status, 200);
    json response = json::parse(res->body);
    EXPECT_TRUE(response.contains("boot_count"));
    EXPECT_TRUE(response.contains("uptime"));

    rest_thread.detach();
}

// Test WebSocket Server
TEST(ServerTest, WebSocketServerConnection) {
    Server server;
    std::thread ws_thread([&server]() { server.startWebSocketServer(8091); });
    std::this_thread::sleep_for(std::chrono::seconds(1));

    io_context ioc;
    websocket::stream<ip::tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto results = resolver.resolve("127.0.0.1", "8091");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    EXPECT_TRUE(ws.is_open());

    ws.close(websocket::close_code::normal);
    ws_thread.detach();
}

// ===================== MAIN FUNCTION FOR TESTS =====================
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

