#include "httplib.h"
#include "json.hpp"
#include <iostream>
#include <thread>
#include <chrono>
#include <atomic>
#include <fstream>
#include <sys/sysinfo.h>
#include <unistd.h>

using json = nlohmann::json;

// Global variables
std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);

// Function to read boot count from a file, creating it if it doesn't exist
int loadBootCount() {
    std::ifstream file("boot_count.txt");
    int count = 0;
    
    if (file.is_open()) {
        file >> count;
    } else {
        // Create the file if it doesn't exist
        std::ofstream newFile("boot_count.txt");
        if (newFile.is_open()) {
            newFile << 0;
            newFile.close();
        }
    }

    file.close();
    return count;
}

// Function to save boot count to a file
void saveBootCount(int count) {
    std::ofstream file("boot_count.txt");
    if (file.is_open()) {
        file << count;
    }
    file.close();
}

// Function to update uptime
void updateUptime() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        total_uptime.store(info.uptime);  // Update uptime (in seconds)
    }
}

// Server handler to send stats to the client
void handleClientRequest(const httplib::Request &req, httplib::Response &res) {
    updateUptime();  // Update uptime before responding

    json response_json;
    response_json["boot_count"] = boot_count.load();  // Fix: Consistent key
    response_json["uptime"] = total_uptime.load();

    res.set_header("Cache-Control", "no-store");
    res.set_content(response_json.dump(), "application/json");
}

int main() {
    // Load boot count once at startup
    int stored_boot_count = loadBootCount();
    boot_count.store(stored_boot_count + 1);  // Increment the boot count
    saveBootCount(boot_count.load());  // Save the updated boot count

    std::cout << "Boot Count: " << boot_count.load() << std::endl;

    std::cout << "Server running at http://localhost:8080...\n";

    httplib::Server server;
    server.Get("/stats", handleClientRequest);

    server.listen("localhost", 8080);
    return 0;
}




#include <iostream>
#include <httplib.h>
#include <json.hpp>
#include <thread>
#include <chrono>

using json = nlohmann::json;

// Function to request stats from the server periodically
void requestStats() {
    httplib::Client client("http://localhost:8080");

    while (true) {
        auto res = client.Get("/stats");

        if (res && res->status == 200) {
            json stats = json::parse(res->body);

            std::cout << "Received stats:\n";
            std::cout << "Boot Count: " << stats["boot_count"] << "\n";  // Fix: Correct key
            std::cout << "Uptime: " << stats["uptime"] << " seconds\n";
        } else {
            std::cerr << "Failed to get stats from server.\n";
        }

        std::this_thread::sleep_for(std::chrono::seconds(10));
    }
}

int main() {
    std::cout << "Client is requesting stats from server...\n";
    requestStats();
    return 0;
}