#include "gtest/gtest.h"
#include "server.h"
#include <fstream>
#include <boost/asio.hpp>
#include <thread>

using namespace boost::asio;
using namespace boost::beast;
using namespace boost::asio::ip;

// Path to config file (use absolute or project-relative path if necessary)
const std::string TEST_CONFIG_FILE = CONFIG_FILE_PATH;

// ========================== TEST SUITE ========================== //

// **Test Boot Count Retrieval**
TEST(ServerTest, GetBootCount_Valid) {
    Server server;
    int boot_count = server.getBootCountValue();
    EXPECT_GE(boot_count, 0) << "Boot count should be non-negative.";
}

// **Test Uptime Retrieval**
TEST(ServerTest, GetUptime_Valid) {
    Server server;
    long uptime = server.getUptimeValue();
    EXPECT_GT(uptime, 0) << "Uptime should be greater than zero.";
}

// **Test Configuration Loading - Valid XML**
TEST(ServerTest, LoadConfig_ValidXML) {
    // Create a valid test configuration
    std::ofstream configFile(TEST_CONFIG_FILE);
    configFile << "<config>\n"
               << "    <logging_interval>10</logging_interval>\n"
               << "</config>";
    configFile.close();

    Server server;
    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), 10) << "Should correctly load logging interval.";
}

// **Test Configuration Loading - Invalid XML**
TEST(ServerTest, LoadConfig_InvalidXML) {
    // Create an invalid config file
    std::ofstream configFile(TEST_CONFIG_FILE);
    configFile << "<config>\n"
               << "    <logging_interval>invalid_value</logging_interval>\n"
               << "</config>";
    configFile.close();

    Server server;
    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), DEFAULT_LOGGING_INTERVAL) << "Should fall back to default on invalid value.";
}

// **Test Configuration Loading - Missing File**
// TEST(ServerTest, LoadConfig_MissingFile) {
//     std::ifstream originalConfig(CONFIG_FILE_PATH);
//     std::string backupConfig;
    
//     if (originalConfig) {
//         backupConfig.assign((std::istreambuf_iterator<char>(originalConfig)),
//                             std::istreambuf_iterator<char>());
//         originalConfig.close();
//     }

//     remove(TEST_CONFIG_FILE.c_str());  // Delete config file for the test
    
//     Server server;
//     server.loadConfig();
//     EXPECT_EQ(server.getLoggingInterval(), DEFAULT_LOGGING_INTERVAL);

//     // Restore original config after test
//     if (!backupConfig.empty()) {
//         std::ofstream restoreConfig(CONFIG_FILE_PATH);
//         restoreConfig << backupConfig;
//         restoreConfig.close();
//     }
// }

// **Test WebSocket Server - Accepts Connection**
TEST(ServerTest, WebSocketServerConnection) {
    Server server;
    std::thread ws_thread([&server]() { server.startWebSocketServer(9091); });
    std::this_thread::sleep_for(std::chrono::seconds(1));

    io_context ioc;
    websocket::stream<ip::tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto results = resolver.resolve("127.0.0.1", "9091");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    EXPECT_TRUE(ws.is_open()) << "WebSocket connection should be open.";

    ws.close(websocket::close_code::normal);
    ws_thread.detach();
}

// **Test REST API Server - Fetch Stats**
TEST(ServerTest, RESTServerFetchStats) {
    Server server;
    std::thread rest_thread([&server]() { server.startRESTServer(9090); });
    std::this_thread::sleep_for(std::chrono::seconds(1));

    httplib::Client cli("http://127.0.0.1:9090");
    auto res = cli.Get("/fetchSystemStats");

    ASSERT_NE(res, nullptr);
    EXPECT_EQ(res->status, 200);

    json response = json::parse(res->body);
    EXPECT_TRUE(response.contains("boot_count"));
    EXPECT_TRUE(response.contains("uptime"));

    rest_thread.detach();
}

// **Test WebSocket Client Handling**
TEST(ServerTest, HandleWebSocketClient) {
    Server server;
    io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 8082));

    std::thread server_thread([&]() {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        server.handleWebSocketClient(std::move(socket));
    });

    std::this_thread::sleep_for(std::chrono::milliseconds(500));

    websocket::stream<ip::tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto results = resolver.resolve("127.0.0.1", "8082");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    EXPECT_TRUE(ws.is_open());

    ws.close(websocket::close_code::normal);
    server_thread.join();
}

// **Main Function for Running Tests**
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}




athira@INTVMLT2342:/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/build$ ./test_server
[==========] Running 7 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 7 tests from ServerTest
[ RUN      ] ServerTest.GetBootCount_Valid
Logging interval set to: 10s
[       OK ] ServerTest.GetBootCount_Valid (6 ms)
[ RUN      ] ServerTest.GetUptime_Valid
Logging interval set to: 10s
[       OK ] ServerTest.GetUptime_Valid (4 ms)
[ RUN      ] ServerTest.LoadConfig_ValidXML
Logging interval set to: 10s
Logging interval set to: 10s
[       OK ] ServerTest.LoadConfig_ValidXML (11 ms)
[ RUN      ] ServerTest.LoadConfig_InvalidXML
Error: Invalid logging interval in config.xml. Using default.
Error: Invalid logging interval in config.xml. Using default.
[       OK ] ServerTest.LoadConfig_InvalidXML (10 ms)
[ RUN      ] ServerTest.WebSocketServerConnection
Error: Invalid logging interval in config.xml. Using default.
WebSocket Server running on port 9091
[       OK ] ServerTest.WebSocketServerConnection (1030 ms)
[ RUN      ] ServerTest.RESTServerFetchStats
Error: Invalid logging interval in config.xml. Using default.
REST API Server running on port 9090
[       OK ] ServerTest.RESTServerFetchStats (1008 ms)
[ RUN      ] ServerTest.HandleWebSocketClient
Error: Invalid logging interval in config.xml. Using default.
[       OK ] ServerTest.HandleWebSocketClient (519 ms)
[----------] 7 tests from ServerTest (2591 ms total)

[----------] Global test environment tear-down
[==========] 7 tests from 1 test suite ran. (2591 ms total)
[  PASSED  ] 7 tests.
