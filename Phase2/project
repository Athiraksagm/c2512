#include "uwebsockets/App.h"
#include "json.hpp"
#include "tinyxml2.h"
#include <iostream>
#include <fstream>
#include <atomic>
#include <sys/sysinfo.h>
#include <unistd.h>
#include <array>
#include <memory>
#include <thread>
#include <vector>

using json = nlohmann::json;
using namespace tinyxml2;

std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);
int logging_interval = 10;  // Default interval in seconds

// Load interval from XML config
void loadConfig() {
    XMLDocument doc;
    if (doc.LoadFile("../config.xml") == XML_SUCCESS) {
        XMLElement *root = doc.FirstChildElement("config");
        if (root) {
            XMLElement *intervalElement = root->FirstChildElement("logging_interval");
            if (intervalElement) {
                logging_interval = std::stoi(intervalElement->GetText());
                std::cout << "Logging interval set to: " << logging_interval << " seconds\n";
            }
        }
    } else {
        std::cerr << "Error: Failed to load config.xml. Using default interval.\n";
    }
}

// Get boot count from `last reboot`
int getBootCount() {
    std::array<char, 128> buffer;
    std::string result;
    std::shared_ptr<FILE> pipe(popen("last reboot | wc -l", "r"), pclose);
    if (!pipe) {
        std::cerr << "Failed to run command.\n";
        return -1;
    }

    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }

    return std::stoi(result);
}

// Update system uptime
void updateUptime() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        total_uptime.store(info.uptime);
    }
}

// WebSocket Server
int main() {
    loadConfig();
    boot_count.store(getBootCount());

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER (WebSocket)\n"
              << "=============================\n";
    std::cout << "Boot Count: " << boot_count.load() << "\n";
    std::cout << "WebSocket server running on ws://localhost:9001\n";

    std::vector<uWS::WebSocket<false, true> *> clients;

    std::thread([&]() {
        while (true) {
            updateUptime();
            json response_json;
            response_json["boot_count"] = boot_count.load();
            response_json["uptime"] = total_uptime.load();
            std::string message = response_json.dump();

            std::cout << "[DEBUG] Sending JSON: " << message << std::endl;

            for (auto *ws : clients) {
                ws->send(message, uWS::OpCode::TEXT);
            }

            std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
        }
    }).detach();

    uWS::App().ws<nullptr>("/stats", {
        .open = [&clients](auto *ws) {
            clients.push_back(ws);
            std::cout << "Client connected. Total clients: " << clients.size() << "\n";
        },
        .close = [&clients](auto *ws, int /*code*/, std::string_view /*message*/) {
            clients.erase(std::remove(clients.begin(), clients.end(), ws), clients.end());
            std::cout << "Client disconnected. Remaining clients: " << clients.size() << "\n";
        }
    }).listen(9001, [](auto *token) {
        if (token) {
            std::cout << "WebSocket server started on ws://localhost:9001\n";
        } else {
            std::cerr << "Failed to start WebSocket server\n";
        }
    }).run();

    return 0;
}






#include "uwebsockets/App.h"
#include "json.hpp"
#include <iostream>
#include <fstream>
#include <ctime>

using json = nlohmann::json;
bool enable_csv_logging = false;

// Save statistics to CSV file
void saveStatsToCSV(int boot_count, long uptime) {
    std::ofstream file("../system_stats.csv", std::ios_base::app);
    if (file.is_open()) {
        std::time_t now = std::time(nullptr);
        std::tm *local_time = std::localtime(&now);

        file << 1900 + local_time->tm_year << "-"
             << 1 + local_time->tm_mon << "-"
             << local_time->tm_mday << ", "
             << local_time->tm_hour << ":"
             << local_time->tm_min << ":"
             << local_time->tm_sec << ", "
             << boot_count << ", "
             << uptime << "\n";
    } else {
        std::cerr << "Error opening CSV file!\n";
    }
}

int main(int argc, char *argv[]) {
    if (argc > 1 && std::string(argv[1]) == "--enable-csv") {
        enable_csv_logging = true;
    }

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING CLIENT (WebSocket)\n"
              << "=============================\n";
    std::cout << "Connecting to WebSocket server...\n";

    if (enable_csv_logging) {
        std::ifstream checkFile("../system_stats.csv");
        if (!checkFile.is_open()) {
            std::ofstream file("../system_stats.csv");
            if (file.is_open()) {
                file << "Date (YYYY-MM-DD), Time (HH:MM:SS), Boot Count, Uptime (seconds)\n";
                file.close();
            }
        }
        checkFile.close();
    }

    uWS::App().ws<nullptr>("/stats", {
        .open = [](auto *ws) {
            std::cout << "Connected to WebSocket server!\n";
        },
        .message = [](auto *ws, std::string_view message, uWS::OpCode opCode) {
            try {
                json stats = json::parse(message);
                std::cout << "Received stats:\n";
                std::cout << "Boot Count: " << stats["boot_count"] << "\n";
                std::cout << "Uptime: " << stats["uptime"] << " seconds\n";

                if (enable_csv_logging) {
                    saveStatsToCSV(stats["boot_count"], stats["uptime"]);
                }
            } catch (const json::parse_error &e) {
                std::cerr << "JSON Parse Error: " << e.what() << "\n";
            }
        },
        .close = [](auto *ws, int /*code*/, std::string_view /*message*/) {
            std::cout << "Disconnected from WebSocket server\n";
        }
    }).connect("ws://localhost:9001/stats", nullptr).run();

    return 0;
}