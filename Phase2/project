#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include "json.hpp"
#include "tinyxml2.h"
#include <iostream>
#include <unordered_set>
#include <mutex>
#include <thread>
#include <sys/sysinfo.h>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

int boot_count = 0;
std::unordered_set<std::weak_ptr<websocket::stream<ip::tcp::socket>>, std::owner_less<std::weak_ptr<websocket::stream<ip::tcp::socket>> >> clients;
std::mutex clients_mutex;
int logging_interval = 10; // Default interval

// Get boot count
int getBootCount() 
{
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) return -1;
    char buffer[128];
    fgets(buffer, sizeof(buffer), pipe);
    pclose(pipe);
    return std::stoi(buffer);
}

// Get system uptime
long getUptime() 
{
    struct sysinfo info;
    sysinfo(&info);
    return info.uptime;
}

// Load logging interval from config.xml
void loadConfig() 
{
    XMLDocument doc;
    if (doc.LoadFile("../config.xml") == XML_SUCCESS) 
    {
        XMLElement *root = doc.FirstChildElement("config");
        if (root) 
        {
            XMLElement *intervalElement = root->FirstChildElement("logging_interval");
            if (intervalElement) 
            {
                logging_interval = std::stoi(intervalElement->GetText());
            }
        }
    }
}

// Send stats to all clients
void broadcastStats() 
{
    while (true) {
        json stats;
        stats["boot_count"] = boot_count;
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto it = clients.begin(); it != clients.end(); ) 
        {
            if (auto client = it->lock()) 
            {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) 
                {
                    std::cerr << "Failed to send stats: " << ec.message() << "\n";
                }
                ++it;
            } 
            else 
            {
                it = clients.erase(it); // Remove disconnected clients
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
    }
}

// Handle individual client connection
void handleClient(ip::tcp::socket socket) 
{
    auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
    ws->accept();

    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        clients.insert(ws);
    }

    // Read client's first message
    boost::beast::flat_buffer buffer;
    boost::system::error_code ec;
    ws->read(buffer, ec);

    if (!ec) {
        std::string request = boost::beast::buffers_to_string(buffer.data());

        // If the client requests stats, send them immediately
        if (request == "request_stats") 
        {
            json firstStat;
            firstStat["boot_count"] = boot_count;
            firstStat["uptime"] = getUptime();
            ws->write(net::buffer(firstStat.dump()));  
            std::cout << "[Client Connected] Sent initial stats: " << firstStat.dump() << "\n";
        }
    }

    // Wait for disconnection
    while (!ec) {
        ws->read(buffer, ec);
    }

    std::lock_guard<std::mutex> lock(clients_mutex);
    clients.erase(ws);
}

int main() 
{
    loadConfig();
    boot_count = getBootCount();
    
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n";

    io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 8080));

    std::cout << "Server running at http://localhost:8080...\n";
    std::cout << "Waiting for client requests...\n";

    std::thread logger(broadcastStats);
    logger.detach();

    while (true) {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        std::thread(handleClient, std::move(socket)).detach();
    }

    return 0;
}