#include "httplib.h"
#include "json.hpp"
#include <iostream>
#include <fstream>
#include <atomic>
#include <sys/sysinfo.h>
#include <unistd.h>
#include <cstdlib>

using json = nlohmann::json;

std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);

// Function to get the system boot time
long getSystemBootTime() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        return time(nullptr) - info.uptime;
    }
    return 0;
}

// Function to load boot count from a file
int loadBootCount() {
    std::ifstream file("boot_count.txt");
    int count = 0;
    if (file.is_open()) {
        file >> count;
        file.close();
    }
    return count;
}

// Function to save boot count to a file
void saveBootCount(int count) {
    std::ofstream file("boot_count.txt");
    if (file.is_open()) {
        file << count;
        file.close();
    }
}

// Function to check if the system has rebooted
bool hasSystemRebooted() {
    std::ifstream file("last_boot_time.txt");
    long last_boot_time = 0;
    if (file.is_open()) {
        file >> last_boot_time;
        file.close();
    }

    long current_boot_time = getSystemBootTime();

    if (current_boot_time > 0 && current_boot_time != last_boot_time) {
        // System reboot detected
        std::ofstream saveFile("last_boot_time.txt");
        if (saveFile.is_open()) {
            saveFile << current_boot_time;
            saveFile.close();
        }
        return true;
    }
    return false;
}

// Function to update uptime
void updateUptime() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        total_uptime.store(info.uptime);
    }
}

// Server handler to send stats to the client
void handleClientRequest(const httplib::Request &req, httplib::Response &res) {
    updateUptime();

    json response_json;
    response_json["boot_count"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();

    res.set_header("Cache-Control", "no-store");
    res.set_content(response_json.dump(), "application/json");
}

int main() {
    int stored_boot_count = loadBootCount();

    if (hasSystemRebooted()) {
        stored_boot_count += 1;
        saveBootCount(stored_boot_count);
    }

    boot_count.store(stored_boot_count);

    std::cout << "Boot Count: " << boot_count.load() << std::endl;
    std::cout << "Server running at http://localhost:8080...\n";

    httplib::Server server;
    server.Get("/stats", handleClientRequest);
    server.listen("localhost", 8080);

    return 0;
}




#include <iostream>
#include <httplib.h>
#include <json.hpp>
#include <thread>
#include <chrono>

using json = nlohmann::json;

// Function to request stats from the server periodically
void requestStats() {
    httplib::Client client("http://localhost:8080");

    while (true) {
        auto res = client.Get("/stats");

        if (res && res->status == 200) {
            json stats = json::parse(res->body);

            std::cout << "Received stats:\n";
            std::cout << "Boot Count: " << stats["boot_count"] << "\n";
            std::cout << "Uptime: " << stats["uptime"] << " seconds\n";
        } else {
            std::cerr << "Failed to get stats from server.\n";
        }

        std::this_thread::sleep_for(std::chrono::seconds(10));
    }
}

int main() {
    std::cout << "Client is requesting stats from server...\n";
    requestStats();
    return 0;
}





void saveStatsToCSV() {
    std::ofstream file("system_stats.csv", std::ios::app);  // Open in append mode

    if (!file.is_open()) {
        std::cerr << "Error opening CSV file!" << std::endl;
        return;
    }

    // Check if file is empty, write header
    std::ifstream checkFile("system_stats.csv");
    if (checkFile.peek() == std::ifstream::traits_type::eof()) {  
        file << "Date,Time,Boot Count,Uptime (seconds)\n";
    }
    checkFile.close();

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);

    file << 1900 + local_time->tm_year << "-"
         << 1 + local_time->tm_mon << "-"
         << local_time->tm_mday << ","
         << local_time->tm_hour << ":"
         << local_time->tm_min << ":"
         << local_time->tm_sec << ","
         << boot_count.load() << ","
         << total_uptime.load() << "\n";

    file.close();
}




void saveStatsToCSV(const json &stats) {
    std::ofstream file("system_stats.csv", std::ios::app);  

    if (!file.is_open()) {
        std::cerr << "Failed to open CSV file!" << std::endl;
        return;
    }

    // Check if file is empty, write header
    std::ifstream checkFile("system_stats.csv");
    if (checkFile.peek() == std::ifstream::traits_type::eof()) {  
        file << "Date,Time,Boot Count,Uptime (seconds)\n";
    }
    checkFile.close();

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);

    file << 1900 + local_time->tm_year << "-"
         << 1 + local_time->tm_mon << "-"
         << local_time->tm_mday << ","
         << local_time->tm_hour << ":"
         << local_time->tm_min << ":"
         << local_time->tm_sec << ","
         << stats.value("boot_count", 0) << ","
         << stats["uptime"].get<long>() << "\n";

    file.close();
}