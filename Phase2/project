#include <iostream>
#include <Poco/Net/WebSocket.h>
#include <Poco/Net/HTTPClientSession.h>
#include <Poco/Net/HTTPRequest.h>
#include <Poco/Net/HTTPResponse.h>
#include <Poco/StreamCopier.h>
#include <Poco/JSON/Parser.h>
#include <Poco/JSON/Object.h>
#include <Poco/Dynamic/Var.h>
#include <fstream>
#include <thread>
#include <ctime>

using namespace Poco::Net;
using namespace Poco::JSON;
using namespace Poco::Dynamic;

// Save statistics to CSV file
void saveStatsToCSV(int boot_count, long uptime)
{
    std::ofstream file("../system_stats.csv", std::ios_base::app);
    if (file.is_open())
    {
        std::time_t now = std::time(nullptr);
        std::tm *local_time = std::localtime(&now);

        file << 1900 + local_time->tm_year << "-"
             << 1 + local_time->tm_mon << "-"
             << local_time->tm_mday << ", "
             << local_time->tm_hour << ":"
             << local_time->tm_min << ":"
             << local_time->tm_sec << ", "
             << boot_count << ", "
             << uptime << "\n";
    }
    else
    {
        std::cerr << "Error opening CSV file!" << std::endl;
    }
}

// Function to listen for real-time server updates using WebSocket
void receiveStats()
{
    try
    {
        HTTPClientSession session("localhost", 8080);
        HTTPRequest request(HTTPRequest::HTTP_GET, "/stats", HTTPMessage::HTTP_1_1);
        HTTPResponse response;

        WebSocket ws(session, request, response);
        char buffer[1024];
        int flags;

        while (true)
        {
            int received = ws.receiveFrame(buffer, sizeof(buffer), flags);
            if (received > 0)
            {
                std::string data(buffer, received);
                std::cout << "[DEBUG] Raw Response: " << data << std::endl;

                try
                {
                    Parser parser;
                    Var result = parser.parse(data);
                    Object::Ptr stats = result.extract<Object::Ptr>();

                    std::cout << "Received stats:\n";
                    std::cout << "Boot Count: " << stats->getValue<int>("boot_count") << "\n";
                    std::cout << "Uptime: " << stats->getValue<long>("uptime") << " seconds\n";

                    saveStatsToCSV(stats->getValue<int>("boot_count"), stats->getValue<long>("uptime"));
                }
                catch (const Poco::Exception &e)
                {
                    std::cerr << "Poco JSON Parsing Error: " << e.displayText() << "\n";
                    std::cerr << "Raw Response: " << data << "\n";
                }
            }
        }
    }
    catch (const Poco::Exception &e)
    {
        std::cerr << "WebSocket Error: " << e.displayText() << "\n";
    }
}

int main()
{
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING CLIENT\n"
              << "=============================\n";
    std::cout << "Waiting for server updates...\n";

    receiveStats();
    return 0;
}