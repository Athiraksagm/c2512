void saveStatsToCSV(int boot_count, long uptime) {
    std::string filename = "../system_stats.csv";

    // Check if file exists and is empty
    std::ifstream fileCheck(filename);
    bool fileExists = fileCheck.good();
    bool isEmpty = fileCheck.peek() == std::ifstream::traits_type::eof();
    fileCheck.close();

    std::ofstream file(filename, std::ios_base::app);

    // Write headers only if the file is empty
    if (!fileExists || isEmpty) {
        file << "Date, Time, Boot Count, Uptime (seconds)\n";
    }

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);

    file << 1900 + local_time->tm_year << "-"  
         << 1 + local_time->tm_mon << "-"  
         << local_time->tm_mday << ", "  
         << local_time->tm_hour << ":"  
         << local_time->tm_min << ":"  
         << local_time->tm_sec << ", "  
         << boot_count << ", "  
         << uptime << "\n";
}









std::mutex disconnect_mutex;
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

void handleClient(ip::tcp::socket socket) {
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        json firstStat;
        firstStat["boot_count"] = boot_count.load();
        firstStat["uptime"] = getUptime();
        ws->write(net::buffer(firstStat.dump()));

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        boost::beast::flat_buffer buffer;
        while (true) {
            boost::system::error_code ec;
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) {
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }

        // Ensure we print "Client disconnected" only once per client
        {
            std::lock_guard<std::mutex> lock(disconnect_mutex);
            if (disconnected_clients.find(ws) == disconnected_clients.end()) {
                std::cerr << "Client disconnected.\n";
                disconnected_clients.insert(ws);
            }
        }
    } catch (...) {
        std::cerr << "Client error.\n";
    }
}