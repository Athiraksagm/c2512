#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include "json.hpp"
#include "tinyxml2.h"
#include <iostream>
#include <unordered_set>
#include <mutex>
#include <thread>
#include <sys/sysinfo.h>
#include <atomic>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = 10; // Default logging interval

// Load config.xml
void loadConfig() {
    XMLDocument doc;
    if (doc.LoadFile("../config.xml") == XML_SUCCESS) {
        XMLElement *root = doc.FirstChildElement("config");
        if (root) {
            XMLElement *intervalElement = root->FirstChildElement("logging_interval");
            if (intervalElement) {
                logging_interval = std::stoi(intervalElement->GetText());
                std::cout << "Logging interval set to: " << logging_interval << " seconds\n";
            }
        }
    }
}

// Get system uptime
long getUptime() {
    struct sysinfo info;
    sysinfo(&info);
    return info.uptime;
}

// Periodically send stats to clients
void broadcastStats() {
    while (true) {
        json stats;
        stats["uptime"] = getUptime();
        stats["boot_count"] = boot_count.load();

        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto &client : clients) {
            boost::beast::flat_buffer buffer;
            boost::system::error_code ec;
            client->write(boost::asio::buffer(stats.dump()), ec);
        }

        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
    }
}

// Handle WebSocket connection
void handleClient(ip::tcp::socket socket) {
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        boost::beast::flat_buffer buffer;
        while (ws->read(buffer)) {} // Keep connection open
    } catch (...) {
        std::cerr << "Client disconnected.\n";
    }
}

int main() {
    loadConfig();
    boot_count.store(10); // Placeholder boot count

    io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 8080));

    std::cout << "WebSocket server started on port 8080...\n";

    std::thread logger(broadcastStats);
    logger.detach();

    while (true) {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        std::thread(handleClient, std::move(socket)).detach();
    }

    return 0;
}







#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include "json.hpp"
#include <iostream>
#include <fstream>
#include <ctime>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

// Save stats to CSV
void saveStatsToCSV(int boot_count, long uptime) {
    std::ofstream file("../system_stats.csv", std::ios_base::app);
    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);

    file << 1900 + local_time->tm_year << "-"
         << 1 + local_time->tm_mon << "-"
         << local_time->tm_mday << ", "
         << local_time->tm_hour << ":"
         << local_time->tm_min << ":"
         << local_time->tm_sec << ", "
         << boot_count << ", "
         << uptime << "\n";
}

// Connect to WebSocket server
void connectToServer() {
    io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve("localhost", "8080");

    websocket::stream<ip::tcp::socket> ws(ioc);
    boost::asio::connect(ws.next_layer(), endpoints);
    ws.handshake("localhost", "/");

    std::cout << "Connected to server, receiving stats...\n";

    while (true) {
        boost::beast::flat_buffer buffer;
        ws.read(buffer);
        std::string data = boost::beast::buffers_to_string(buffer.data());

        json stats = json::parse(data);
        saveStatsToCSV(stats["boot_count"], stats["uptime"]);

        std::cout << "[Received Stats] Boot Count: " << stats["boot_count"]
                  << ", Uptime: " << stats["uptime"] << " seconds\n";
    }
}

int main() {
    std::ifstream checkFile("../system_stats.csv");
    if (!checkFile.is_open()) {
        std::ofstream file("../system_stats.csv");
        file << "Date (YYYY-MM-DD), Time (HH:MM:SS), Boot Count, Uptime (seconds)\n";
    }

    connectToServer();
    return 0;
}




cmake_minimum_required(VERSION 3.10)
project(SystemStatLoggingMicroservice)

find_package(Boost REQUIRED)

add_executable(server source/server.cpp)
target_link_libraries(server Boost::boost)

add_executable(client source/client.cpp)
target_link_libraries(client Boost::boost)