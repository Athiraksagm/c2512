// #include "gtest/gtest.h"
// #include "server.h"
// // #include "../source/server.cpp"
// #include <fstream>
// #include <boost/asio/ip/tcp.hpp>
// #include <boost/asio/io_context.hpp>
// #include <boost/asio/connect.hpp>
// #include <thread>

// using namespace boost::asio;
// using namespace boost::beast;
// using namespace boost::asio::ip;

// // ===================== TEST CASES =====================

// // Test getBootCount()
// TEST(ServerTest, GetBootCount_Valid) {
//     Server server;
//     int boot_count = server.getBootCountValue();
//     EXPECT_GE(boot_count, 0) << "Boot count should be non-negative.";
// }

// TEST(ServerTest, GetBootCount_Failure) {
//     Server server;
//     // Simulate a failure by running an invalid command
//     FILE *pipe = popen("invalid_command", "r");
//     if (!pipe) {
//         int result = server.getBootCountValue();
//         EXPECT_EQ(result, -1) << "Should return -1 on failure.";
//     }
// }

// // Test getUptime()
// TEST(ServerTest, GetUptime_Valid) {
//     Server server;
//     long uptime = server.getUptimeValue();
//     EXPECT_GT(uptime, 0) << "Uptime should be a positive number.";
// }

// TEST(ServerTest, GetUptime_Failure) {
//     Server server;
//     struct sysinfo info;
//     memset(&info, 0, sizeof(info));  // Simulating failure

//     long result = server.getUptimeValue();
//     EXPECT_NE(result, -1) << "Should return -1 if sysinfo() fails.";
// }

// // Test loadConfig()
// TEST(ServerTest, LoadConfig_ValidXML) {
//     Server server;
//     std::ofstream configFile("../../source/config.xml");
//     configFile << "<config>\n"
//                << "    <logging_interval>20</logging_interval>\n"
//                << "</config>";
//     configFile.close();

//     server.loadConfig();
//     EXPECT_EQ(server.getLoggingInterval(), 10) << "Should correctly set logging interval.";
// }

// TEST(ServerTest, LoadConfig_InvalidXML) {
//     Server server;
//     std::ofstream configFile("../source/config.xml");
//     configFile << "<config>\n"
//                << "    <logging_interval>invalid</logging_interval>\n"
//                << "</config>";
//     configFile.close();

//     server.loadConfig();
//     EXPECT_EQ(server.getLoggingInterval(), 10) << "Should fall back to default on invalid value.";
// }

// TEST(ServerTest, LoadConfig_MissingFile) {
//     Server server;
//     remove("../source/config.xml");
//     server.loadConfig();
//     EXPECT_EQ(server.getLoggingInterval(), 10) << "Should fall back to default if file is missing.";
// }

// TEST(ServerTest, LoadConfig_MissingLoggingInterval) {
//     Server server;
//     std::ofstream configFile("../source/config.xml");
//     configFile << "<config>\n"
//                << "    <!-- Missing logging_interval -->\n"
//                << "</config>";
//     configFile.close();

//     server.loadConfig();
//     EXPECT_EQ(server.getLoggingInterval(), 10) << "Should fall back to default if element is missing.";
// }
  
// // Test WebSocket Client Handling
// TEST(ServerTest, HandleWebSocketClient) {
//     Server server;
//     io_context ioc;
//     ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 8081));

//     std::thread server_thread([&]() {
//         ip::tcp::socket socket(ioc);
//         acceptor.accept(socket);
//         server.handleWebSocketClient(std::move(socket));
//     });

//     std::this_thread::sleep_for(std::chrono::milliseconds(500));

//     websocket::stream<ip::tcp::socket> ws(ioc);
//     tcp::resolver resolver(ioc);
//     auto results = resolver.resolve("127.0.0.1", "8081");
//     connect(ws.next_layer(), results.begin(), results.end());
//     ws.handshake("127.0.0.1", "/");

//     EXPECT_TRUE(ws.is_open());

//     ws.close(websocket::close_code::normal);
//     server_thread.join();
// }

// // Test REST API Server
// TEST(ServerTest, RESTServerFetchStats) {
//     Server server;
//     std::thread rest_thread([&server]() { server.startRESTServer(8090); });
//     std::this_thread::sleep_for(std::chrono::seconds(1));

//     httplib::Client cli("http://127.0.0.1:8090");
//     auto res = cli.Get("/fetchSystemStats");

//     EXPECT_EQ(res->status, 200);
//     json response = json::parse(res->body);
//     EXPECT_TRUE(response.contains("boot_count"));
//     EXPECT_TRUE(response.contains("uptime"));

//     rest_thread.detach();
// }

// // Test WebSocket Server
// TEST(ServerTest, WebSocketServerConnection) {
//     Server server;
//     std::thread ws_thread([&server]() { server.startWebSocketServer(8091); });
//     std::this_thread::sleep_for(std::chrono::seconds(1));

//     io_context ioc;
//     websocket::stream<ip::tcp::socket> ws(ioc);
//     tcp::resolver resolver(ioc);
//     auto results = resolver.resolve("127.0.0.1", "8091");
//     connect(ws.next_layer(), results.begin(), results.end());
//     ws.handshake("127.0.0.1", "/");

//     EXPECT_TRUE(ws.is_open());

//     ws.close(websocket::close_code::normal);
//     ws_thread.detach();
// }

// // ===================== MAIN FUNCTION FOR TESTS =====================
// int main(int argc, char **argv) {
//     ::testing::InitGoogleTest(&argc, argv);
//     return RUN_ALL_TESTS();
// }





#include "gtest/gtest.h"
#include "server.h"
#include <fstream>
#include <boost/asio.hpp>
#include <thread>

using namespace boost::asio;
using namespace boost::beast;
using namespace boost::asio::ip;

// Path to config file (use absolute or project-relative path if necessary)
const std::string TEST_CONFIG_FILE = CONFIG_FILE_PATH;

// ========================== TEST SUITE ========================== //

// **Test Boot Count Retrieval**
TEST(ServerTest, GetBootCount_Valid) {
    Server server;
    int boot_count = server.getBootCountValue();
    EXPECT_GE(boot_count, 0) << "Boot count should be non-negative.";
}

// **Test Uptime Retrieval**
TEST(ServerTest, GetUptime_Valid) {
    Server server;
    long uptime = server.getUptimeValue();
    EXPECT_GT(uptime, 0) << "Uptime should be greater than zero.";
}

// **Test Configuration Loading - Valid XML**
TEST(ServerTest, LoadConfig_ValidXML) {
    // Create a valid test configuration
    std::ofstream configFile(TEST_CONFIG_FILE);
    configFile << "<config>\n"
               << "    <logging_interval>10</logging_interval>\n"
               << "</config>";
    configFile.close();

    Server server;
    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), 10) << "Should correctly load logging interval.";
}

// **Test Configuration Loading - Invalid XML**
TEST(ServerTest, LoadConfig_InvalidXML) {
    // Create an invalid config file
    std::ofstream configFile(TEST_CONFIG_FILE);
    configFile << "<config>\n"
               << "    <logging_interval>invalid_value</logging_interval>\n"
               << "</config>";
    configFile.close();

    Server server;
    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), DEFAULT_LOGGING_INTERVAL) << "Should fall back to default on invalid value.";
}

// **Test Configuration Loading - Missing File**
TEST(ServerTest, LoadConfig_MissingFile) {
    remove(TEST_CONFIG_FILE.c_str());  // Ensure the file is missing

    Server server;
    server.loadConfig();
    EXPECT_EQ(server.getLoggingInterval(), DEFAULT_LOGGING_INTERVAL) << "Should fall back to default if file is missing.";
}

// **Test WebSocket Server - Accepts Connection**
TEST(ServerTest, WebSocketServerConnection) {
    Server server;
    std::thread ws_thread([&server]() { server.startWebSocketServer(9091); });
    std::this_thread::sleep_for(std::chrono::seconds(1));

    io_context ioc;
    websocket::stream<ip::tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto results = resolver.resolve("127.0.0.1", "9091");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    EXPECT_TRUE(ws.is_open()) << "WebSocket connection should be open.";

    ws.close(websocket::close_code::normal);
    ws_thread.detach();
}

// **Test REST API Server - Fetch Stats**
TEST(ServerTest, RESTServerFetchStats) {
    Server server;
    std::thread rest_thread([&server]() { server.startRESTServer(9090); });
    std::this_thread::sleep_for(std::chrono::seconds(1));

    httplib::Client cli("http://127.0.0.1:9090");
    auto res = cli.Get("/fetchSystemStats");

    ASSERT_NE(res, nullptr);
    EXPECT_EQ(res->status, 200);

    json response = json::parse(res->body);
    EXPECT_TRUE(response.contains("boot_count"));
    EXPECT_TRUE(response.contains("uptime"));

    rest_thread.detach();
}

// **Test WebSocket Client Handling**
TEST(ServerTest, HandleWebSocketClient) {
    Server server;
    io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 8082));

    std::thread server_thread([&]() {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        server.handleWebSocketClient(std::move(socket));
    });

    std::this_thread::sleep_for(std::chrono::milliseconds(500));

    websocket::stream<ip::tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto results = resolver.resolve("127.0.0.1", "8082");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    EXPECT_TRUE(ws.is_open());

    ws.close(websocket::close_code::normal);
    server_thread.join();
}

// **Main Function for Running Tests**
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
