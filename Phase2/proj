athira@INTVMLT2342:/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/build$ ./test_server
[==========] Running 8 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 8 tests from ServerTest
[ RUN      ] ServerTest.GetBootCount_Valid
Error: Could not load config.xml. Using default logging interval.
[       OK ] ServerTest.GetBootCount_Valid (9 ms)
[ RUN      ] ServerTest.GetUptime_Valid
Error: Could not load config.xml. Using default logging interval.
[       OK ] ServerTest.GetUptime_Valid (2 ms)
[ RUN      ] ServerTest.LoadConfig_ValidXML
Error: Could not load config.xml. Using default logging interval.
Error: Could not load config.xml. Using default logging interval.
[       OK ] ServerTest.LoadConfig_ValidXML (4 ms)
[ RUN      ] ServerTest.LoadConfig_InvalidXML
Error: Could not load config.xml. Using default logging interval.
Error: Could not load config.xml. Using default logging interval.
[       OK ] ServerTest.LoadConfig_InvalidXML (4 ms)
[ RUN      ] ServerTest.LoadConfig_MissingFile
Error: Could not load config.xml. Using default logging interval.
Error: Could not load config.xml. Using default logging interval.
[       OK ] ServerTest.LoadConfig_MissingFile (3 ms)
[ RUN      ] ServerTest.WebSocketServerConnection
Error: Could not load config.xml. Using default logging interval.
WebSocket Server running on port 9091
[       OK ] ServerTest.WebSocketServerConnection (1030 ms)
[ RUN      ] ServerTest.RESTServerFetchStats
Error: Could not load config.xml. Using default logging interval.
REST API Server running on port 9090
[       OK ] ServerTest.RESTServerFetchStats (1008 ms)
[ RUN      ] ServerTest.HandleWebSocketClient
Error: Could not load config.xml. Using default logging interval.
[       OK ] ServerTest.HandleWebSocketClient (507 ms)
[----------] 8 tests from ServerTest (2570 ms total)

[----------] Global test environment tear-down
[==========] 8 tests from 1 test suite ran. (2570 ms total)
[  PASSED  ] 8 tests.



void Server::loadConfig() {
            XMLDocument doc;
            if (doc.LoadFile("CONFIG_FILE_PATH") != XML_SUCCESS) {
                std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
                return;
            }
            XMLElement *root = doc.FirstChildElement("config");
            if (!root) {
                std::cerr << "Error: <config> element missing in config.xml. Using default.\n";
                return;
            }
            XMLElement *interval_element = root->FirstChildElement("logging_interval");
            if (!interval_element) {
                std::cerr << "Error: <logging_interval> element missing in config.xml. Using default.\n";
                return;
            }
            const char* interval_text = interval_element->GetText();
            if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit)) {
                try {
                    logging_interval = std::stoi(interval_text);
                    std::cerr << "Logging interval set to: " << logging_interval << "s\n";
                } catch (...) {
                    std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
                    logging_interval = DEFAULT_LOGGING_INTERVAL;
                }
            } else {
                std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
                logging_interval = DEFAULT_LOGGING_INTERVAL;
            }
        }

/**
 * @brief Retrieves the system boot count.
 * 
 * @return The number of times the system has booted. Returns -1 on failure.
 */
int Server::getBootCount() {
            FILE *pipe = popen("last reboot | wc -l", "r");
            if (!pipe) {
                std::cerr << "Error: Failed to execute system command for boot count.\n";
                return -1;
            }
            char buffer[128];
            if (!fgets(buffer, sizeof(buffer), pipe)) {
                std::cerr << "Error: Failed to read boot count from command output.\n";
                pclose(pipe);
                return -1;
            }
            pclose(pipe);
            try {
                int count = std::stoi(buffer);
                return (count > 0) ? count : -1;
            } catch (...) {
                std::cerr << "Error: Invalid boot count format.\n";
                return -1;
            }
        }
