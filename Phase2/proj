//test_server.cpp

#include "gtest/gtest.h"
#include "server.h"
#include <fstream>
#include <boost/asio/ip/tcp.hpp>
#include <tinyxml2.h>

using namespace boost::asio;
using namespace boost::beast;
using namespace boost::asio::ip;

// ===================== TEST CASES =====================

// Test getBootCount()
TEST(SystemStatsTest, GetBootCount_Valid) {
    int boot_count = getBootCount();
    EXPECT_GE(boot_count, 0) << "Boot count should be a non-negative integer.";
}

TEST(SystemStatsTest, GetBootCount_Failure) {
    // Simulate failure by redirecting `popen()` to an invalid command
    FILE* pipe = popen("invalid_command", "r");
    if (!pipe) {
        int result = getBootCount();
        EXPECT_EQ(result, -1) << "Should return -1 on failure to execute command.";
    }
}

// Test getUptime()
TEST(SystemStatsTest, GetUptime_Valid) {
    long uptime = getUptime();
    EXPECT_GT(uptime, 0) << "Uptime should be a positive value.";
}

TEST(SystemStatsTest, GetUptime_Failure) {
    // Simulate failure by modifying `sysinfo` response (Requires mocking)
    struct sysinfo info;
    memset(&info, 0, sizeof(info));  // Set uptime to 0 artificially

    long result = getUptime();
    EXPECT_NE(result, -1) << "Should return -1 if sysinfo() fails.";
}

// Test loadConfig()
TEST(SystemStatsTest, LoadConfig) {
    // Ensure logging_interval is correctly set
    loadConfig();
    EXPECT_GT(logging_interval, 0) << "Logging interval should be a positive value";
}

// Test loadConfig() with different cases
TEST(SystemStatsTest, LoadConfig_ValidXML) {
    // Create a test config.xml
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <logging_interval>15</logging_interval>\n"
               << "</config>";
    configFile.close();

    // Load the configuration
    loadConfig();

    // Validate that the interval was updated correctly
    EXPECT_EQ(logging_interval, 15);
}

TEST(SystemStatsTest, LoadConfig_InvalidXML) {
    // Create an invalid test config.xml
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <logging_interval>invalid</logging_interval>\n"
               << "</config>";
    configFile.close();

    // Load the configuration
    loadConfig();

    // Validate that the default value is used
    EXPECT_EQ(logging_interval, 10);
}

TEST(SystemStatsTest, LoadConfig_MissingFile) {
    // Ensure missing config.xml scenario
    remove("../source/config.xml");

    // Load the configuration
    loadConfig();

    // Validate that the default value is used
    EXPECT_EQ(logging_interval, 10);
}

TEST(SystemStatsTest, LoadConfig_MissingLoggingInterval) {
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <!-- Missing logging_interval -->\n"
               << "</config>";
    configFile.close();

    loadConfig();
    EXPECT_EQ(logging_interval, 10) << "Default logging interval should be used when missing.";
}

// Test broadcastStats()
TEST(SystemStatsTest, BroadcastStats) {
    // Clear existing clients before testing
    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        clients.clear();
    }
    
    // Ensure function does not crash
    EXPECT_NO_FATAL_FAILURE(broadcastStats());
}

TEST(ServerTests, HandleClient) {
    io_context ioc;
    tcp::acceptor acceptor(ioc, tcp::endpoint(tcp::v4(), 8080));

    // Start a thread to accept a client connection and handle it
    std::thread server_thread([&]() {
        tcp::socket socket(ioc);
        acceptor.accept(socket);
        handleClient(std::move(socket));  // Testing the actual function
    });

    std::this_thread::sleep_for(std::chrono::seconds(1)); // Give the server time to start

    // Simulate a WebSocket client
    websocket::stream<tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto const results = resolver.resolve("127.0.0.1", "8080");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    // Send a request to the server and read the response
    ws.write(net::buffer(std::string("REQUEST_STATS")));
    flat_buffer buffer;
    ws.read(buffer);
    std::string received_message = buffers_to_string(buffer.data());

    // Verify the server response contains valid JSON with expected fields
    json response = json::parse(received_message);
    EXPECT_TRUE(response.contains("boot_count"));
    EXPECT_TRUE(response.contains("uptime"));
    EXPECT_GE(response["boot_count"].get<int>(), 0);
    EXPECT_GE(response["uptime"].get<long>(), 0);

    // Clean up
    ws.close(websocket::close_code::normal);
    server_thread.join();
}

// Test if a client can successfully connect and disconnect
TEST(ServerTest, ClientConnection) {
    io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), 9000));
    ip::tcp::socket socket(ioc);
    
    // Simulate a client connection
    std::thread server_thread([&]() {
        ip::tcp::socket server_socket(ioc);
        acceptor.accept(server_socket);
        handleClient(std::move(server_socket));
    });

    std::this_thread::sleep_for(std::chrono::milliseconds(100)); // Give server some time to start

    // Connect the client
    socket.connect(acceptor.local_endpoint());
    EXPECT_TRUE(socket.is_open());

    // Disconnect the client
    socket.close();
    EXPECT_FALSE(socket.is_open());

    server_thread.join();
}

// ===================== MAIN FUNCTION FOR TESTS =====================
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}




//server.h

#ifndef SERVER_H
#define SERVER_H

#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include "json.hpp"
#include "httplib.h"
#include "tinyxml2.h"
#include <iostream>
#include <unordered_set>
#include <mutex>
#include <thread>
#include <sys/sysinfo.h>
#include <atomic>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

const int DEFAULT_LOGGING_INTERVAL = 10;
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = DEFAULT_LOGGING_INTERVAL;
io_context ioc;

int getBootCount() {
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute system command for boot count.\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        int count = std::stoi(buffer);
        return (count > 0) ? count : -1;
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

long getUptime() {
    struct sysinfo info;
    if (sysinfo(&info) != 0) {
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

void loadConfig() {
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS) {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root) {
        std::cerr << "Error: <config> element missing in config.xml. Using default.\n";
        return;
    }
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element) {
        std::cerr << "Error: <logging_interval> element missing in config.xml. Using default.\n";
        return;
    }
    const char* interval_text = interval_element->GetText();
    if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit)) {
        try {
            logging_interval = std::stoi(interval_text);
            std::cerr << "Logging interval set to: " << logging_interval << "s\n";
        } catch (...) {
            std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
            logging_interval = DEFAULT_LOGGING_INTERVAL;
        }
    } else {
        std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
        logging_interval = DEFAULT_LOGGING_INTERVAL;
    }
}

void broadcastStats() {
    while (true) {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients) {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnected_clients.push_back(client);
                }
            }

            for (const auto &client : disconnected_clients) {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(std::max(1, logging_interval)));
    }
}

// Function to handle REST API requests for initial stats
void startRESTServer(int restPort) {
    httplib::Server server;

    server.Get("/fetchSystemStats", [](const httplib::Request &, httplib::Response &res) {
        json response;
        response["boot_count"] = boot_count.load();
        response["uptime"] = getUptime();
        
        res.set_content(response.dump(), "application/json");
    });

    std::cout << "REST API Server running on port " << restPort << "\n";
    server.listen("0.0.0.0", restPort);
}

// Function to handle WebSocket clients for periodic stats
void handleWebSocketClient(ip::tcp::socket socket) {
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        while (ws->is_open()) {
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) break;
            if (ec) {
                std::cerr << "WebSocket read error: " << ec.message() << "\n";
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }

    } catch (const std::exception &e) {
        std::cerr << "WebSocket client error: " << e.what() << "\n";
    }
}

// Function to start the WebSocket server
void startWebSocketServer(int wsPort) {
    boost::asio::io_context ioc;
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), wsPort));

    std::cout << "WebSocket Server running on port " << wsPort << "\n";

    while (true) {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        std::thread(handleWebSocketClient, std::move(socket)).detach();
    }
}

// Function to send periodic system stats via WebSocket
void sendPeriodicStats() {
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(10)); // Adjust interval as needed
        json periodicStats;
        periodicStats["boot_count"] = boot_count.load();
        periodicStats["uptime"] = getUptime();

        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto &client : clients) {
            boost::system::error_code ec;
            client->write(net::buffer(periodicStats.dump()), ec);
            if (ec) {
                std::cerr << "Error sending periodic stats: " << ec.message() << "\n";
            }
        }
    }
}

#endif
