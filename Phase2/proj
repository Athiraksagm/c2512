json requestInitialStats(const std::string& host, int restPort, bool logToFile) {
    httplib::Client client(host, restPort);
    auto res = client.Get("/fetchSystemStats");

    if (res && res->status == 200) {
        json stats = json::parse(res->body);
        std::cout << "[Received Stats] Boot Count: " << stats["boot_count"]
                  << ", Uptime: " << stats["uptime"] << " seconds\n";

        if (logToFile) {
            saveStatsToCSV(stats["boot_count"], stats["uptime"]);
        }

        return stats;
    } else {
        std::cerr << "Failed to fetch initial stats via REST API.\n";
        return json();
    }
}






void connectToWebSocket(const std::string& host, int wsPort, bool logToFile) {
    boost::asio::io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve(host, std::to_string(wsPort));

    ws_client = std::make_shared<websocket::stream<ip::tcp::socket>>(ioc);
    boost::asio::connect(ws_client->next_layer(), endpoints);
    ws_client->handshake(host, "/");

    boost::beast::flat_buffer buffer;
    boost::system::error_code ec;

    while (!stopClient) {
        ws_client->read(buffer, ec);
        if (ec) {
            if (ec == websocket::error::closed) {
                std::cout << "WebSocket closed by server.\n";
                break;
            } else {
                std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
                break;
            }
        }

        std::string periodicData = boost::beast::buffers_to_string(buffer.data());
        json periodicStats = json::parse(periodicData);

        std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
                  << ", Uptime: " << periodicStats["uptime"] << " seconds\n";

        if (logToFile) {
            saveStatsToCSV(periodicStats["boot_count"], periodicStats["uptime"]);
        }

        buffer.consume(buffer.size());
    }

    std::cout << "Client exiting WebSocket gracefully.\n";
    ws_client.reset();
}