//client

#include <iostream>
#include <httplib.h>
#include <json.hpp>
#include <fstream>
#include <thread>
#include <ctime>

using json = nlohmann::json;

bool enable_csv_logging = false;

// Save statistics to CSV file
void saveStatsToCSV(int boot_count, long uptime)
{
    std::ofstream file("../system_stats.csv", std::ios_base::app);
    if (file.is_open())
    {
        std::time_t now = std::time(nullptr);
        std::tm *local_time = std::localtime(&now);

        file << 1900 + local_time->tm_year << "-"
             << 1 + local_time->tm_mon << "-"
             << local_time->tm_mday << ", "
             << local_time->tm_hour << ":"
             << local_time->tm_min << ":"
             << local_time->tm_sec << ", "
             << boot_count << ", "
             << uptime << "\n";
    }
    else
    {
        std::cerr << "Error opening CSV file!" << std::endl;
    }
}

// Function to receive system stats
void receiveStats()
{
    httplib::Client client("http://localhost:8080");

    while (true)
    {
        auto response = client.Get("/stats");

        if (response && response->status == 200)
        {
            std::string body = response->body;
            std::cout << "[DEBUG] Raw Response: " << body << std::endl; // Debugging

            try
            {
                // Ensure response starts with '{' to be valid JSON
                if (body.empty() || body[0] != '{')
                {
                    std::cerr << "Invalid response (not JSON): " << body << "\n";
                    continue;
                }

                json stats = json::parse(body);
                std::cout << "Received stats:\n";
                std::cout << "Boot Count: " << stats["boot_count"] << "\n";
                std::cout << "Uptime: " << stats["uptime"] << " seconds\n";

                saveStatsToCSV(stats["boot_count"], stats["uptime"]);
            }
            catch (const json::parse_error &e)
            {
                std::cerr << "JSON Parse Error: " << e.what() << "\n";
                std::cerr << "Raw Response: " << body << "\n"; // Debugging
            }
        }
        else
        {
            std::cerr << "Failed to get stats from server.\n";
        }
        std::this_thread::sleep_for(std::chrono::seconds(2));
    }
}

int main(int argc, char *argv[])
{
    if (argc > 1 && std::string(argv[1]) == "--enable-csv")
    {
        enable_csv_logging = true;
    }

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING CLIENT\n"
              << "=============================\n";
    std::cout << "Waiting for server updates...\n";

    if (enable_csv_logging)
    {
        std::ifstream checkFile("../system_stats.csv");
        if (!checkFile.is_open())
        {
            std::ofstream file("../system_stats.csv");
            if (file.is_open())
            {
                file << "Date (YYYY-MM-DD), Time (HH:MM:SS), Boot Count, Uptime (seconds)\n";
                file.close();
            }
        }
        checkFile.close();
    }

    receiveStats();
    return 0;
}


//server

#include "httplib.h"
#include "json.hpp"
#include "tinyxml2.h"
#include <iostream>
#include <fstream>
#include <atomic>
#include <sys/sysinfo.h>
#include <unistd.h>
#include <array>
#include <memory>
#include <thread>
#include <vector>
#include <mutex>

using json = nlohmann::json;
using namespace tinyxml2;

std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);
int logging_interval = 10;  // Default interval in seconds

std::vector<std::shared_ptr<httplib::Response>> clients;
std::mutex client_mutex;

// Load interval from XML config
void loadConfig()
{
    XMLDocument doc;
    if (doc.LoadFile("../config.xml") == XML_SUCCESS)
    {
        XMLElement *root = doc.FirstChildElement("config");
        if (root)
        {
            XMLElement *intervalElement = root->FirstChildElement("logging_interval");
            if (intervalElement)
            {
                logging_interval = std::stoi(intervalElement->GetText());
                std::cout << "Logging interval set to: " << logging_interval << " seconds\n";
            }
        }
    }
    else
    {
        std::cerr << "Error: Failed to load config.xml. Using default interval.\n";
    }
}

// Get boot count from `last reboot`
int getBootCount()
{
    std::array<char, 128> buffer;
    std::string result;
    std::shared_ptr<FILE> pipe(popen("last reboot | wc -l", "r"), pclose);
    if (!pipe)
    {
        std::cerr << "Failed to run command." << std::endl;
        return -1;
    }

    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr)
    {
        result += buffer.data();
    }

    return std::stoi(result);
}

// Update system uptime
void updateUptime()
{
    struct sysinfo info;
    if (sysinfo(&info) == 0)
    {
        total_uptime.store(info.uptime);
    }
}

// Function to send stats to connected clients
void sendStatsPeriodically()
{
    while (true)
    {
        updateUptime();
        json response_json;
        response_json["boot_count"] = boot_count.load();
        response_json["uptime"] = total_uptime.load();

        std::string response_data = response_json.dump();
        std::cout << "[DEBUG] Sending JSON: " << response_data << std::endl; // Debugging

        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
    }
}

// Handle client request for updates
void handleClientRequest(const httplib::Request &req, httplib::Response &res)
{
    json response_json;
    response_json["boot_count"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();

    res.set_content(response_json.dump(), "application/json");
}

int main()
{
    loadConfig();
    boot_count.store(getBootCount());

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n";
    std::cout << "Boot Count: " << boot_count.load() << "\n";
    std::cout << "Server running at http://localhost:8080...\n";

    httplib::Server server;
    server.Get("/stats", handleClientRequest);

    std::thread periodic_thread(sendStatsPeriodically);
    periodic_thread.detach();

    server.listen("localhost", 8080);

    return 0;
}
