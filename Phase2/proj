#include "client.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

const std::string CSV_FILE_PATH = "../source/system_stats.csv";
namespace websocket = boost::beast::websocket;

/**
 * @class SystemStatClient
 * @brief Manages communication with the system stats server via REST API and WebSocket.
 */
class SystemStatClient {
private:
    std::string host;
    int restPort;
    int wsPort;
    bool logToFile;
    std::shared_ptr<websocket::stream<ip::tcp::socket>> ws_client;
    std::atomic<bool> stopClient;

public:
    SystemStatClient(const std::string& serverHost, int rest_port, int ws_port, bool log)
        : host(serverHost), restPort(rest_port), wsPort(ws_port), logToFile(log), stopClient(false) {}

    void saveStatsToCSV(int boot_count, long uptime) {
        std::ifstream fileCheck(CSV_FILE_PATH);
        bool fileExists = fileCheck.good();
        bool isEmpty = fileCheck.peek() == std::ifstream::traits_type::eof();
        fileCheck.close();

        std::ofstream file(CSV_FILE_PATH, std::ios_base::app);
        if (!fileExists || isEmpty) {
            file << "Date(YYYY-MM-DD), Time(HH:MM:SS), Boot Count, Uptime (seconds)\n";
        }

        std::time_t now = std::time(nullptr);
        std::tm* local_time = std::localtime(&now);
        file << std::put_time(local_time, "%Y-%m-%d, %H:%M:%S") << ", " << boot_count << ", " << uptime << "\n";
    }

    json requestInitialStats() {
        httplib::Client client(host, restPort);
        auto res = client.Get("/fetchSystemStats");

        if (res && res->status == 200) {
            json stats = json::parse(res->body);
            std::cout << "[Received Stats] Boot Count: " << stats["boot_count"]
                      << ", Uptime: " << stats["uptime"] << " seconds\n";

            if (logToFile) {
                saveStatsToCSV(stats["boot_count"], stats["uptime"]);
                std::cout << "Initial stats saved to CSV file.\n";
            }

            return stats;
        } else {
            std::cerr << "Failed to fetch initial stats via REST API. Status: "
                      << (res ? res->status : -1) << "\n";
            return json();
        }
    }

    void connectToWebSocket() {
        boost::asio::io_context ioc;
        ip::tcp::resolver resolver(ioc);
        auto endpoints = resolver.resolve(host, std::to_string(wsPort));

        ws_client = std::make_shared<websocket::stream<ip::tcp::socket>>(ioc);
        boost::asio::connect(ws_client->next_layer(), endpoints);
        ws_client->handshake(host, "/");

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;

        while (!stopClient) {
            ws_client->read(buffer, ec);
            if (ec) {
                if (ec == websocket::error::closed) {
                    std::cout << "WebSocket closed by server.\n";
                    break;
                } else {
                    std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
                    break;
                }
            }

            std::string periodicData = boost::beast::buffers_to_string(buffer.data());
            json periodicStats = json::parse(periodicData);

            std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
                      << ", Uptime: " << periodicStats["uptime"] << " seconds\n";

            if (logToFile) {
                saveStatsToCSV(periodicStats["boot_count"], periodicStats["uptime"]);
            }

            buffer.consume(buffer.size());
        }

        std::cout << "Client exiting WebSocket gracefully.\n";
        ws_client.reset();
    }

    void stopWebSocket() {
        std::cout << "\nClient received SIGINT, closing WebSocket...\n";
        stopClient = true;

        if (ws_client) {
            boost::system::error_code ec;
            ws_client->close(websocket::close_code::normal, ec);
            if (ec) {
                std::cerr << "Error closing WebSocket: " << ec.message() << "\n";
            } else {
                std::cout << "WebSocket closed successfully.\n";
            }
        }

        ws_client.reset();
        exit(0);
    }
};

// Global instance for signal handling
std::shared_ptr<SystemStatClient> clientInstance;

/**
 * @brief Handles the SIGINT (Ctrl+C) signal to safely close the WebSocket connection.
 * @param signum The signal number received.
 */
void signalHandler(int signum) {
    if (clientInstance) {
        clientInstance->stopWebSocket();
    }
}

int main(int argc, char* argv[]) {
    signal(SIGINT, signalHandler);

    bool logToFile = false;
    std::string host = "0.0.0.0";  // Must match the server IP
    int rest_port = 8080;          // Default REST API port
    int ws_port = 9000;            // Default WebSocket port

    if (argc > 1) {
        host = argv[1];
    }
    if (argc > 2) {
        try {
            rest_port = std::stoi(argv[2]);
            ws_port = std::stoi(argv[3]);
        } catch (...) {
            std::cerr << "Error: Invalid port numbers. Using default ports (REST: 8080, WS: 9000).\n";
            rest_port = 8080;
            ws_port = 9000;
        }
    }
    if (argc > 4 && std::string(argv[4]) == "--log") {
        logToFile = true;
    }

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING CLIENT\n"
              << "=============================\n\n";

    clientInstance = std::make_shared<SystemStatClient>(host, rest_port, ws_port, logToFile);

    std::cout << "Requesting initial stats from " << host << ":" << rest_port << "\n";
    clientInstance->requestInitialStats();

    std::cout << "\nConnecting to WebSocket at " << host << ":" << ws_port << " for periodic updates...\n";
    clientInstance->connectToWebSocket();

    return 0;
}