// Handle client request and add them to broadcast list
void handleClientRequest(const httplib::Request &req, httplib::Response &res)
{
    std::lock_guard<std::mutex> lock(client_mutex);
    
    // Send an immediate response
    updateUptime();
    json response_json;
    response_json["boot_count"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();

    res.set_header("Cache-Control", "no-store");
    res.set_content(response_json.dump(), "application/json");

    std::cout << "[Client Connected] Sent immediate response.\n";

    // Add client to the list for periodic updates
    clients.push_back(&res);
}

// Periodically send stats to all stored clients
void sendStatsToClients()
{
    while (true)
    {
        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));

        std::lock_guard<std::mutex> lock(client_mutex);
        if (!clients.empty())
        {
            updateUptime();

            json response_json;
            response_json["boot_count"] = boot_count.load();
            response_json["uptime"] = total_uptime.load();

            for (auto *client : clients)
            {
                if (client)
                {
                    client->set_header("Cache-Control", "no-store");
                    client->set_content(response_json.dump(), "application/json");
                }
            }

            std::cout << "[Broadcast] Boot Count: " << boot_count.load()
                      << ", Uptime: " << total_uptime.load() << " seconds\n";
        }
    }
}

int main()
{
    loadConfig();
    boot_count.store(getBootCount());

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n";
    std::cout << "Boot Count: " << boot_count.load() << "\n";
    std::cout << "Server running at http://localhost:8080...\n";

    // Start periodic broadcasting in a separate thread
    std::thread broadcaster(sendStatsToClients);
    broadcaster.detach();

    // Start HTTP server
    httplib::Server server;
    server.Get("/stats", handleClientRequest);
    server.listen("localhost", 8080);

    return 0;
}