#include "httplib.h"
#include "json.hpp"
#include "tinyxml2.h"
#include <iostream>
#include <fstream>
#include <atomic>
#include <sys/sysinfo.h>
#include <unistd.h>
#include <array>
#include <memory>
#include <thread>
#include <chrono>

using json = nlohmann::json;
using namespace tinyxml2;

std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);
int logging_interval = 10;  // Default logging interval in seconds

// Load logging interval from XML configuration
void loadConfig()
{
    XMLDocument doc;
    if (doc.LoadFile("../config.xml") == XML_SUCCESS)
    {
        XMLElement *root = doc.FirstChildElement("config");
        if (root)
        {
            XMLElement *intervalElement = root->FirstChildElement("logging_interval");
            if (intervalElement)
            {
                logging_interval = std::stoi(intervalElement->GetText());
                std::cout << "Logging interval set to: " << logging_interval << " seconds\n";
            }
        }
    }
    else
    {
        std::cerr << "Error: Failed to load config.xml. Using default interval.\n";
    }
}

// Get system boot count using `last reboot`
int getBootCount()
{
    std::array<char, 128> buffer;
    std::string result;
    std::shared_ptr<FILE> pipe(popen("last reboot | wc -l", "r"), pclose);
    if (!pipe)
    {
        std::cerr << "Failed to run command." << std::endl;
        return -1;
    }

    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr)
    {
        result += buffer.data();
    }

    return std::stoi(result);  // Convert output to integer
}

// Update system uptime using `sysinfo()`
void updateUptime()
{
    struct sysinfo info;
    if (sysinfo(&info) == 0)
    {
        total_uptime.store(info.uptime);
    }
}

// Periodically send statistics to the client
void sendStatsPeriodically(httplib::Response &res)
{
    while (true)
    {
        updateUptime();
        json response_json;
        response_json["boot_count"] = boot_count.load();
        response_json["uptime"] = total_uptime.load();

        res.set_content(response_json.dump(), "application/json");
        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
    }
}

// Handle client request and start periodic updates
void handleClientRequest(const httplib::Request &req, httplib::Response &res)
{
    std::cout << "[Client Connected] Sending periodic statistics...\n";
    std::thread periodic_thread(sendStatsPeriodically, std::ref(res));
    periodic_thread.detach();
}

int main()
{
    loadConfig();
    boot_count.store(getBootCount());

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n";
    std::cout << "Boot Count: " << boot_count.load() << "\n";
    std::cout << "Server running at http://localhost:8080...\n";
    std::cout << "Waiting for client requests...\n";

    httplib::Server server;
    server.Get("/stats", handleClientRequest);
    server.listen("localhost", 8080);

    return 0;
}







#include <iostream>
#include <httplib.h>
#include <json.hpp>
#include <fstream>
#include <thread>
#include <chrono>

using json = nlohmann::json;

// Function to save statistics to a CSV file
void saveStatsToCSV(int boot_count, long uptime)
{
    std::ofstream file("../system_stats.csv", std::ios_base::app);
    if (file.is_open())
    {
        std::time_t now = std::time(nullptr);
        std::tm *local_time = std::localtime(&now);

        file << 1900 + local_time->tm_year << "-"
             << 1 + local_time->tm_mon << "-"
             << local_time->tm_mday << ", "
             << local_time->tm_hour << ":"
             << local_time->tm_min << ":"
             << local_time->tm_sec << ", "
             << boot_count << ", "
             << uptime << "\n";
    }
    else
    {
        std::cerr << "Error opening CSV file!" << std::endl;
    }
}

// Function to request and receive periodic statistics
void receiveStats()
{
    httplib::Client client("http://localhost:8080");

    auto res = client.Get("/stats");
    if (!res || res->status != 200)
    {
        std::cerr << "Failed to establish connection with server.\n";
        return;
    }

    while (true)
    {
        auto response = client.Get("/stats");

        if (response && response->status == 200)
        {
            json stats = json::parse(response->body);
            std::cout << "Received stats:\n";
            std::cout << "Boot Count: " << stats["boot_count"] << "\n";
            std::cout << "Uptime: " << stats["uptime"] << " seconds\n";

            // Save received statistics to CSV
            saveStatsToCSV(stats["boot_count"], stats["uptime"]);
        }
        else
        {
            std::cerr << "Failed to get stats from server.\n";
        }

        std::this_thread::sleep_for(std::chrono::seconds(10));
    }
}

int main()
{
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING CLIENT\n"
              << "=============================\n";
    std::cout << "Client is requesting stats from server...\n";

    std::ifstream checkFile("../system_stats.csv");
    if (!checkFile.is_open())
    {
        std::ofstream file("../system_stats.csv");
        if (file.is_open())
        {
            file << "Date (YYYY-MM-DD), Time (HH:MM:SS), Boot Count, Uptime (seconds)\n";
            file.close();
        }
    }
    checkFile.close();

    receiveStats();
    return 0;
}