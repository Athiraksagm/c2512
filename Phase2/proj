#include "client.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

const std::string CSV_FILE_PATH = "../source/system_stats.csv";
namespace websocket = boost::beast::websocket;
std::shared_ptr<websocket::stream<boost::asio::ip::tcp::socket>> ws_client;
std::atomic<bool> stopClient(false);

/**
 * @brief Saves system statistics (boot count and uptime) to a CSV file.
 * 
 * @param boot_count The system's boot count.
 * @param uptime The system's uptime in seconds.
 */
void saveStatsToCSV(int boot_count, long uptime) 
{
    std::ifstream fileCheck(CSV_FILE_PATH);
    bool fileExists = fileCheck.good();
    bool isEmpty = fileCheck.peek() == std::ifstream::traits_type::eof();
    fileCheck.close();

    std::ofstream file(CSV_FILE_PATH, std::ios_base::app);

    if (!fileExists || isEmpty) {
        file << "Date(YYYY-MM-DD), Time(HH:MM:SS), Boot Count, Uptime (seconds)\n";
    }

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);

    file << std::put_time(local_time,"%Y-%m-%d, %H:%M:%S") << ", " << boot_count << ", " << uptime << "\n";
}

// /**
//  * @brief Connects to the server using WebSocket and retrieves system statistics.
//  * 
//  * @param host The server's hostname or IP address.
//  * @param port The server's port number.
//  * @param logToFile Flag to enable logging received statistics to a CSV file.
//  */
// void connectToServer(const std::string& host, int port, bool logToFile) 
// {
//     boost::asio::io_context ioc;
//     ip::tcp::resolver resolver(ioc);
//     auto endpoints = resolver.resolve(host, std::to_string(port));

//     // websocket::stream<ip::tcp::socket> ws(ioc);
//     // ws_client = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(ws)); // Store ws_client for signal handling
//     ws_client = std::make_shared<websocket::stream<ip::tcp::socket>>(ioc);
//     boost::asio::connect(ws_client->next_layer(), endpoints);
//     ws_client->handshake(host, "/");

//     std::cout << "Sending REQUEST_STATS to server...\n\n";
//     std::this_thread::sleep_for(std::chrono::milliseconds(500));
//     ws_client->write(net::buffer(std::string("REQUEST_STATS")));

//     boost::beast::flat_buffer buffer;
//     boost::system::error_code ec;
//     ws_client->read(buffer, ec);

//     if (ec) {
//         std::cerr << "Error receiving initial stats: " << ec.message() << "\n";
//         return;
//     }

//     std::string data = boost::beast::buffers_to_string(buffer.data());
//     json stats = json::parse(data);

//     std::cout << "[Received Stats] Boot Count: " << stats["boot_count"]
//               << ", Uptime: " << stats["uptime"] << " seconds\n";

//     if (logToFile) {
//         saveStatsToCSV(stats["boot_count"], stats["uptime"]);
//     }

//     buffer.consume(buffer.size());

//     while (!stopClient) { // Check stopClient flag
//         ws_client->read(buffer, ec);
//         if (ec) {
//             if (ec == boost::asio::error::eof) { 
//                 std::cout << "Error receiving periodic stats: End of file (server closed connection)\n";
//                 break;
//             } else if (ec == websocket::error::closed) {
//                 std::cout << "Client disconnected: WebSocket closed\n";
//                 break;
//             } else {
//                 std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
//                 break;
//             }
//         }

//         std::string periodicData = boost::beast::buffers_to_string(buffer.data());
//         json periodicStats = json::parse(periodicData);

//         std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
//                   << ", Uptime: " << periodicStats["uptime"] << " seconds\n";

//         buffer.consume(buffer.size());
//     }

//     std::cout << "Client exiting gracefully.\n";
//     ws_client.reset(); // Properly delete the WebSocket instance
// }

// Function to request initial stats via REST API
json requestInitialStats(const std::string& host, int restPort) {
    httplib::Client client(host, restPort);
    auto res = client.Get("/fetchSystemStats");

    if (res && res->status == 200) {
        return json::parse(res->body);
    } else {
        std::cerr << "Failed to fetch initial stats via REST API.\n";
        return json();
    }
}

// Function to receive periodic stats via WebSocket
void connectToWebSocket(const std::string& host, int wsPort) {
    boost::asio::io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve(host, std::to_string(wsPort));

    ws_client = std::make_shared<websocket::stream<ip::tcp::socket>>(ioc);
    boost::asio::connect(ws_client->next_layer(), endpoints);
    ws_client->handshake(host, "/");

    boost::beast::flat_buffer buffer;
    boost::system::error_code ec;

    while (!stopClient) {
        ws_client->read(buffer, ec);
        if (ec) {
            if (ec == websocket::error::closed) {
                std::cout << "WebSocket closed by server.\n";
                break;
            } else {
                std::cerr << "Error receiving periodic stats: " << ec.message() << "\n";
                break;
            }
        }

        std::string periodicData = boost::beast::buffers_to_string(buffer.data());
        json periodicStats = json::parse(periodicData);

        std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
                  << ", Uptime: " << periodicStats["uptime"] << " seconds\n";

        buffer.consume(buffer.size());
    }

    std::cout << "Client exiting WebSocket gracefully.\n";
    ws_client.reset();
}


/**
 * @brief Handles SIGINT (Ctrl+C) to close the WebSocket connection and exit safely.
 * 
 * @param signum The signal number received.
 */
void signalHandler(int signum)
{
    std::cout << "\nClient received SIGINT, closing WebSocket...\n\n";
    stopClient = true; // Stop the client loop

    if (ws_client) {
        boost::system::error_code ec;
        ws_client->close(websocket::close_code::normal, ec);
        if (ec) {
            std::cerr << "Error closing WebSocket: " << ec.message() << "\n";
        } else {
            std::cout << "WebSocket closed successfully.\n";
        }
    }

    ws_client.reset(); // Free the WebSocket instance
    exit(signum);
}

/**
 * @brief Main function to start the client and handle command-line arguments.
 * 
 * @param argc The number of command-line arguments.
 * @param argv The command-line argument array.
 * @return int Exit status.
 */
// int main(int argc, char* argv[]) 
// {
//     signal(SIGINT, signalHandler);
//     bool logToFile = false;
//     std::string host = "localhost";
//     int port = 9000;

//     if (argc > 1) {
//         host = argv[1]; 
//     }

//     if (argc > 2) {
//         try {
//             port = std::stoi(argv[2]);
//         } catch (...) {
//             std::cerr << "Error: Invalid port number. Using default port 9000.\n";
//             port = 9000;
//         }
//     }

//     if (argc > 3 && std::string(argv[3]) == "--log") {
//         logToFile = true;
//     }

//     std::cout << "=============================\n"
//               << " SYSTEM STAT LOGGING CLIENT\n"
//               << "=============================\n\n";
//     std::cout << "Connecting to server at " << host << ":" << port << "\n\n";

//     connectToServer(host, port, logToFile);
//     return 0;
// }


#include "client.h"

int main(int argc, char* argv[]) 
{
    signal(SIGINT, signalHandler);
    
    bool logToFile = false;
    std::string host = "localhost";
    int rest_port = 8080;  // Default REST API port
    int ws_port = 9000;    // Default WebSocket port

    // Parse command-line arguments
    if (argc > 1) {
        host = argv[1]; 
    }

    if (argc > 2) {
        try {
            rest_port = std::stoi(argv[2]); // REST API port
            ws_port = std::stoi(argv[3]);   // WebSocket port
        } catch (...) {
            std::cerr << "Error: Invalid port numbers. Using default ports (REST: 8080, WS: 9000).\n";
            rest_port = 8080;
            ws_port = 9000;
        }
    }

    if (argc > 4 && std::string(argv[4]) == "--log") {
        logToFile = true;
    }

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING CLIENT\n"
              << "=============================\n\n";
    std::cout << "Requesting initial stats from " << host << ":" << rest_port << "\n";

    requestInitialStats(host, rest_port, logToFile);  // Fetch initial stats via REST API
    std::cout << "\nConnecting to WebSocket at " << host << ":" << ws_port << " for periodic updates...\n";

    connectToWebSocket(host, ws_port, logToFile);  // Connect to WebSocket for periodic stats
    return 0;
}



athira@INTVMLT2342:/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/client/build$ make
Consolidate compiler generated dependencies of target client
[ 33%] Building CXX object CMakeFiles/client.dir/source/client.cpp.o
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/client/source/client.cpp: In function ‘int main(int, char**)’:
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/client/source/client.cpp:262:24: error: too many arguments to function ‘json requestInitialStats(const string&, int)’
  262 |     requestInitialStats(host, rest_port, logToFile);  // Fetch initial stats via REST API
      |     ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/client/source/client.cpp:110:6: note: declared here
  110 | json requestInitialStats(const std::string& host, int restPort) {
      |      ^~~~~~~~~~~~~~~~~~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/client/source/client.cpp:265:23: error: too many arguments to function ‘void connectToWebSocket(const string&, int)’
  265 |     connectToWebSocket(host, ws_port, logToFile);  // Connect to WebSocket for periodic stats
      |     ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/client/source/client.cpp:123:6: note: declared here
  123 | void connectToWebSocket(const std::string& host, int wsPort) {
      |      ^~~~~~~~~~~~~~~~~~
make[2]: *** [CMakeFiles/client.dir/build.make:76: CMakeFiles/client.dir/source/client.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/client.dir/all] Error 2
make: *** [Makefile:91: all] Error 2
