#include "server.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

const int DEFAULT_LOGGING_INTERVAL = 10;
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = DEFAULT_LOGGING_INTERVAL;
io_context ioc;

/**
 * @brief Retrieves the system boot count.
 * @return The number of times the system has rebooted, or -1 on failure.
 */
int getBootCount()
{
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute system command for boot count..\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        int count = std::stoi(buffer);
        return (count > 0) ? count : -1;
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

/**
 * @brief Retrieves the system uptime in seconds.
 * @return The system uptime in seconds, or -1 on failure.
 */
long getUptime()
{
    struct sysinfo info;
    if (sysinfo(&info) !=0){
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

/**
 * @brief Loads the logging interval configuration from config.xml.
 * @details If the configuration file is missing or invalid, it falls back to the default interval.
 */
void loadConfig()
{
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS)
    {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root)
    {
        std::cerr << "Error: <config> element missing in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
        return;
    }
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element)
    {
        std::cerr << "Error: <logging_interval> element missing in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
        return;
    }
    const char* interval_text = interval_element->GetText();
    if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit))
    {
        try {
            logging_interval = std::stoi(interval_text);
            std::cerr << "Logging interval set to: " << DEFAULT_LOGGING_INTERVAL << "s\n\n" << std::flush;
        } catch (...) {
            std::cerr << "Error: Invalid logging interval in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
            logging_interval = DEFAULT_LOGGING_INTERVAL;
        }
    } else {
        std::cerr << "Error: Invalid logging interval in config.xml (non-numeric value). Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n" << std::flush;
        logging_interval = DEFAULT_LOGGING_INTERVAL;
    }
}

/**
 * @brief Periodically broadcasts system statistics to all connected WebSocket clients.
 * @details Runs in a loop, sending the latest boot count and uptime at configured intervals.
 */
void broadcastStats()
{
    while (true)
    {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients)
            {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnected_clients.push_back(client);
                }
            }

            for (const auto &client : disconnected_clients)
            {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(std::max(1,logging_interval)));
    }
}

void handleClient(ip::tcp::socket socket)
{
        try {
            auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
            ws->accept();
            if (!ws->is_open())
            return;

            boost::beast::flat_buffer buffer;
            boost::system::error_code ec;
            // Read initial client request
            ws->read(buffer, ec);
            if (ec) {
                if (ec == boost::beast::websocket::error::closed) {
                    std::cout << "Client disconnected: WebSocket closed\n";
                } else if (ec == boost::asio::error::eof) {
                    std::cout << "Client disconnected.\n";
                } else {
                    std::cerr << "Error reading from client: " << ec.message() << "\n";
                }
                return;
            }

        std::string client_message = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (client_message == "REQUEST_STATS") {
            std::cout << "Request received from client. Sending current stats...\n\n";
            json first_stat;
            first_stat["boot_count"] = boot_count.load();
            first_stat["uptime"] = getUptime();
            ws->write(net::buffer(first_stat.dump()), ec);
        }

        // Add client to active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        // Continuous reading for periodic updates
        while (ws->is_open()) {
            buffer.clear(); 
            buffer.consume(buffer.size());
            ws->read(buffer, ec);

            if (ec == websocket::error::closed) {
                break;  
            }
            if (ec) {
                std::cerr << "Error reading from WebSocket: " << ec.message() << "\n";
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }

    } catch (const std::exception &e) {
        std::cerr << "Client error: " << e.what() << "\n";
    } catch (...) {
        std::cerr << "Unknown client error.\n";
    }
}

int main(int argc, char* argv[])
{
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n\n";

    std::string ip_address = "0.0.0.0";
    int port = 9000;

    if (argc > 1) {
        ip_address = argv[1];
    }
    
    if (argc > 2) {
        try {
            port = std::stoi(argv[2]);
            if (port <= 0 || port > 65535) {
                throw std::out_of_range("Invalid port range");
            }
        } catch (...) {
            std::cerr << "Error: Invalid port argument. Using default port 9000.\n";
            port = 9000;
        }
    }

    std::cout << "Server running at http://" << ip_address << ":" << port << "...\n\n";

    loadConfig();
    boot_count.store(getBootCount());

    boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::make_address(ip_address), port);
    ip::tcp::acceptor acceptor(ioc, endpoint);

    std::thread logger(broadcastStats);
    logger.detach();

    while (true)
    {
        ip::tcp::socket socket(ioc);
        boost::system::error_code ec;
        acceptor.accept(socket, ec);
        if (!ec) {
            std::thread(handleClient, std::move(socket)).detach();
        } else {
            std::cerr << "Error accepting connection: " << ec.message() << "\n";
        }
    }

    return 0;
}
