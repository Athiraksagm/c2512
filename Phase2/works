#include "gtest/gtest.h"
#include "json.hpp"
#include "system_stats.h"  // Include the header where `boot_count` and `total_uptime` are declared
#include <fstream>
#include <iostream>
#include <atomic>
#include <sstream>

using json = nlohmann::json;

class SystemStatsTest : public ::testing::Test {
protected:
    void SetUp() override {
        boot_count.store(5);    // Mock boot count
        total_uptime.store(3600);  // Mock uptime (1 hour)
    }

    int mock_getBootCount() {
        return 5;  // Mocked boot count
    }

    void mock_saveBootCount(int count) {
        std::ofstream file("mock_boot_count.txt");
        file << count;
    }
};

// **TEST 1: Boot count retrieval**
TEST_F(SystemStatsTest, BootCountRetrieval) {
    boot_count.store(5);
    EXPECT_EQ(boot_count.load(), 5);
}

// **TEST 2: Uptime retrieval**
TEST_F(SystemStatsTest, UptimeRetrieval) {
    total_uptime.store(3600);
    EXPECT_EQ(total_uptime.load(), 3600);
}

// **TEST 3: Boot count file save**
TEST_F(SystemStatsTest, BootCountFileSave) {
    mock_saveBootCount(8);
    std::ifstream file("mock_boot_count.txt");
    int count;
    file >> count;
    EXPECT_EQ(count, 8);
}

// **TEST 4: JSON response format**
TEST_F(SystemStatsTest, JsonResponseFormat) {
    json response_json;
    response_json["boot_count"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();

    json expected_json = {{"boot_count", 5}, {"uptime", 3600}};
    EXPECT_EQ(response_json.dump(), expected_json.dump());
}

// **MAIN FUNCTION**
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}