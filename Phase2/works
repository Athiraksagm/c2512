1. client.cpp

#include <iostream>
#include <httplib.h>
#include <json.hpp>
#include <thread>
#include <chrono>
#include <fstream>
#include <ctime>

using json = nlohmann::json;


void saveStatsToCSV(const json &stats) 
{
    std::ofstream file("system_stats.csv", std::ios::app);
    if (!file.is_open()) {
        std::cerr << "Failed to open CSV file!" << std::endl;
        return;
    }

    // Write the header if the file is empty
    file.seekp(0, std::ios::end);
    if (file.tellp() == 0) {
        file << "Date,Time,Boot Count,Uptime (seconds)\n";
       
    }

    // Get the current time
    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);
    
    file << 1900 + local_time->tm_year << "-"
         << 1 + local_time->tm_mon << "-"
         << local_time->tm_mday << ","
         << local_time->tm_hour << ":"
         << local_time->tm_min << ":"
         << local_time->tm_sec << ","
         << stats.value("boot_count", 0) << ","  // Default boot_count to 0 if it's null
          << stats["uptime"].get<long>() << "\n";
   
    file.close();
}

// Function to request stats from the server periodically
void requestStats() {
    httplib::Client client("http://localhost:8080");

    while (true) {
        auto res = client.Get("/stats");

        if (res && res->status == 200) {
            json stats = json::parse(res->body);

            std::cout << "Received stats:\n";
            std::cout << "Boot Count: " << stats["boots"] << "\n"; // Fix: Correct key
            std::cout << "Uptime: " << stats["uptime"] << " seconds\n";
        } else {
            std::cout << "Failed to get stats from server.\n";
        }

        std::this_thread::sleep_for(std::chrono::seconds(10)); 
    }
}

int main() {
    std::cout << "Client is requesting stats from server...\n";
    requestStats();
    return 0;
}


2. server.cpp

#include "httplib.h"
#include "json.hpp"
#include <iostream>
#include <thread>
#include <chrono>
#include <atomic>
#include <fstream>
#include <sys/sysinfo.h>
#include <unistd.h>

using json = nlohmann::json;

// Global variables
std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);

// Function to read boot count from a file
int loadBootCount() {
    std::ifstream file("boot_count.txt");
    int count = 0;
    if (file.is_open()) {
        file >> count;
    }
    file.close();
    return count;
}

// Function to save boot count to a file
void saveBootCount(int count) {
    std::ofstream file("boot_count.txt");
    if (file.is_open()) {
        file << count;
    }
    file.close();
}


void saveStatsToCSV() 
{
    std::ofstream file;
    file.open("system_stats.csv", std::ios_base::app);  // Open the CSV file in append mode

    if (file.is_open()) {

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);
    
    file << 1900 + local_time->tm_year << "-"
         << 1 + local_time->tm_mon << "-"
         << local_time->tm_mday << ", "
         << local_time->tm_hour << ":"
         << local_time->tm_min << ":"
         << local_time->tm_sec << ", "
         << boot_count.load() << ", "  // Default boot_count to 0 if it's null
          << total_uptime.load() << "\n";
      std::cout << "Saved stats to CSV: Date = " << 1900 + local_time->tm_year << "-" 
      << 1 + local_time->tm_mon << "-"  << local_time->tm_mday << ", Time = " << local_time->tm_hour 
      << ":" << local_time->tm_min << ":" << local_time->tm_sec << ", Boot Count = " 
      << boot_count.load() << ", Uptime = " << total_uptime.load() << std::endl;

    } else {
        std::cerr << "Error opening CSV file!" << std::endl;
    }
    file.close();
}

// Function to get the system's uptime
void updateUptime() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        total_uptime.store(info.uptime);  // Update uptime (in seconds)
    }
    saveStatsToCSV();
}

// Server handler to send stats to the client
void handleClientRequest(const httplib::Request &req, httplib::Response &res) {
    updateUptime();  // Update uptime before responding

    json response_json;
    response_json["boots"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();

    res.set_header("Cache-Control", "no-store");
    res.set_content(response_json.dump(), "application/json");
}

int main() {
    // Load boot count once at startup
    int stored_boot_count = loadBootCount();
    boot_count.store(stored_boot_count + 1);
    saveBootCount(boot_count.load());

    // Initialize the CSV file with a header if it doesn't exist
    std::ifstream checkFile("system_stats.csv");
    if (!checkFile.is_open()) {
        std::ofstream file("system_stats.csv");
        if (file.is_open()) {
            file << " Date (YYYY-MM-DD), Time (HH-MM-SS), Boot Count, Uptime (seconds)" << std::endl;  // Write header to CSV file
            file.close();
        }
    }
    checkFile.close();

    std::cout << "Server running at http://localhost:8080...\n";

    httplib::Server server;
    server.Get("/stats", handleClientRequest);

    server.listen("localhost", 8080);
    return 0;
}



3. common cmake file outside src folder

cmake_minimum_required(VERSION 3.10)
project(SystemStatLogging)

set(CMAKE_CXX_STANDARD 14)

# Add paths for the includes and libraries
include_directories(include)
link_directories(${CMAKE_SOURCE_DIR}/lib)

# Add GTest
find_package(GTest REQUIRED)
include_directories(${GTEST_INCLUDE_DIRS})

# Add the server and client executables
add_executable(server src/server.cpp)
add_executable(client src/client.cpp)

# Add the tests
add_executable(test_system_stats test/test_system_stats.cpp)

# Link GTest with the tests
target_link_libraries(test_system_stats ${GTEST_LIBRARIES} pthread)

# Link server and client with necessary libraries
target_link_libraries(server pthread tinyxml2)
target_link_libraries(client pthread)

# Install CMake files
install(TARGETS server client DESTINATION bin)
