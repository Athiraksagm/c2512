#include "server.h"

int main(int argc, char* argv[]) {
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n\n";

    const std::string ip_address = "0.0.0.0";
    int request_port = 9000;
    int periodic_port = 9001;

    if (argc > 2) {
        try {
            request_port = std::stoi(argv[1]);
            periodic_port = std::stoi(argv[2]);

            if (request_port <= 0 || request_port > 65535 || periodic_port <= 0 || periodic_port > 65535) {
                throw std::out_of_range("Invalid port range");
            }
        } catch (...) {
            std::cerr << "Error: Invalid port arguments. Using default ports (9000 & 9001).\n";
            request_port = 9000;
            periodic_port = 9001;
        }
    }

    std::cout << "Server running...\n"
              << "Request handling port: " << request_port << "\n"
              << "Periodic update port: " << periodic_port << "\n\n";

    loadConfig();
    boot_count.store(getBootCount());

    std::thread request_thread(startRequestServer, ip_address, request_port);
    std::thread periodic_thread(startPeriodicServer, ip_address, periodic_port);

    request_thread.join();
    periodic_thread.join();

    return 0;
}






#ifndef SERVER_H
#define SERVER_H

#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include "json.hpp"
#include "tinyxml2.h"
#include <iostream>
#include <unordered_set>
#include <mutex>
#include <thread>
#include <sys/sysinfo.h>
#include <atomic>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

const int DEFAULT_LOGGING_INTERVAL = 10;
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = DEFAULT_LOGGING_INTERVAL;
io_context ioc;

/* Function declarations */
int getBootCount();
long getUptime();
void loadConfig();
void startRequestServer(const std::string& ip, int port);
void startPeriodicServer(const std::string& ip, int port);

void startRequestServer(const std::string& ip, int port) {
    boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::make_address(ip), port);
    ip::tcp::acceptor acceptor(ioc, endpoint);

    while (true) {
        ip::tcp::socket socket(ioc);
        boost::system::error_code ec;
        acceptor.accept(socket, ec);
        if (!ec) {
            std::thread(handleClient, std::move(socket)).detach();
        } else {
            std::cerr << "Error accepting client request: " << ec.message() << "\n";
        }
    }
}

void startPeriodicServer(const std::string& ip, int port) {
    boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::make_address(ip), port);
    ip::tcp::acceptor acceptor(ioc, endpoint);

    while (true) {
        ip::tcp::socket socket(ioc);
        boost::system::error_code ec;
        acceptor.accept(socket, ec);
        if (!ec) {
            auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
            ws->accept();
            {
                std::lock_guard<std::mutex> lock(clients_mutex);
                clients.insert(ws);
            }
        }
    }
}

void broadcastStats() {
    while (true) {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients) {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    disconnected_clients.push_back(client);
                }
            }

            for (const auto &client : disconnected_clients) {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(std::max(1, logging_interval)));
    }
}

#endif





#include "client.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;

std::shared_ptr<websocket::stream<ip::tcp::socket>> ws_request;
std::shared_ptr<websocket::stream<ip::tcp::socket>> ws_periodic;
std::atomic<bool> stopClient(false);

void connectToRequestServer(const std::string& host, int port) {
    boost::asio::io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve(host, std::to_string(port));

    ws_request = std::make_shared<websocket::stream<ip::tcp::socket>>(ioc);
    boost::asio::connect(ws_request->next_layer(), endpoints);
    ws_request->handshake(host, "/");

    std::cout << "Sending REQUEST_STATS to server...\n\n";
    ws_request->write(net::buffer(std::string("REQUEST_STATS")));

    boost::beast::flat_buffer buffer;
    ws_request->read(buffer);
    std::string data = boost::beast::buffers_to_string(buffer.data());
    json stats = json::parse(data);

    std::cout << "[Received Stats] Boot Count: " << stats["boot_count"]
              << ", Uptime: " << stats["uptime"] << " seconds\n";
}

void connectToPeriodicServer(const std::string& host, int port) {
    boost::asio::io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve(host, std::to_string(port));

    ws_periodic = std::make_shared<websocket::stream<ip::tcp::socket>>(ioc);
    boost::asio::connect(ws_periodic->next_layer(), endpoints);
    ws_periodic->handshake(host, "/");

    boost::beast::flat_buffer buffer;
    while (!stopClient) {
        ws_periodic->read(buffer);
        std::string data = boost::beast::buffers_to_string(buffer.data());
        json periodicStats = json::parse(data);

        std::cout << "[Periodic Update] Boot Count: " << periodicStats["boot_count"]
                  << ", Uptime: " << periodicStats["uptime"] << " seconds\n";
        buffer.consume(buffer.size());
    }
}

int main(int argc, char* argv[]) {
    signal(SIGINT, [](int) {
        stopClient = true;
        ws_request.reset();
        ws_periodic.reset();
        exit(0);
    });

    if (argc < 4) {
        std::cerr << "Usage: " << argv[0] << " <server_ip> <request_port> <periodic_port>\n";
        return 1;
    }

    std::string host = argv[1];
    int request_port = std::stoi(argv[2]);
    int periodic_port = std::stoi(argv[3]);

    std::thread request_thread(connectToRequestServer, host, request_port);
    std::thread periodic_thread(connectToPeriodicServer, host, periodic_port);

    request_thread.join();
    periodic_thread.join();

    return 0;
}