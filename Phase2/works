I'll break your client and server code into modular components with separate header (.h) and implementation (.cpp) files for better readability and maintainability. Here’s how the directory structure will look:

/project
│── /client
│   ├── client.cpp
│   ├── ClientHandler.h
│   ├── ClientHandler.cpp
│   ├── Utils.h
│   ├── Utils.cpp
│── /server
│   ├── server.cpp
│   ├── ServerHandler.h
│   ├── ServerHandler.cpp
│   ├── Utils.h
│   ├── Utils.cpp
│── CMakeLists.txt

Client Code

ClientHandler.h

#ifndef CLIENT_HANDLER_H
#define CLIENT_HANDLER_H

#include <httplib.h>
#include <json.hpp>
#include <iostream>
#include <thread>
#include <chrono>
#include "Utils.h"

class ClientHandler {
public:
    void requestStats();
};

#endif // CLIENT_HANDLER_H

ClientHandler.cpp

#include "ClientHandler.h"

using json = nlohmann::json;

void ClientHandler::requestStats() {
    httplib::Client client("http://localhost:8080");

    while (true) {
        auto res = client.Get("/stats");

        if (res && res->status == 200) {
            json stats = json::parse(res->body);
            std::cout << "Received stats:\n";
            std::cout << "Boot Count: " << stats["boots"] << "\n";
            std::cout << "Uptime: " << stats["uptime"] << " seconds\n";
            saveStatsToCSV(stats);
        } else {
            std::cerr << "Failed to get stats from server.\n";
        }

        std::this_thread::sleep_for(std::chrono::seconds(10));
    }
}

Utils.h

#ifndef UTILS_H
#define UTILS_H

#include <json.hpp>

void saveStatsToCSV(const nlohmann::json &stats);

#endif // UTILS_H

Utils.cpp

#include "Utils.h"
#include <fstream>
#include <iostream>
#include <ctime>

void saveStatsToCSV(const nlohmann::json &stats) {
    std::ofstream file("system_stats.csv", std::ios::app);
    if (!file.is_open()) {
        std::cerr << "Failed to open CSV file!" << std::endl;
        return;
    }

    file.seekp(0, std::ios::end);
    if (file.tellp() == 0) {
        file << "Date,Time,Boot Count,Uptime (seconds)\n";
    }

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);

    file << 1900 + local_time->tm_year << "-"
         << 1 + local_time->tm_mon << "-"
         << local_time->tm_mday << ","
         << local_time->tm_hour << ":"
         << local_time->tm_min << ":"
         << local_time->tm_sec << ","
         << stats.value("boots", 0) << ","
         << stats["uptime"].get<long>() << "\n";

    file.close();
}

client.cpp

#include "ClientHandler.h"

int main() {
    std::cout << "Client is requesting stats from server...\n";
    ClientHandler client;
    client.requestStats();
    return 0;
}


---

Server Code

ServerHandler.h

#ifndef SERVER_HANDLER_H
#define SERVER_HANDLER_H

#include <httplib.h>
#include <atomic>

class ServerHandler {
public:
    void startServer();
};

#endif // SERVER_HANDLER_H

ServerHandler.cpp

#include "ServerHandler.h"
#include "Utils.h"
#include <iostream>
#include <thread>

std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);

void handleClientRequest(const httplib::Request &req, httplib::Response &res) {
    updateSystemStats(boot_count, total_uptime);

    nlohmann::json response_json;
    response_json["boots"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();

    res.set_header("Cache-Control", "no-store");
    res.set_content(response_json.dump(), "application/json");
}

void sendPeriodicUpdates() {
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(10));
        updateSystemStats(boot_count, total_uptime);
    }
}

void ServerHandler::startServer() {
    boot_count.store(loadBootCount() + 1);
    saveBootCount(boot_count.load());

    std::cout << "Server running at http://localhost:8080...\n";

    httplib::Server server;
    server.Get("/stats", handleClientRequest);

    std::thread update_thread(sendPeriodicUpdates);
    server.listen("localhost", 8080);

    update_thread.join();
}

Utils.h

#ifndef SERVER_UTILS_H
#define SERVER_UTILS_H

#include <atomic>

int loadBootCount();
void saveBootCount(int count);
void updateSystemStats(std::atomic<int> &boot_count, std::atomic<long> &total_uptime);
void saveStatsToCSV();

#endif // SERVER_UTILS_H

Utils.cpp

#include "Utils.h"
#include <fstream>
#include <iostream>
#include <ctime>
#include <sys/sysinfo.h>

int loadBootCount() {
    std::ifstream file("boot_count.txt");
    int count = 0;
    if (file.is_open()) {
        file >> count;
    }
    file.close();
    return count;
}

void saveBootCount(int count) {
    std::ofstream file("boot_count.txt");
    if (file.is_open()) {
        file << count;
    }
    file.close();
}

void updateSystemStats(std::atomic<int> &boot_count, std::atomic<long> &total_uptime) {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        total_uptime.store(info.uptime);
    }
    boot_count.store(loadBootCount() + 1);
    saveBootCount(boot_count.load());
    saveStatsToCSV();
}

void saveStatsToCSV() {
    std::ofstream file("system_stats.csv", std::ios::app);
    if (!file.is_open()) {
        std::cerr << "Error opening CSV file!" << std::endl;
        return;
    }

    std::time_t now = std::time(nullptr);
    std::tm *local_time = std::localtime(&now);

    file << 1900 + local_time->tm_year << "-"
         << 1 + local_time->tm_mon << "-"
         << local_time->tm_mday << ","
         << local_time->tm_hour << ":"
         << local_time->tm_min << ":"
         << local_time->tm_sec << ","
         << loadBootCount() << ","
         << total_uptime.load() << "\n";

    file.close();
}

server.cpp

#include "ServerHandler.h"

int main() {
    ServerHandler server;
    server.startServer();
    return 0;
}


---

CMakeLists.txt

cmake_minimum_required(VERSION 3.10)
project(SystemStats)

set(CMAKE_CXX_STANDARD 14)

add_executable(client client/client.cpp client/ClientHandler.cpp client/Utils.cpp)
target_link_libraries(client pthread)

add_executable(server server/server.cpp server/ServerHandler.cpp server/Utils.cpp)
target_link_libraries(server pthread)

This modularization improves maintainability and security by encapsulating functionality into reusable classes and functions. Let me know if you need any adjustments!

