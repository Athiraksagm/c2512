To modularize your server.cpp and client.cpp, you should extract reusable functionalities into separate .cpp and .h files and place them in appropriate locations within your project structure.

Proposed Modularized Structure

SystemStatLoggingMicroservice/
│── include/
│   ├── httplib.h
│   ├── json.hpp
│   ├── system_stats.h       <-- [NEW] Header for system statistics functions
│   ├── server_utils.h       <-- [NEW] Header for server-specific utilities
│   ├── client_utils.h       <-- [NEW] Header for client-specific utilities
│── source/
│   ├── server.cpp
│   ├── client.cpp
│   ├── system_stats.cpp     <-- [NEW] Implementation of system statistics functions
│   ├── server_utils.cpp     <-- [NEW] Implementation of server utilities
│   ├── client_utils.cpp     <-- [NEW] Implementation of client utilities
│── test/
│   ├── test_system_stats.cpp


---

Modularized Code Breakdown

1. Extract System Statistics Logic

Move getBootCount(), getSystemBootTime(), updateUptime(), etc., to system_stats.cpp with declarations in system_stats.h.


2. Extract Server-Specific Logic

Move saveLastBootTime(), saveStatsToCSV(), handleClientRequest() to server_utils.cpp, declared in server_utils.h.


3. Extract Client-Specific Logic

Move requestStats() to client_utils.cpp, declared in client_utils.h.



---

Implementation Details

include/system_stats.h

#ifndef SYSTEM_STATS_H
#define SYSTEM_STATS_H

#include <atomic>

int getBootCount();
long getSystemBootTime();
void updateUptime();
extern std::atomic<int> boot_count;
extern std::atomic<long> total_uptime;

#endif

source/system_stats.cpp

#include "system_stats.h"
#include <array>
#include <memory>
#include <fstream>
#include <iostream>
#include <sys/sysinfo.h>

std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);

int getBootCount() {
    std::array<char, 128> buffer;
    std::string result;
    std::shared_ptr<FILE> pipe(popen("last reboot | wc -l", "r"), pclose);
    if (!pipe) {
        std::cerr << "Failed to run command." << std::endl;
        return -1;
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return std::stoi(result);
}

long getSystemBootTime() {
    std::ifstream stat_file("/proc/stat");
    std::string line;
    if (stat_file.is_open()) {
        std::getline(stat_file, line);
        std::istringstream ss(line);
        std::string label;
        long boot_time = 0;
        if (ss >> label >> boot_time) {
            return boot_time;
        }
    }
    std::cerr << "Error reading system boot time from /proc/stat!" << std::endl;
    return 0;
}

void updateUptime() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        total_uptime.store(info.uptime);
    }
}


---

include/server_utils.h

#ifndef SERVER_UTILS_H
#define SERVER_UTILS_H

#include "httplib.h"

void saveLastBootTime(long boot_time);
void saveStatsToCSV();
void handleClientRequest(const httplib::Request &req, httplib::Response &res);

#endif

source/server_utils.cpp

#include "server_utils.h"
#include "system_stats.h"
#include "json.hpp"
#include <fstream>
#include <iostream>
#include <ctime>

using json = nlohmann::json;

void saveLastBootTime(long boot_time) {
    std::ofstream file("../last_boot_time.txt");
    if (file.is_open()) {
        file << boot_time;
        file.close();
    }
}

void saveStatsToCSV() {
    std::ofstream file("../system_stats.csv", std::ios_base::app);
    if (file.is_open()) {
        std::time_t now = std::time(nullptr);
        std::tm *local_time = std::localtime(&now);
        file << 1900 + local_time->tm_year << "-"
             << 1 + local_time->tm_mon << "-"
             << local_time->tm_mday << ", "
             << local_time->tm_hour << ":"
             << local_time->tm_min << ":"
             << local_time->tm_sec << ", "
             << boot_count.load() << ", "
             << total_uptime.load() << "\n";
    } else {
        std::cerr << "Error opening CSV file!" << std::endl;
    }
}

void handleClientRequest(const httplib::Request &req, httplib::Response &res) {
    updateUptime();
    json response_json;
    response_json["boot_count"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();
    saveStatsToCSV();
    std::cout << "[Request Received] Boot Count: " << boot_count.load() << ", Uptime: " << total_uptime.load() << " seconds\n";
    res.set_header("Cache-Control", "no-store");
    res.set_content(response_json.dump(), "application/json");
}


---

include/client_utils.h

#ifndef CLIENT_UTILS_H
#define CLIENT_UTILS_H

void requestStats();

#endif

source/client_utils.cpp

#include "client_utils.h"
#include <httplib.h>
#include <json.hpp>
#include <iostream>
#include <thread>
#include <chrono>

using json = nlohmann::json;

void requestStats() {
    httplib::Client client("http://localhost:8080");
    while (true) {
        auto res = client.Get("/stats");
        if (res && res->status == 200) {
            json stats = json::parse(res->body);
            std::cout << "Received stats:\n";
            std::cout << "Boot Count: " << stats["boot_count"] << "\n";
            std::cout << "Uptime: " << stats["uptime"] << " seconds\n";
        } else {
            std::cerr << "Failed to get stats from server.\n";
        }
        std::this_thread::sleep_for(std::chrono::seconds(10));
    }
}


---

Updated server.cpp

#include "httplib.h"
#include "server_utils.h"
#include "system_stats.h"
#include <iostream>

int main() {
    boot_count.store(getBootCount());
    
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n";
    std::cout << "Boot Count: " << boot_count.load() << "\n";
    std::cout << "Server running at http://localhost:8080...\n";

    httplib::Server server;
    server.Get("/stats", handleClientRequest);
    server.listen("localhost", 8080);

    return 0;
}


---

Updated client.cpp

#include "client_utils.h"
#include <iostream>

int main() {
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING CLIENT\n"
              << "=============================\n";
    std::cout << "Client is requesting stats from server...\n";
    requestStats();
    return 0;
}


---

Benefits of This Modularization

1. Better Readability – Each module has a clear purpose.


2. Code Reusability – Server utilities and system stats functions can be reused in other programs.


3. Easier Maintenance – Changes to system stats logic won't affect server/client code directly.



Would you like any further refinements?

