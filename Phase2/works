void handleClient(ip::tcp::socket socket) {
    try {
        websocket::stream<ip::tcp::socket> ws(std::move(socket));
        ws.accept();

        boost::beast::flat_buffer buffer;
        ws.read(buffer);
        std::string request = boost::beast::buffers_to_string(buffer.data());

        if (request == "REQUEST_STATS") {
            json stats;
            stats["boot_count"] = boot_count.load();
            stats["uptime"] = getUptime();
            std::string response = stats.dump();

            ws.write(net::buffer(response));
        } else {
            ws.write(net::buffer("Invalid request"));
        }
    } catch (const std::exception &e) {
        std::cerr << "Error handling client: " << e.what() << "\n";
    }
}