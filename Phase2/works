#include "server.h"

Server::Server() : boot_count(0), logging_interval(10) {
    loadConfig();
    boot_count.store(getBootCount());
}

void Server::loadConfig() {
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS) {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        logging_interval = 10; // Default
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root) {
        std::cerr << "Error: Missing <config> in config.xml. Using default.\n";
        return;
    }
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element) {
        std::cerr << "Error: <logging_interval> missing in config.xml. Using default.\n";
        return;
    }
    const char *interval_text = interval_element->GetText();
    if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit)) {
        try {
            logging_interval = std::stoi(interval_text);
            std::cerr << "Logging interval set to: " << logging_interval << "s\n";
        } catch (...) {
            std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
            logging_interval = 10;
        }
    } else {
        std::cerr << "Error: Invalid logging interval format. Using default.\n";
        logging_interval = 10;
    }
}

int Server::getBootCount() {
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute boot count command.\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        int count = std::stoi(buffer);
        return (count > 0) ? count : -1;
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

long Server::getUptime() {
    struct sysinfo info;
    if (sysinfo(&info) != 0) {
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

void Server::broadcastStats() {
    json stats;
    stats["boot_count"] = boot_count.load();
    stats["uptime"] = getUptime();
    std::string message = stats.dump();

    std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto &client : clients) {
            boost::system::error_code ec;
            client->write(net::buffer(message), ec);
            if (ec) disconnected_clients.push_back(client);
        }
        for (const auto &client : disconnected_clients) {
            clients.erase(client);
        }
    }
}

void Server::sendPeriodicStats() {
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(logging_interval));
        broadcastStats();
    }
}

void Server::startRESTServer(int restPort) {
    httplib::Server server;
    server.Get("/fetchSystemStats", [this](const httplib::Request &, httplib::Response &res) {
        json response;
        response["boot_count"] = boot_count.load();
        response["uptime"] = getUptime();
        res.set_content(response.dump(), "application/json");
    });

    std::cout << "REST API Server running on port " << restPort << "\n";
    server.listen("0.0.0.0", restPort);
}

void Server::startWebSocketServer(int wsPort) {
    ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), wsPort));
    std::cout << "WebSocket Server running on port " << wsPort << "\n";

    while (true) {
        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
        std::thread(&Server::handleWebSocketClient, this, std::move(socket)).detach();
    }
}

void Server::handleWebSocketClient(ip::tcp::socket socket) {
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;
        while (ws->is_open()) {
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) break;
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }
    } catch (const std::exception &e) {
        std::cerr << "WebSocket client error: " << e.what() << "\n";
    }
}








#include <gtest/gtest.h>
#include "server.h"

TEST(ServerTest, LoadConfig_Default) {
    Server server;
    EXPECT_GE(server.getLoggingInterval(), 1);
}

TEST(ServerTest, GetBootCount_Valid) {
    Server server;
    int boot_count = server.getBootCountValue();
    EXPECT_GE(boot_count, 0);
}

TEST(ServerTest, GetBootCount_Failure) {
    Server server;
    FILE *pipe = popen("invalid_command", "r");
    if (!pipe) {
        int result = server.getBootCountValue();
        EXPECT_EQ(result, -1);
    }
}

TEST(ServerTest, GetUptime_Valid) {
    Server server;
    long uptime = server.getUptimeValue();
    EXPECT_GT(uptime, 0);
}

TEST(ServerTest, GetUptime_Failure) {
    Server server;
    long result = server.getUptimeValue();
    EXPECT_NE(result, -1);
}

TEST(ServerTest, BroadcastStats_NoClients) {
    Server server;
    EXPECT_NO_THROW(server.broadcastStats());
}

TEST(ServerTest, StartRESTServer) {
    Server server;
    EXPECT_NO_THROW({
        std::thread rest_thread(&Server::startRESTServer, &server, 8080);
        std::this_thread::sleep_for(std::chrono::seconds(1));
        rest_thread.detach();
    });
}

TEST(ServerTest, StartWebSocketServer) {
    Server server;
    EXPECT_NO_THROW({
        std::thread ws_thread(&Server::startWebSocketServer, &server, 9001);
        std::this_thread::sleep_for(std::chrono::seconds(1));
        ws_thread.detach();
    });
}

TEST(ServerTest, HandleWebSocketClient) {
    Server server;
    EXPECT_NO_THROW({
        std::thread ws_thread(&Server::startWebSocketServer, &server, 9001);
        std::this_thread::sleep_for(std::chrono::seconds(1));
        ws_thread.detach();
    });
}

TEST(ServerTest, SendPeriodicStats) {
    Server server;
    EXPECT_NO_THROW(server.sendPeriodicStats());
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}