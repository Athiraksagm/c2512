#include <iostream>
#include <fstream>
#include <string>
#include <Poco/Net/HTTPServer.h>
#include <Poco/Net/HTTPRequestHandlerFactory.h>
#include <Poco/Net/HTTPServerParams.h>
#include <Poco/Thread.h>
#include <Poco/Net/HTTPServerRequest.h>
#include <Poco/Net/HTTPServerResponse.h>
#include <sys/sysinfo.h>
#include <ctime>

const std::string BOOT_COUNT_FILE = "boot_count.txt";

// Function to get system boot count
int getBootCount() {
    std::ifstream file(BOOT_COUNT_FILE);
    int bootCount = 0;
    
    if (file.is_open()) {
        file >> bootCount; // Read current boot count from the file
        file.close();
    }
    
    return bootCount;
}

// Function to update boot count
void updateBootCount(int bootCount) {
    std::ofstream file(BOOT_COUNT_FILE);
    if (file.is_open()) {
        file << bootCount; // Write the updated boot count to the file
        file.close();
    }
}

// Function to get system uptime
long getUptime() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        return info.uptime;
    }
    return 0;
}

// Request handler for the server
class RequestHandler : public Poco::Net::HTTPRequestHandler {
public:
    void handleRequest(Poco::Net::HTTPServerRequest& request, Poco::Net::HTTPServerResponse& response) override {
        // Set the content type of the response to JSON
        response.setContentType("application/json");
        
        // Create a response stream
        std::ostream& ostr = response.send();
        
        // Get boot count and uptime
        int bootCount = getBootCount();
        long uptime = getUptime();

        // Create JSON response
        ostr << "{"
             << "\"boot_count\": " << bootCount << ", "
             << "\"uptime\": " << uptime
             << "}";
    }
};

// Request handler factory
class RequestHandlerFactory : public Poco::Net::HTTPRequestHandlerFactory {
public:
    Poco::Net::HTTPRequestHandler* createRequestHandler(const Poco::Net::HTTPServerRequest& request) override {
        return new RequestHandler();  // Return an instance of RequestHandler
    }
};

int main() {
    // Step 1: Check for boot count file and update boot count
    int bootCount = getBootCount();
    bootCount++;
    updateBootCount(bootCount);

    std::cout << "=============================" << std::endl;
    std::cout << " SYSTEM STAT LOGGING SERVER " << std::endl;
    std::cout << "=============================" << std::endl;
    std::cout << "Boot Count: " << bootCount << std::endl;
    
    // Step 2: Start the HTTP server
    Poco::Net::HTTPServerParams* pParams = new Poco::Net::HTTPServerParams;
    Poco::Net::HTTPServer srv(new RequestHandlerFactory(), Poco::Net::ServerSocket(8080), pParams);
    srv.start();
    
    std::cout << "Server running at http://localhost:8080..." << std::endl;
    std::cout << "Waiting for client requests..." << std::endl;
    
    // Keep the server running
    Poco::Thread::sleep(Poco::Timespan::SECONDS * 3600);
    
    return 0;
}