#include <gtest/gtest.h>
#include "../include/server.h"
#include <fstream>
#include <thread>

// Mock functions to avoid running actual system commands
int mockBootCount = 5;
long mockUptime = 3600;

int getBootCount() { return mockBootCount; }
long getUptime() { return mockUptime; }

// Test for boot count retrieval
TEST(SystemStatsTest, BootCountRetrieval) {
    EXPECT_EQ(getBootCount(), 5);
}

// Test for uptime retrieval
TEST(SystemStatsTest, UptimeRetrieval) {
    EXPECT_EQ(getUptime(), 3600);
}

// Test configuration loading from XML
TEST(SystemStatsTest, LoadConfig) {
    // Create a temporary config.xml
    std::ofstream configFile("../config.xml");
    configFile << "<config><logging_interval>5</logging_interval></config>";
    configFile.close();

    loadConfig();
    EXPECT_EQ(logging_interval, 5);
}

// Mock WebSocket client connection test
TEST(ServerTest, ClientConnection) {
    std::thread serverThread([]() {
        int port = 9000;
        io_context ioc;
        ip::tcp::acceptor acceptor(ioc, ip::tcp::endpoint(ip::tcp::v4(), port));

        ip::tcp::socket socket(ioc);
        acceptor.accept(socket);
    });

    std::this_thread::sleep_for(std::chrono::seconds(1));

    io_context ioc;
    ip::tcp::resolver resolver(ioc);
    auto endpoints = resolver.resolve("localhost", "9000");

    websocket::stream<ip::tcp::socket> ws(ioc);
    boost::asio::connect(ws.next_layer(), endpoints);
    ws.handshake("localhost", "/");

    EXPECT_TRUE(ws.is_open());

    ws.close(websocket::close_code::normal);
    serverThread.detach();
}

// Main function to run tests
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}