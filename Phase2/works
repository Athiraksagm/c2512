//SERVER

#include "httplib.h"
#include "json.hpp"
#include <iostream>
#include <fstream>
#include <atomic>
#include <sys/sysinfo.h>
#include <unistd.h>
#include <array>
#include <memory>

using json = nlohmann::json;

std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);

// Function to get the system's boot count from `last reboot`
int getBootCount()
{
    std::array<char, 128> buffer;
    std::string result;
    std::shared_ptr<FILE> pipe(popen("last reboot | wc -l", "r"), pclose);
    if (!pipe) {
        std::cerr << "Failed to run command." << std::endl;
        return -1;
    }
    
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }

    return std::stoi(result);  // Convert output to integer
}

// Function to get the system's boot time as a Unix timestamp
long getSystemBootTime() 
{
    std::ifstream stat_file("/proc/stat");
    std::string line;
    
    if (stat_file.is_open()) {
    
        std::getline(stat_file, line);
        std::istringstream ss(line);
        std::string label;
        long boot_time = 0;

        if (ss >> label >> boot_time) {
            return boot_time; 
        }
    }
    std::cerr << "Error reading system boot time from /proc/stat!" << std::endl;
    return 0;
}

// Save system stats to CSV
void saveStatsToCSV() 
{
    std::ofstream file("../system_stats.csv", std::ios_base::app);
    if (file.is_open()) {
        std::time_t now = std::time(nullptr);
        std::tm *local_time = std::localtime(&now);

        // Append stats to CSV: Date, Time, Boot Count, Uptime (seconds)
        file << 1900 + local_time->tm_year << "-"
             << 1 + local_time->tm_mon << "-"
             << local_time->tm_mday << ", "
             << local_time->tm_hour << ":"
             << local_time->tm_min << ":"
             << local_time->tm_sec << ", "
             << boot_count.load() << ", "
             << total_uptime.load() << "\n";
    } else {
        std::cerr << "Error opening CSV file!" << std::endl;
    }
}

// Update the system uptime
void updateUptime() 
{
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        total_uptime.store(info.uptime);  // Store uptime in atomic variable
    }
}

// Handle the client request to fetch stats
void handleClientRequest(const httplib::Request &req, httplib::Response &res) 
{
    updateUptime();  

    json response_json;
    response_json["boot_count"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();

    saveStatsToCSV(); 

    std::cout << "[Request Received] Boot Count: " << boot_count.load() << ", Uptime: " << total_uptime.load() << " seconds\n";

    res.set_header("Cache-Control", "no-store");
    res.set_content(response_json.dump(), "application/json");
}

int main() 
{
    // Load the boot count from the system
    boot_count.store(getBootCount());

    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n";

    std::cout << "Boot Count: " << boot_count.load() << "\n";
    std::cout << "Server running at http://localhost:8080...\n";
    std::cout << "Waiting for client requests...\n";

    // Ensure system_stats.csv file exists and has headers if it's the first run
    std::ifstream checkFile("../system_stats.csv");
    if (!checkFile.is_open()) {
        std::ofstream file("../system_stats.csv");
        if (file.is_open()) {
            file << "Date (YYYY-MM-DD), Time (HH:MM:SS), Boot Count, Uptime (seconds)\n";
            file.close();
        }
    }
    checkFile.close();

    // Start the server and listen for requests
    httplib::Server server;
    server.Get("/stats", handleClientRequest);
    server.listen("localhost", 8080);

    return 0;
}

//CLIENT

#include <iostream>
#include <httplib.h>
#include <json.hpp>
#include <thread>
#include <chrono>

using json = nlohmann::json;

//Function to continuously request system statistics from the server
void requestStats() 
{
    httplib::Client client("http://localhost:8080");

    while (true) {
        auto res = client.Get("/stats");

        if (res && res->status == 200) {
            json stats = json::parse(res->body);

            std::cout << "Received stats:\n";
            std::cout << "Boot Count: " << stats["boot_count"] << "\n";
            std::cout << "Uptime: " << stats["uptime"] << " seconds\n";
        } else {
            std::cerr << "Failed to get stats from server.\n";
        }

        std::this_thread::sleep_for(std::chrono::seconds(10));
    }
}

//Main function to initialize the client and start requesting stats 
int main() 
{
    std::cout << "=============================\n" << " SYSTEM STAT LOGGING CLIENT\n" << "=============================\n";
    std::cout << "Client is requesting stats from server...\n";
    requestStats();
    return 0;
}

//TEST_SYSTEM_STATS.CPP

#include "gtest/gtest.h"
#include "json.hpp"
#include <fstream>
#include <iostream>
#include <atomic>
#include <sys/sysinfo.h>
#include <unistd.h>
#include <sstream>
#include <array>
#include <memory>

using json = nlohmann::json;

std::atomic<int> boot_count(0);
std::atomic<long> total_uptime(0);

// Mock function to get boot count using shell command
int mock_getBootCount() {
    return 5;  // Mocked boot count
}

// Mock sysinfo function
struct sysinfo mock_sysinfo;
int sysinfo(struct sysinfo *info) {
    info->uptime = 3600;  // Mock uptime: 3600 seconds (1 hour)
    return 0;  // Mock success
}

// Mock function to save boot count (no actual file writes)
void mock_saveBootCount(int count) {
    std::ofstream file("mock_boot_count.txt");
    file << count;
}

// Function to update system stats (uses mock sysinfo)
void updateSystemStats() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        total_uptime.store(info.uptime);  // Mock uptime in seconds
    }

    boot_count.store(mock_getBootCount());  // Use mocked boot count
}

// **TEST 1: Boot count retrieval**
TEST(SystemStatsTest, BootCountRetrieval) {
    boot_count.store(mock_getBootCount());
    EXPECT_EQ(boot_count.load(), 5);  // Should match the mocked value
}

// **TEST 2: Uptime retrieval**
TEST(SystemStatsTest, UptimeRetrieval) {
    total_uptime.store(0);
    updateSystemStats();
    EXPECT_EQ(total_uptime.load(), 3600);  // Should be 3600 seconds
}

// **TEST 3: Boot count file save**
TEST(SystemStatsTest, BootCountFileSave) {
    mock_saveBootCount(8);
    std::ifstream file("mock_boot_count.txt");
    int count;
    file >> count;
    EXPECT_EQ(count, 8);  // The saved count should be 8
}

// **TEST 4: JSON response format**
TEST(SystemStatsTest, JsonResponseFormat) {
    json response_json;
    response_json["boot_count"] = boot_count.load();
    response_json["uptime"] = total_uptime.load();

    std::string expected_json = "{\"boot_count\":5,\"uptime\":3600}";
    EXPECT_EQ(response_json.dump(), expected_json);  // JSON should match expected format
}

// **MAIN FUNCTION**
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
