athira@INTVMLT2342:/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/build$ make
[ 50%] Building CXX object CMakeFiles/test_server.dir/test_server.cpp.o
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp: In member function ‘virtual void ServerTests_HandleClient_Test::TestBody()’:
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:281:5: error: ‘tcp’ has not been declared
  281 |     tcp::acceptor acceptor(ioc, tcp::endpoint(tcp::v4(), 8080));
      |     ^~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp: In lambda function:
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:285:9: error: ‘tcp’ has not been declared
  285 |         tcp::socket socket(ioc);
      |         ^~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:286:9: error: ‘acceptor’ was not declared in this scope; did you mean ‘accept4’?
  286 |         acceptor.accept(socket);
      |         ^~~~~~~~
      |         accept4
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:287:21: error: could not convert ‘& std::move<int (&)(int, int, int)>(socket)’ from ‘int (*)(int, int, int)’ to ‘boost::asio::ip::tcp::socket’ {aka ‘boost::asio::basic_stream_socket<boost::asio::ip::tcp>’}
  287 |         handleClient(std::move(socket));  // Testing the actual function
      |         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
      |                     |
      |                     int (*)(int, int, int)
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp: In member function ‘virtual void ServerTests_HandleClient_Test::TestBody()’:
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:293:23: error: ‘tcp’ was not declared in this scope; did you mean ‘boost::asio::ip::tcp’?
  293 |     websocket::stream<tcp::socket> ws(ioc);
      |                       ^~~
      |                       boost::asio::ip::tcp
In file included from /usr/include/boost/asio.hpp:121,
                 from /mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/../include/server.h:34,
                 from /mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:2:
/usr/include/boost/asio/ip/tcp.hpp:46:7: note: ‘boost::asio::ip::tcp’ declared here
   46 | class tcp
      |       ^~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:293:34: error: template argument 1 is invalid
  293 |     websocket::stream<tcp::socket> ws(ioc);
      |                                  ^
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:293:39: error: cannot convert ‘boost::asio::io_context’ to ‘int’ in initialization
  293 |     websocket::stream<tcp::socket> ws(ioc);
      |                                       ^~~
      |                                       |
      |                                       boost::asio::io_context
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:294:5: error: ‘tcp’ is not a class, namespace, or enumeration
  294 |     tcp::resolver resolver(ioc);
      |     ^~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:295:26: error: ‘resolver’ was not declared in this scope; did you mean ‘remove’?
  295 |     auto const results = resolver.resolve("127.0.0.1", "8080");
      |                          ^~~~~~~~
      |                          remove
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:296:16: error: request for member ‘next_layer’ in ‘ws’, which is of non-class type ‘int’
  296 |     connect(ws.next_layer(), results.begin(), results.end());
      |                ^~~~~~~~~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:297:8: error: request for member ‘handshake’ in ‘ws’, which is of non-class type ‘int’
  297 |     ws.handshake("127.0.0.1", "/");
      |        ^~~~~~~~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:300:8: error: request for member ‘write’ in ‘ws’, which is of non-class type ‘int’
  300 |     ws.write(net::buffer(std::string("REQUEST_STATS")));
      |        ^~~~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:302:8: error: request for member ‘read’ in ‘ws’, which is of non-class type ‘int’
  302 |     ws.read(buffer);
      |        ^~~~
/mnt/c/Users/2022004/Desktop/SystemStatLoggingMicroservice/server/test/test_server.cpp:313:8: error: request for member ‘close’ in ‘ws’, which is of non-class type ‘int’
  313 |     ws.close(websocket::close_code::normal);
      |        ^~~~~
make[2]: *** [CMakeFiles/test_server.dir/build.make:76: CMakeFiles/test_server.dir/test_server.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/test_server.dir/all] Error 2
make: *** [Makefile:101: all] Error 2



#ifndef SERVER_H
#define SERVER_H

#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include <boost/beast/websocket.hpp>
#include "json.hpp"
#include "tinyxml2.h"
#include <iostream>
#include <unordered_set>
#include <mutex>
#include <thread>
#include <sys/sysinfo.h>
#include <atomic>

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

const int DEFAULT_LOGGING_INTERVAL = 10;
std::atomic<int> boot_count(0);
 std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = DEFAULT_LOGGING_INTERVAL;
io_context ioc;

int getBootCount() {
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute system command for boot count.\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        int count = std::stoi(buffer);
        return (count > 0) ? count : -1;
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

long getUptime() {
    struct sysinfo info;
    if (sysinfo(&info) != 0) {
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

void loadConfig() {
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS) {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root) {
        std::cerr << "Error: <config> element missing in config.xml. Using default.\n";
        return;
    }
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element) {
        std::cerr << "Error: <logging_interval> element missing in config.xml. Using default.\n";
        return;
    }
    const char* interval_text = interval_element->GetText();
    if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit)) {
        try {
            logging_interval = std::stoi(interval_text);
            std::cerr << "Logging interval set to: " << logging_interval << "s\n";
        } catch (...) {
            std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
            logging_interval = DEFAULT_LOGGING_INTERVAL;
        }
    } else {
        std::cerr << "Error: Invalid logging interval in config.xml. Using default.\n";
        logging_interval = DEFAULT_LOGGING_INTERVAL;
    }
}

void broadcastStats() {
    while (true) {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients) {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnected_clients.push_back(client);
                }
            }

            for (const auto &client : disconnected_clients) {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(std::max(1, logging_interval)));
    }
}

void handleClient(ip::tcp::socket socket) {
    try {
        auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
        ws->accept();
        if (!ws->is_open()) return;

        boost::beast::flat_buffer buffer;
        boost::system::error_code ec;
        ws->read(buffer, ec);
        if (ec) {
            std::cerr << "Client disconnected: " << ec.message() << "\n";
            return;
        }

        std::string client_message = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (client_message == "REQUEST_STATS") {
            json first_stat;
            first_stat["boot_count"] = boot_count.load();
            first_stat["uptime"] = getUptime();
            ws->write(net::buffer(first_stat.dump()), ec);
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        while (ws->is_open()) {
            buffer.clear();
            buffer.consume(buffer.size());
            ws->read(buffer, ec);
            if (ec == websocket::error::closed) break;
            if (ec) {
                std::cerr << "Error reading from WebSocket: " << ec.message() << "\n";
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }

    } catch (const std::exception &e) {
        std::cerr << "Client error: " << e.what() << "\n";
    } catch (...) {
        std::cerr << "Unknown client error.\n";
    }
}

#endif
