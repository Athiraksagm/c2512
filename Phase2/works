1. server.h
cpp
Copy
Edit
#ifndef SERVER_H
#define SERVER_H

#include "httplib.h"
#include "json.hpp"
#include <string>
#include <fstream>
#include <chrono>
#include <mutex>

void start_server(int port);
int getSystemBootCount();
long getSystemUptime();
std::string getCurrentDateTime();

#endif // SERVER_H
2. server.cpp
cpp
Copy
Edit
#include "server.h"
#include <iostream>
#include <ctime>

std::mutex mtx;
int boot_count = 1; // Placeholder for boot count
long start_time = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());

int getSystemBootCount() {
    return boot_count;
}

long getSystemUptime() {
    return std::time(nullptr) - start_time;
}

std::string getCurrentDateTime() {
    auto now = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
    char buffer[80];
    struct tm timeinfo;
    localtime_r(&now, &timeinfo);
    strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", &timeinfo);
    return std::string(buffer);
}

void start_server(int port) {
    httplib::Server svr;

    svr.Get("/stats", [](const httplib::Request& req, httplib::Response& res) {
        // Create JSON response
        nlohmann::json json_response;
        json_response["boot_count"] = getSystemBootCount();
        json_response["uptime"] = getSystemUptime();
        json_response["timestamp"] = getCurrentDateTime();

        // Set JSON response content
        res.set_content(json_response.dump(), "application/json");
    });

    if (!svr.listen("0.0.0.0", port)) {
        std::cerr << "Failed to start server on port " << port << std::endl;
    } else {
        std::cout << "Server running on port " << port << "...\n";
    }
}

int main() {
    start_server(8081); // Port 8081
    return 0;
}
Client Side Code
The client will request system statistics from the server, parse the JSON response, and optionally log the data to a CSV file.

3. client.h
cpp
Copy
Edit
#ifndef CLIENT_H
#define CLIENT_H

#include <string>

void request_stats(const std::string& server_url, bool save_to_csv);

#endif // CLIENT_H
4. client.cpp
cpp
Copy
Edit
#include "client.h"
#include "httplib.h"
#include <iostream>
#include <fstream>
#include <nlohmann/json.hpp>

void request_stats(const std::string& server_url, bool save_to_csv) {
    httplib::Client cli(server_url.c_str(), 8081);  // Ensure correct port
    auto res = cli.Get("/stats");

    if (res && res->status == 200) {
        auto json_data = nlohmann::json::parse(res->body);
        std::cout << "Boot Count: " << json_data["boot_count"] << "\n";
        std::cout << "Uptime: " << json_data["uptime"] << " seconds\n";
        std::cout << "Timestamp: " << json_data["timestamp"] << "\n";

        // Save to CSV if requested
        if (save_to_csv) {
            std::ofstream file("system_stats.csv", std::ios::app);
            if (file.is_open()) {
                file << json_data["timestamp"] << ","
                     << json_data["boot_count"] << ","
                     << json_data["uptime"] << "\n";
                file.close();
            }
        }
    } else {
        std::cerr << "Failed to get stats from server!\n";
    }
}

int main(int argc, char* argv[]) {
    bool save_to_csv = (argc > 1 && std::string(argv[1]) == "--save");
    request_stats("http://127.0.0.1", save_to_csv);
    return 0;
}
