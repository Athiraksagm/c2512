-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Boost: /usr/lib/x86_64-linux-gnu/cmake/Boost-1.74.0/BoostConfig.cmake (found version "1.74.0") found components: system filesystem
-- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found version "3.10.5")
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE
-- Configuring done
CMake Error at CMakeLists.txt:10 (add_executable):
  Cannot find source file:

    StatisticsTracker.cpp

  Tried extensions .c .C .c++ .cc .cpp .cxx .cu .mpp .m .M .mm .ixx .cppm .h
  .hh .h++ .hm .hpp .hxx .in .txx .f .F .for .f77 .f90 .f95 .f03 .hip .ispc


CMake Error at CMakeLists.txt:10 (add_executable):
  No SOURCES given to target: server


CMake Generate step failed.  Build files cannot be regenerated correctly.











Give me the c++ code for my project,the requirements are as follows.

1.System Stat Logging Microservice
2.1 Introduction
The System Stat Logging Microservice tracks system boot count and total uptime over its lifetime. The server periodically sends system statistics to clients at a configurable interval.
2.2 Functional Requirements
2.2.1 Server Application
1.	Monitor the number of boots and total uptime of the system.
2.	Configurable interval for sending statistics (defined in an XML file).
3.	Client shall request the server using REST API.
4.	Respond to client requests with current statistics in JSON format.
5.	Send periodic updates to clients based on the configured interval.
6.	Handle multiple client requests concurrently.
2.2.2 Client Application
1.	Request system statistics from the server.
2.	Receive and parse JSON responses.
3.	Store system statistics in a CSV file when enabled via a command-line option.
4.	The CSV file should include date, time, number of boots, and total uptime with proper heading.
2.3 Non-Functional Requirements
1.	Implemented in C++14 or above.
2.	Separate projects for server and client, compiled using CMake.
3.	Unit tests (UT) for the server using GTest.
4.	Multi-threaded architecture to handle multiple client requests simultaneously.
________________________________________
3. Common Considerations
1.	Communication between server and client will use JSON format.
2.	Server applications will use multi-threading to handle concurrent client requests.
3.	Configuration settings (thresholds and intervals) will be stored in XML files.
4.	The system should be robust, ensuring minimal resource usage and optimized performance.
5.	Error handling should be implemented to manage connection failures, invalid requests, and unexpected conditions.


2.The structure of my project should look like this.
SystemStatLoggingMicroservice/
├── server/
│   ├── CMakeLists.txt
│   ├── main.cpp
│   ├── StatisticsTracker.h
│   ├── StatisticsTracker.cpp
│   ├── RestApiHandler.h
│   ├── RestApiHandler.cpp
│   ├── ConfigLoader.h
│   ├── ConfigLoader.cpp
│   └── PeriodicUpdater.h
│   └── PeriodicUpdater.cpp
├── client/
│   ├── CMakeLists.txt
│   ├── main.cpp
│   ├── ApiClient.h
│   ├── ApiClient.cpp
│   ├── JsonParser.h
│   ├── JsonParser.cpp
│   └── CsvLogger.h
│   └── CsvLogger.cpp
└── tests/
    ├── CMakeLists.txt
    └── ServerTests.cpp
