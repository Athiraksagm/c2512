#include "server.h"

using namespace boost::asio;
using namespace boost::beast;
using json = nlohmann::json;
using namespace tinyxml2;

const int DEFAULT_LOGGING_INTERVAL = 10;
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = DEFAULT_LOGGING_INTERVAL;
io_context ioc;

/**
 * @brief Retrieves the system boot count.
 * @return The number of times the system has rebooted, or -1 on failure.
 */
int getBootCount()
{
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute system command for boot count..\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        int count = std::stoi(buffer);
        return (count > 0) ? count : -1;
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

/**
 * @brief Retrieves the system uptime in seconds.
 * @return The system uptime in seconds, or -1 on failure.
 */
long getUptime()
{
    struct sysinfo info;
    if (sysinfo(&info) !=0){
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

/**
 * @brief Loads the logging interval configuration from config.xml.
 * @details If the configuration file is missing or invalid, it falls back to the default interval.
 */
void loadConfig()
{
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS)
    {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root)
    {
        std::cerr << "Error: <config> element missing in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
        return;
    }
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element)
    {
        std::cerr << "Error: <logging_interval> element missing in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
        return;
    }
    const char* interval_text = interval_element->GetText();
    if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit))
    {
        try {
            logging_interval = std::stoi(interval_text);
            std::cerr << "Logging interval set to: " << DEFAULT_LOGGING_INTERVAL << "s\n\n" << std::flush;
        } catch (...) {
            std::cerr << "Error: Invalid logging interval in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
            logging_interval = DEFAULT_LOGGING_INTERVAL;
        }
    } else {
        std::cerr << "Error: Invalid logging interval in config.xml (non-numeric value). Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n" << std::flush;
        logging_interval = DEFAULT_LOGGING_INTERVAL;
    }
}

/**
 * @brief Periodically broadcasts system statistics to all connected WebSocket clients.
 * @details Runs in a loop, sending the latest boot count and uptime at configured intervals.
 */
void broadcastStats()
{
    while (true)
    {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients)
            {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnected_clients.push_back(client);
                }
            }

            for (const auto &client : disconnected_clients)
            {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(std::max(1,logging_interval)));
    }
}

/**
 * @brief Handles communication with an individual WebSocket client.
 * @param socket The socket connected to the client.
 * @details Accepts a WebSocket connection, responds to requests, and maintains the connection for periodic updates.
 */
void handleClient(ip::tcp::socket socket)
{
        try {
            auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
            ws->accept();
            if (!ws->is_open())
            return;

            boost::beast::flat_buffer buffer;
            boost::system::error_code ec;
            // Read initial client request
            ws->read(buffer, ec);
            if (ec) {
                if (ec == boost::beast::websocket::error::closed) {
                    std::cout << "Client disconnected: WebSocket closed\n";
                } else if (ec == boost::asio::error::eof) {
                    std::cout << "Client disconnected.\n";
                } else {
                    std::cerr << "Error reading from client: " << ec.message() << "\n";
                }
                return;
            }

        std::string client_message = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (client_message == "REQUEST_STATS") {
            std::cout << "Request received from client. Sending current stats...\n\n";
            json first_stat;
            first_stat["boot_count"] = boot_count.load();
            first_stat["uptime"] = getUptime();
            ws->write(net::buffer(first_stat.dump()), ec);
        }

        // Add client to active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        // Continuous reading for periodic updates
        while (ws->is_open()) {
            buffer.clear(); 
            buffer.consume(buffer.size());
            ws->read(buffer, ec);

            if (ec == websocket::error::closed) {
                break;  
            }
            if (ec) {
                std::cerr << "Error reading from WebSocket: " << ec.message() << "\n";
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }

    } catch (const std::exception &e) {
        std::cerr << "Client error: " << e.what() << "\n";
    } catch (...) {
        std::cerr << "Unknown client error.\n";
    }
}

int main(int argc, char* argv[])
{
    std::cout << "=============================\n"
              << " SYSTEM STAT LOGGING SERVER\n"
              << "=============================\n\n";

    std::string ip_address = "0.0.0.0";
    int port = 9000;

    if (argc > 1) {
        ip_address = argv[1];
    }
    
    if (argc > 2) {
        try {
            port = std::stoi(argv[2]);
            if (port <= 0 || port > 65535) {
                throw std::out_of_range("Invalid port range");
            }
        } catch (...) {
            std::cerr << "Error: Invalid port argument. Using default port 9000.\n";
            port = 9000;
        }
    }

    std::cout << "Server running at http://" << ip_address << ":" << port << "...\n\n";

    loadConfig();
    boot_count.store(getBootCount());

    boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::make_address(ip_address), port);
    ip::tcp::acceptor acceptor(ioc, endpoint);

    std::thread logger(broadcastStats);
    logger.detach();

    while (true)
    {
        ip::tcp::socket socket(ioc);
        boost::system::error_code ec;
        acceptor.accept(socket, ec);
        if (!ec) {
            std::thread(handleClient, std::move(socket)).detach();
        } else {
            std::cerr << "Error accepting connection: " << ec.message() << "\n";
        }
    }

    return 0;
}







#include "gtest/gtest.h"
#include "server.h"
#include <fstream>
#include <boost/asio/ip/tcp.hpp>
#include <tinyxml2.h>

using json = nlohmann::json;
using namespace boost::asio;
using namespace boost::beast;
using namespace boost::asio::ip;
using namespace tinyxml2;

// Global variables
std::atomic<int> boot_count(0);
std::unordered_set<std::shared_ptr<websocket::stream<ip::tcp::socket>>> clients;
std::mutex clients_mutex;
int logging_interval = 10; 

// ===================== Helper Functions =====================

// Retrieve system boot count
int getBootCount()
{
    FILE *pipe = popen("last reboot | wc -l", "r");
    if (!pipe) {
        std::cerr << "Error: Failed to execute system command for boot count..\n";
        return -1;
    }
    char buffer[128];
    if (!fgets(buffer, sizeof(buffer), pipe)) {
        std::cerr << "Error: Failed to read boot count from command output.\n";
        pclose(pipe);
        return -1;
    }
    pclose(pipe);
    try {
        int count = std::stoi(buffer);
        return (count > 0) ? count : -1;
    } catch (...) {
        std::cerr << "Error: Invalid boot count format.\n";
        return -1;
    }
}

// Retrieve system uptime 
long getUptime()
{
    struct sysinfo info;
    if (sysinfo(&info) !=0){
        std::cerr << "Error: Failed to retrieve system uptime.\n";
        return -1;
    }
    return info.uptime;
}

// Load configuration settings from config.xml
void loadConfig()
{
    XMLDocument doc;
    if (doc.LoadFile("../source/config.xml") != XML_SUCCESS)
    {
        std::cerr << "Error: Could not load config.xml. Using default logging interval.\n";
        return;
    }
    XMLElement *root = doc.FirstChildElement("config");
    if (!root)
    {
        std::cerr << "Error: <config> element missing in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
        return;
    }
    XMLElement *interval_element = root->FirstChildElement("logging_interval");
    if (!interval_element)
    {
        std::cerr << "Error: <logging_interval> element missing in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
        return;
    }
    const char* interval_text = interval_element->GetText();
    if (interval_text && std::all_of(interval_text, interval_text + strlen(interval_text), ::isdigit))
    {
        try {
            logging_interval = std::stoi(interval_text);
            std::cerr << "Logging interval set to: " << DEFAULT_LOGGING_INTERVAL << "s\n\n" << std::flush;
        } catch (...) {
            std::cerr << "Error: Invalid logging interval in config.xml. Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n";
            logging_interval = DEFAULT_LOGGING_INTERVAL;
        }
    } else {
        std::cerr << "Error: Invalid logging interval in config.xml (non-numeric value). Using default " << DEFAULT_LOGGING_INTERVAL << "s.\n" << std::flush;
        logging_interval = DEFAULT_LOGGING_INTERVAL;
    }
}

// Broadcast system stats to connected WebSocket clients
void broadcastStats()
{
    while (true)
    {
        json stats;
        stats["boot_count"] = boot_count.load();
        stats["uptime"] = getUptime();
        std::string message = stats.dump();

        std::vector<std::shared_ptr<websocket::stream<ip::tcp::socket>>> disconnected_clients;

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            for (auto &client : clients)
            {
                boost::system::error_code ec;
                client->write(net::buffer(message), ec);
                if (ec) {
                    std::cerr << "Client disconnected: " << ec.message() << "\n";
                    disconnected_clients.push_back(client);
                }
            }

            for (const auto &client : disconnected_clients)
            {
                clients.erase(client);
            }
        }

        std::this_thread::sleep_for(std::chrono::seconds(std::max(1,logging_interval)));
    }
}

void handleClient(ip::tcp::socket socket)
{
        try {
            auto ws = std::make_shared<websocket::stream<ip::tcp::socket>>(std::move(socket));
            ws->accept();
            if (!ws->is_open())
            return;

            boost::beast::flat_buffer buffer;
            boost::system::error_code ec;
            // Read initial client request
            ws->read(buffer, ec);
            if (ec) {
                if (ec == boost::beast::websocket::error::closed) {
                    std::cout << "Client disconnected: WebSocket closed\n";
                } else if (ec == boost::asio::error::eof) {
                    std::cout << "Client disconnected.\n";
                } else {
                    std::cerr << "Error reading from client: " << ec.message() << "\n";
                }
                return;
            }

        std::string client_message = boost::beast::buffers_to_string(buffer.data());
        buffer.consume(buffer.size());

        if (client_message == "REQUEST_STATS") {
            std::cout << "Request received from client. Sending current stats...\n\n";
            json first_stat;
            first_stat["boot_count"] = boot_count.load();
            first_stat["uptime"] = getUptime();
            ws->write(net::buffer(first_stat.dump()), ec);
        }

        // Add client to active list
        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.insert(ws);
        }

        // Continuous reading for periodic updates
        while (ws->is_open()) {
            buffer.clear(); 
            buffer.consume(buffer.size());
            ws->read(buffer, ec);

            if (ec == websocket::error::closed) {
                break;  
            }
            if (ec) {
                std::cerr << "Error reading from WebSocket: " << ec.message() << "\n";
                break;
            }
        }

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients.erase(ws);
        }

    } catch (const std::exception &e) {
        std::cerr << "Client error: " << e.what() << "\n";
    } catch (...) {
        std::cerr << "Unknown client error.\n";
    }
}

// ===================== TEST CASES =====================

// Test getBootCount()
TEST(SystemStatsTest, GetBootCount) {
    int boot_count = getBootCount();

    // Boot count should be a non-negative integer
    EXPECT_GE(boot_count, 0) << "Boot count must be >= 0";
}

// est getUptime()
TEST(SystemStatsTest, GetUptime) {
    long uptime = getUptime();

    // Uptime should be a positive value
    EXPECT_GT(uptime, 0) << "System uptime should be greater than zero";
}

// Test loadConfig()
TEST(SystemStatsTest, LoadConfig) {
    // Ensure logging_interval is correctly set
    loadConfig();
    EXPECT_GT(logging_interval, 0) << "Logging interval should be a positive value";
}

// Test broadcastStats()
TEST(SystemStatsTest, BroadcastStats) {
    // Clear existing clients before testing
    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        clients.clear();
    }
    
    // Ensure function does not crash
    EXPECT_NO_FATAL_FAILURE(broadcastStats());
}

// Test loadConfig() with different cases
TEST(SystemStatsTest, LoadConfig_ValidXML) {
    // Create a test config.xml
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <logging_interval>15</logging_interval>\n"
               << "</config>";
    configFile.close();

    // Load the configuration
    loadConfig();

    // Validate that the interval was updated correctly
    EXPECT_EQ(logging_interval, 15);
}

TEST(SystemStatsTest, LoadConfig_InvalidXML) {
    // Create an invalid test config.xml
    std::ofstream configFile("../source/config.xml");
    configFile << "<config>\n"
               << "    <logging_interval>invalid</logging_interval>\n"
               << "</config>";
    configFile.close();

    // Load the configuration
    loadConfig();

    // Validate that the default value is used
    EXPECT_EQ(logging_interval, 10);
}

TEST(SystemStatsTest, LoadConfig_MissingFile) {
    // Ensure missing config.xml scenario
    remove("../source/config.xml");

    // Load the configuration
    loadConfig();

    // Validate that the default value is used
    EXPECT_EQ(logging_interval, 10);
}

TEST(ServerTests, HandleClient) {
    io_context ioc;
    tcp::acceptor acceptor(ioc, tcp::endpoint(tcp::v4(), 8080));

    // Start a thread to accept a client connection and handle it
    std::thread server_thread([&]() {
        tcp::socket socket(ioc);
        acceptor.accept(socket);
        handleClient(std::move(socket));  // Testing the actual function
    });

    std::this_thread::sleep_for(std::chrono::seconds(1)); // Give the server time to start

    // Simulate a WebSocket client
    websocket::stream<tcp::socket> ws(ioc);
    tcp::resolver resolver(ioc);
    auto const results = resolver.resolve("127.0.0.1", "8080");
    connect(ws.next_layer(), results.begin(), results.end());
    ws.handshake("127.0.0.1", "/");

    // Send a request to the server and read the response
    ws.write(net::buffer(std::string("REQUEST_STATS")));
    flat_buffer buffer;
    ws.read(buffer);
    std::string received_message = buffers_to_string(buffer.data());

    // Verify the server response contains valid JSON with expected fields
    json response = json::parse(received_message);
    EXPECT_TRUE(response.contains("boot_count"));
    EXPECT_TRUE(response.contains("uptime"));
    EXPECT_GE(response["boot_count"].get<int>(), 0);
    EXPECT_GE(response["uptime"].get<long>(), 0);

    // Clean up
    ws.close(websocket::close_code::normal);
    server_thread.join();
}

// ===================== MAIN FUNCTION FOR TESTS =====================
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}




Please use any of the tools such as gcov, lcov, or llvm-cov or any other to get the percentage of code coverage in your gtest
