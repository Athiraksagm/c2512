#include <iostream>
#include <fstream>
#include <string>
#include <Poco/Net/HTTPServer.h>
#include <Poco/Net/HTTPRequestHandlerFactory.h>
#include <Poco/Net/HTTPServerParams.h>
#include <Poco/Thread.h>
#include <Poco/Net/HTTPServerRequest.h>
#include <Poco/Net/HTTPServerResponse.h>
#include <Poco/JSON/Object.h>
#include <Poco/JSON/Parser.h>
#include <sys/sysinfo.h>
#include <unistd.h>

const std::string BOOT_COUNT_FILE = "boot_count.txt";

// Function to get the system's boot time as a Unix timestamp
long getSystemBootTime() {
    struct sysinfo info;
    if (sysinfo(&info) == 0) {
        return time(nullptr) - info.uptime;  // Absolute boot time = current time - uptime
    }
    return 0;
}

// Function to get the boot count from the file
int getBootCount() {
    std::ifstream file(BOOT_COUNT_FILE);
    int bootCount = 0;
    
    if (file.is_open()) {
        file >> bootCount; // Read current boot count from the file
        file.close();
    }
    
    return bootCount;
}

// Function to update the boot count in the file
void updateBootCount(int bootCount) {
    std::ofstream file(BOOT_COUNT_FILE);
    if (file.is_open()) {
        file << bootCount; // Write the updated boot count to the file
        file.close();
    }
}

// HTTP Request Handler for providing system stats
class StatsRequestHandler : public Poco::Net::HTTPRequestHandler {
public:
    void handleRequest(Poco::Net::HTTPServerRequest& request, Poco::Net::HTTPServerResponse& response) override {
        // Retrieve boot count and uptime
        int bootCount = getBootCount();
        long uptime = sysinfo().uptime;

        // Prepare the JSON response
        Poco::JSON::Object jsonResponse;
        jsonResponse.set("boot_count", bootCount);
        jsonResponse.set("uptime", uptime);

        std::ostream& ostr = response.send();
        response.setContentType("application/json");
        response.setStatus(Poco::Net::HTTPResponse::HTTP_OK);
        jsonResponse.stringify(ostr);
    }
};

// Main function to start the HTTP server
int main() {
    int bootCount = getBootCount();
    bootCount++;  // Increment boot count on each restart
    updateBootCount(bootCount);  // Update boot count file

    std::cout << "=============================" << std::endl;
    std::cout << " SYSTEM STAT LOGGING SERVER " << std::endl;
    std::cout << "=============================" << std::endl;
    std::cout << "Boot Count: " << bootCount << std::endl;
    
    // Start the HTTP server
    Poco::Net::HTTPServerParams* pParams = new Poco::Net::HTTPServerParams;
    Poco::Net::HTTPRequestHandlerFactory* pFactory = new Poco::Net::HTTPRequestHandlerFactoryImpl<StatsRequestHandler>();
    Poco::Net::HTTPServer srv(pFactory, Poco::Net::ServerSocket(8080), pParams);
    srv.start();
    
    std::cout << "Server running at http://localhost:8080..." << std::endl;
    std::cout << "Waiting for client requests..." << std::endl;
    
    // Keep the server running
    Poco::Thread::sleep(Poco::Timespan::SECONDS * 3600);
    
    return 0;
}






#include <iostream>
#include <Poco/Net/HTTPClientSession.h>
#include <Poco/Net/HTTPRequest.h>
#include <Poco/Net/HTTPResponse.h>
#include <Poco/JSON/Parser.h>

int main() {
    try {
        // Create a session to connect to the server
        Poco::Net::HTTPClientSession session("localhost", 8080);

        // Prepare the HTTP request
        Poco::Net::HTTPRequest request(Poco::Net::HTTPRequest::HTTP_GET, "/stats", Poco::Net::HTTPMessage::HTTP_1_1);

        // Send the request
        session.sendRequest(request);

        // Receive the response
        Poco::Net::HTTPResponse response;
        std::istream& responseStream = session.receiveResponse(response);

        // Parse the JSON response
        Poco::JSON::Parser parser;
        Poco::Dynamic::Var result = parser.parse(responseStream);
        Poco::JSON::Object::Ptr object = result.extract<Poco::JSON::Object::Ptr>();

        // Retrieve and display the boot count and uptime
        int bootCount = object->getValue<int>("boot_count");
        long uptime = object->getValue<long>("uptime");

        std::cout << "Boot Count: " << bootCount << std::endl;
        std::cout << "Uptime: " << uptime << " seconds" << std::endl;

    } catch (const Poco::Exception& ex) {
        std::cerr << "Error: " << ex.displayText() << std::endl;
    }

    return 0;
}