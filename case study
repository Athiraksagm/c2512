#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <iomanip>
#include <map>

using namespace std;

// Global Variables
vector<class Patient> patients;
vector<class Doctor> doctors;
vector<class Appointment> appointments;
map<int, vector<string>> medicalHistories;
int patientIDCounter = 1;
int doctorIDCounter = 1;
int appointmentIDCounter = 1;

// Utility Functions
int generateID() {
    static int id = 1;
    return id++;
}

// Patient Class
class Patient {
public:
    int patientID;
    string name;
    int age;
    string contactInfo;
    string medicalHistory;

    void addPatient();
    void viewPatientDetails();
    void updatePatientDetails();
};

// Doctor Class
class Doctor {
public:
    int doctorID;
    string name;
    string specialization;
    string contactInfo;
    bool availability; // Availability of the doctor (true for available, false for unavailable)

    void addDoctor();
    void viewDoctorDetails();
    void assignPatient();
};

// Appointment Class
class Appointment {
public:
    int appointmentID;
    int patientID;
    int doctorID;
    string date;
    string time;

    void scheduleAppointment();
    void cancelAppointment();
    void viewAppointments();
};

// Medical History Class
class MedicalHistory {
public:
    int patientID;
    int doctorID;
    string notes;
    string date;

    void addNotes();
    void viewNotes();
};

// Patient Implementation
void Patient::addPatient() {
    patientID = generateID();
    cout << "Enter Patient Name: ";
    cin.ignore();
    getline(cin, name);
    cout << "Enter Age: ";
    cin >> age;
    cout << "Enter Contact Info: ";
    cin.ignore();
    getline(cin, contactInfo);
    medicalHistory = "";
    patients.push_back(*this);
    cout << "Patient added successfully. ID: " << patientID << endl;
}

void Patient::viewPatientDetails() {
    cout << setw(10) << "ID" << setw(20) << "Name" << setw(5) << "Age" << setw(20)
         << "Contact Info" << endl;
    cout << string(60, '-') << endl;
    for (const auto& p : patients) {
        cout << setw(10) << p.patientID << setw(20) << p.name << setw(5) << p.age
             << setw(20) << p.contactInfo << endl;
    }
}

void Patient::updatePatientDetails() {
    int id;
    cout << "Enter Patient ID to update: ";
    cin >> id;
    for (auto& p : patients) {
        if (p.patientID == id) {
            cout << "Enter Updated Name: ";
            cin.ignore();
            getline(cin, p.name);
            cout << "Enter Updated Age: ";
            cin >> p.age;
            cout << "Enter Updated Contact Info: ";
            cin.ignore();
            getline(cin, p.contactInfo);
            cout << "Patient details updated successfully." << endl;
            return;
        }
    }
    cout << "Patient not found!" << endl;
}

// Doctor Implementation
void Doctor::addDoctor() {
    doctorID = generateID();
    cout << "Enter Doctor Name: ";
    cin.ignore();
    getline(cin, name);
    cout << "Enter Specialization: ";
    getline(cin, specialization);
    cout << "Enter Contact Info: ";
    getline(cin, contactInfo);
    availability = true; // New doctors are available by default
    doctors.push_back(*this);
    cout << "Doctor added successfully. ID: " << doctorID << endl;
}

void Doctor::viewDoctorDetails() {
    cout << setw(10) << "ID" << setw(20) << "Name" << setw(20) << "Specialization"
         << setw(20) << "Contact Info" << setw(15) << "Availability" << endl;
    cout << string(85, '-') << endl;
    for (const auto& d : doctors) {
        cout << setw(10) << d.doctorID << setw(20) << d.name << setw(20)
             << d.specialization << setw(20) << d.contactInfo
             << setw(15) << (d.availability ? "Available" : "Unavailable") << endl;
    }
}

void Doctor::assignPatient() {
    int id;
    cout << "Enter Doctor ID: ";
    cin >> id;
    for (auto& d : doctors) {
        if (d.doctorID == id) {
            if (!d.availability) {
                cout << "Doctor is currently unavailable." << endl;
                return;
            }
            d.availability = false; // Assigning patient sets availability to false
            cout << "Doctor assigned successfully!" << endl;
            return;
        }
    }
    cout << "Doctor not found!" << endl;
}

// Appointment Implementation
void Appointment::scheduleAppointment() {
    appointmentID = generateID();
    cout << "Enter Patient ID: ";
    cin >> patientID;
    cout << "Enter Doctor ID: ";
    cin >> doctorID;
    cout << "Enter Appointment Date (DD-MM-YYYY): ";
    cin >> date;
    cout << "Enter Appointment Time (HH:MM): ";
    cin >> time;
    appointments.push_back(*this);
    cout << "Appointment scheduled successfully. ID: " << appointmentID << endl;
}

void Appointment::cancelAppointment() {
    int id;
    cout << "Enter Appointment ID to cancel: ";
    cin >> id;
    for (auto it = appointments.begin(); it != appointments.end(); ++it) {
        if (it->appointmentID == id) {
            appointments.erase(it);
            cout << "Appointment cancelled successfully." << endl;
            return;
        }
    }
    cout << "Appointment not found!" << endl;
}

void Appointment::viewAppointments() {
    cout << setw(10) << "ID" << setw(10) << "Patient ID" << setw(10) << "Doctor ID"
         << setw(15) << "Date" << setw(10) << "Time" << endl;
    cout << string(60, '-') << endl;
    for (const auto& a : appointments) {
        cout << setw(10) << a.appointmentID << setw(10) << a.patientID
             << setw(10) << a.doctorID << setw(15) << a.date << setw(10)
             << a.time << endl;
    }
}

// Medical History Implementation
void MedicalHistory::addNotes() {
    int id;
    cout << "Enter Patient ID: ";
    cin >> id;
    cout << "Enter Notes: ";
    cin.ignore();
    getline(cin, notes);
    cout << "Enter Date (DD-MM-YYYY): ";
    getline(cin, date);
    medicalHistories[id].push_back(notes + " (" + date + ")");
    cout << "Medical history updated successfully." << endl;
}

void MedicalHistory::viewNotes() {
    int id;
    cout << "Enter Patient ID: ";
    cin >> id;
    if (medicalHistories.find(id) != medicalHistories.end()) {
        cout << "Medical History for Patient ID " << id << ":" << endl;
        for (const auto& note : medicalHistories[id]) {
            cout << "- " << note << endl;
        }
    } else {
        cout << "No medical history found for this patient." << endl;
    }
}

// Main Function
int main() {
    int choice;
    while (true) {
        cout << "\nHospital Management System\n";
        cout << "1. Add Patient\n2. View Patients\n3. Update Patient\n";
        cout << "4. Add Doctor\n5. View Doctors\n6. Assign Doctor to Patient\n";
        cout << "7. Schedule Appointment\n8. Cancel Appointment\n9. View Appointments\n";
        cout << "10. Add Medical History\n11. View Medical History\n12. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        Patient p;
        Doctor d;
        Appointment a;
        MedicalHistory mh;

        switch (choice) {
            case 1: p.addPatient(); break;
            case 2: p.viewPatientDetails(); break;
            case 3: p.updatePatientDetails(); break;
            case 4: d.addDoctor(); break;
            case 5: d.viewDoctorDetails(); break;
            case 6: d.assignPatient(); break;
            case 7: a.scheduleAppointment(); break;
            case 8: a.cancelAppointment(); break;
            case 9: a.viewAppointments(); break;
            case 10: mh.addNotes(); break;
            case 11: mh.viewNotes(); break;
            case 12: return 0;
            default: cout << "Invalid choice! Try again.\n";
        }
    }
}
